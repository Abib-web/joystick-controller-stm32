
laboratoire_i2c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076b4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b0  08007888  08007888  00008888  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e38  08007e38  000091e8  2**0
                  CONTENTS
  4 .ARM          00000008  08007e38  08007e38  00008e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e40  08007e40  000091e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e40  08007e40  00008e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007e44  08007e44  00008e44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  08007e48  00009000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000214  200001e8  08008030  000091e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003fc  08008030  000093fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000091e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000afb8  00000000  00000000  00009218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019de  00000000  00000000  000141d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a28  00000000  00000000  00015bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007ec  00000000  00000000  000165d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022339  00000000  00000000  00016dc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dbff  00000000  00000000  000390fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd07c  00000000  00000000  00046cfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00113d78  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c60  00000000  00000000  00113dbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00117a1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800786c 	.word	0x0800786c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	0800786c 	.word	0x0800786c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <main>:
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);
static void MX_USART2_UART_Init(void);

int main(void)
{
 8000f78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f7c:	b0d0      	sub	sp, #320	@ 0x140
 8000f7e:	af0a      	add	r7, sp, #40	@ 0x28
    HAL_Init();
 8000f80:	f000 fd46 	bl	8001a10 <HAL_Init>
    SystemClock_Config();
 8000f84:	f000 fa66 	bl	8001454 <SystemClock_Config>
    MX_GPIO_Init();
 8000f88:	f000 fb2a 	bl	80015e0 <MX_GPIO_Init>
    MX_I2C1_Init();
 8000f8c:	f000 fad0 	bl	8001530 <MX_I2C1_Init>
    MX_USART2_UART_Init();
 8000f90:	f000 fafc 	bl	800158c <MX_USART2_UART_Init>

    // Message de démarrage
    const char startMsg[] = "Starting initialization...\n\r";
 8000f94:	4b54      	ldr	r3, [pc, #336]	@ (80010e8 <main+0x170>)
 8000f96:	f107 04e4 	add.w	r4, r7, #228	@ 0xe4
 8000f9a:	461d      	mov	r5, r3
 8000f9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fa0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000fa4:	c407      	stmia	r4!, {r0, r1, r2}
 8000fa6:	7023      	strb	r3, [r4, #0]
    HAL_UART_Transmit(&huart2, (uint8_t*)startMsg, strlen(startMsg), HAL_MAX_DELAY);
 8000fa8:	f107 01e4 	add.w	r1, r7, #228	@ 0xe4
 8000fac:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb0:	221c      	movs	r2, #28
 8000fb2:	484e      	ldr	r0, [pc, #312]	@ (80010ec <main+0x174>)
 8000fb4:	f002 ff9c 	bl	8003ef0 <HAL_UART_Transmit>

    // Vérification de la disponibilité de la manette
    if (HAL_I2C_IsDeviceReady(&hi2c1, NUNCHUK_ADDRESS, 3, HAL_MAX_DELAY) != HAL_OK) {
 8000fb8:	f04f 33ff 	mov.w	r3, #4294967295
 8000fbc:	2203      	movs	r2, #3
 8000fbe:	21a4      	movs	r1, #164	@ 0xa4
 8000fc0:	484b      	ldr	r0, [pc, #300]	@ (80010f0 <main+0x178>)
 8000fc2:	f001 fca9 	bl	8002918 <HAL_I2C_IsDeviceReady>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d016      	beq.n	8000ffa <main+0x82>
        const char errMsg[] = "Nunchuk not responding. Check wiring and address.\n\r";
 8000fcc:	4b49      	ldr	r3, [pc, #292]	@ (80010f4 <main+0x17c>)
 8000fce:	f107 041c 	add.w	r4, r7, #28
 8000fd2:	461d      	mov	r5, r3
 8000fd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fe0:	682b      	ldr	r3, [r5, #0]
 8000fe2:	6023      	str	r3, [r4, #0]
        HAL_UART_Transmit(&huart2, (uint8_t*)errMsg, strlen(errMsg), HAL_MAX_DELAY);
 8000fe4:	f107 011c 	add.w	r1, r7, #28
 8000fe8:	f04f 33ff 	mov.w	r3, #4294967295
 8000fec:	2233      	movs	r2, #51	@ 0x33
 8000fee:	483f      	ldr	r0, [pc, #252]	@ (80010ec <main+0x174>)
 8000ff0:	f002 ff7e 	bl	8003ef0 <HAL_UART_Transmit>
        Error_Handler();
 8000ff4:	f000 fb1c 	bl	8001630 <Error_Handler>
 8000ff8:	e014      	b.n	8001024 <main+0xac>
    } else {
        const char readyMsg[] = "Nunchuk is ready for communication.\n\r";
 8000ffa:	4b3f      	ldr	r3, [pc, #252]	@ (80010f8 <main+0x180>)
 8000ffc:	f107 041c 	add.w	r4, r7, #28
 8001000:	461d      	mov	r5, r3
 8001002:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001004:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001006:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001008:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800100a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800100e:	6020      	str	r0, [r4, #0]
 8001010:	3404      	adds	r4, #4
 8001012:	8021      	strh	r1, [r4, #0]
        HAL_UART_Transmit(&huart2, (uint8_t*)readyMsg, strlen(readyMsg), HAL_MAX_DELAY);
 8001014:	f107 011c 	add.w	r1, r7, #28
 8001018:	f04f 33ff 	mov.w	r3, #4294967295
 800101c:	2225      	movs	r2, #37	@ 0x25
 800101e:	4833      	ldr	r0, [pc, #204]	@ (80010ec <main+0x174>)
 8001020:	f002 ff66 	bl	8003ef0 <HAL_UART_Transmit>
    }

    // Initialisation du Nunchuk
    if (HAL_I2C_Master_Transmit(&hi2c1, NUNCHUK_ADDRESS, init, 2, HAL_MAX_DELAY) != HAL_OK) {
 8001024:	f04f 33ff 	mov.w	r3, #4294967295
 8001028:	9300      	str	r3, [sp, #0]
 800102a:	2302      	movs	r3, #2
 800102c:	4a33      	ldr	r2, [pc, #204]	@ (80010fc <main+0x184>)
 800102e:	21a4      	movs	r1, #164	@ 0xa4
 8001030:	482f      	ldr	r0, [pc, #188]	@ (80010f0 <main+0x178>)
 8001032:	f001 f941 	bl	80022b8 <HAL_I2C_Master_Transmit>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d016      	beq.n	800106a <main+0xf2>
        const char errMsg[] = "Error in first transmission to initialize Nunchuk\n\r";
 800103c:	4b30      	ldr	r3, [pc, #192]	@ (8001100 <main+0x188>)
 800103e:	f107 041c 	add.w	r4, r7, #28
 8001042:	461d      	mov	r5, r3
 8001044:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001046:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001048:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800104a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800104c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800104e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001050:	682b      	ldr	r3, [r5, #0]
 8001052:	6023      	str	r3, [r4, #0]
        HAL_UART_Transmit(&huart2, (uint8_t*)errMsg, strlen(errMsg), HAL_MAX_DELAY);
 8001054:	f107 011c 	add.w	r1, r7, #28
 8001058:	f04f 33ff 	mov.w	r3, #4294967295
 800105c:	2233      	movs	r2, #51	@ 0x33
 800105e:	4823      	ldr	r0, [pc, #140]	@ (80010ec <main+0x174>)
 8001060:	f002 ff46 	bl	8003ef0 <HAL_UART_Transmit>
        Error_Handler();
 8001064:	f000 fae4 	bl	8001630 <Error_Handler>
 8001068:	e013      	b.n	8001092 <main+0x11a>
    } else {
        const char initSuccess[] = "Initialization command sent successfully.\n\r";
 800106a:	4b26      	ldr	r3, [pc, #152]	@ (8001104 <main+0x18c>)
 800106c:	f107 041c 	add.w	r4, r7, #28
 8001070:	461d      	mov	r5, r3
 8001072:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001074:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001076:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001078:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800107a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800107e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        HAL_UART_Transmit(&huart2, (uint8_t*)initSuccess, strlen(initSuccess), HAL_MAX_DELAY);
 8001082:	f107 011c 	add.w	r1, r7, #28
 8001086:	f04f 33ff 	mov.w	r3, #4294967295
 800108a:	222b      	movs	r2, #43	@ 0x2b
 800108c:	4817      	ldr	r0, [pc, #92]	@ (80010ec <main+0x174>)
 800108e:	f002 ff2f 	bl	8003ef0 <HAL_UART_Transmit>
    }
    HAL_Delay(100);
 8001092:	2064      	movs	r0, #100	@ 0x64
 8001094:	f000 fd2e 	bl	8001af4 <HAL_Delay>

    // Envoi de la commande 0x00 pour démarrer la communication
    uint8_t command = 0x00;
 8001098:	2300      	movs	r3, #0
 800109a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
    if (HAL_I2C_Master_Transmit(&hi2c1, NUNCHUK_ADDRESS, &command, 1, HAL_MAX_DELAY) != HAL_OK) {
 800109e:	f107 02e3 	add.w	r2, r7, #227	@ 0xe3
 80010a2:	f04f 33ff 	mov.w	r3, #4294967295
 80010a6:	9300      	str	r3, [sp, #0]
 80010a8:	2301      	movs	r3, #1
 80010aa:	21a4      	movs	r1, #164	@ 0xa4
 80010ac:	4810      	ldr	r0, [pc, #64]	@ (80010f0 <main+0x178>)
 80010ae:	f001 f903 	bl	80022b8 <HAL_I2C_Master_Transmit>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d029      	beq.n	800110c <main+0x194>
        const char errMsg[] = "Error in second transmission (0x00 command)\n\r";
 80010b8:	4b13      	ldr	r3, [pc, #76]	@ (8001108 <main+0x190>)
 80010ba:	f107 041c 	add.w	r4, r7, #28
 80010be:	461d      	mov	r5, r3
 80010c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010c8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80010cc:	c407      	stmia	r4!, {r0, r1, r2}
 80010ce:	8023      	strh	r3, [r4, #0]
        HAL_UART_Transmit(&huart2, (uint8_t*)errMsg, strlen(errMsg), HAL_MAX_DELAY);
 80010d0:	f107 011c 	add.w	r1, r7, #28
 80010d4:	f04f 33ff 	mov.w	r3, #4294967295
 80010d8:	222d      	movs	r2, #45	@ 0x2d
 80010da:	4804      	ldr	r0, [pc, #16]	@ (80010ec <main+0x174>)
 80010dc:	f002 ff08 	bl	8003ef0 <HAL_UART_Transmit>
        Error_Handler();
 80010e0:	f000 faa6 	bl	8001630 <Error_Handler>
 80010e4:	e024      	b.n	8001130 <main+0x1b8>
 80010e6:	bf00      	nop
 80010e8:	080078f4 	.word	0x080078f4
 80010ec:	20000258 	.word	0x20000258
 80010f0:	20000204 	.word	0x20000204
 80010f4:	08007914 	.word	0x08007914
 80010f8:	08007948 	.word	0x08007948
 80010fc:	20000000 	.word	0x20000000
 8001100:	08007970 	.word	0x08007970
 8001104:	080079a4 	.word	0x080079a4
 8001108:	080079d0 	.word	0x080079d0
    } else {
        const char commandSuccess[] = "0x00 command sent successfully.\n\r";
 800110c:	4bc8      	ldr	r3, [pc, #800]	@ (8001430 <main+0x4b8>)
 800110e:	f107 041c 	add.w	r4, r7, #28
 8001112:	461d      	mov	r5, r3
 8001114:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001116:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001118:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800111a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800111c:	682b      	ldr	r3, [r5, #0]
 800111e:	8023      	strh	r3, [r4, #0]
        HAL_UART_Transmit(&huart2, (uint8_t*)commandSuccess, strlen(commandSuccess), HAL_MAX_DELAY);
 8001120:	f107 011c 	add.w	r1, r7, #28
 8001124:	f04f 33ff 	mov.w	r3, #4294967295
 8001128:	2221      	movs	r2, #33	@ 0x21
 800112a:	48c2      	ldr	r0, [pc, #776]	@ (8001434 <main+0x4bc>)
 800112c:	f002 fee0 	bl	8003ef0 <HAL_UART_Transmit>
    }
    HAL_Delay(10);
 8001130:	200a      	movs	r0, #10
 8001132:	f000 fcdf 	bl	8001af4 <HAL_Delay>

    // Entrée dans la boucle principale
    const char loopMsg[] = "Entering main loop...\n\r";
 8001136:	4bc0      	ldr	r3, [pc, #768]	@ (8001438 <main+0x4c0>)
 8001138:	f107 04c8 	add.w	r4, r7, #200	@ 0xc8
 800113c:	461d      	mov	r5, r3
 800113e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001140:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001142:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001146:	e884 0003 	stmia.w	r4, {r0, r1}
    HAL_UART_Transmit(&huart2, (uint8_t*)loopMsg, strlen(loopMsg), HAL_MAX_DELAY);
 800114a:	f107 01c8 	add.w	r1, r7, #200	@ 0xc8
 800114e:	f04f 33ff 	mov.w	r3, #4294967295
 8001152:	2217      	movs	r2, #23
 8001154:	48b7      	ldr	r0, [pc, #732]	@ (8001434 <main+0x4bc>)
 8001156:	f002 fecb 	bl	8003ef0 <HAL_UART_Transmit>

    while (1)
    {
        // Demande de lecture des données
        if (HAL_I2C_Master_Transmit(&hi2c1, NUNCHUK_ADDRESS, &command, 1, HAL_MAX_DELAY) != HAL_OK) {
 800115a:	f107 02e3 	add.w	r2, r7, #227	@ 0xe3
 800115e:	f04f 33ff 	mov.w	r3, #4294967295
 8001162:	9300      	str	r3, [sp, #0]
 8001164:	2301      	movs	r3, #1
 8001166:	21a4      	movs	r1, #164	@ 0xa4
 8001168:	48b4      	ldr	r0, [pc, #720]	@ (800143c <main+0x4c4>)
 800116a:	f001 f8a5 	bl	80022b8 <HAL_I2C_Master_Transmit>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d013      	beq.n	800119c <main+0x224>
            const char errMsg[] = "Error in data request\n\r";
 8001174:	4bb2      	ldr	r3, [pc, #712]	@ (8001440 <main+0x4c8>)
 8001176:	f107 04b0 	add.w	r4, r7, #176	@ 0xb0
 800117a:	461d      	mov	r5, r3
 800117c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800117e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001180:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001184:	e884 0003 	stmia.w	r4, {r0, r1}
            HAL_UART_Transmit(&huart2, (uint8_t*)errMsg, strlen(errMsg), HAL_MAX_DELAY);
 8001188:	f107 01b0 	add.w	r1, r7, #176	@ 0xb0
 800118c:	f04f 33ff 	mov.w	r3, #4294967295
 8001190:	2217      	movs	r2, #23
 8001192:	48a8      	ldr	r0, [pc, #672]	@ (8001434 <main+0x4bc>)
 8001194:	f002 feac 	bl	8003ef0 <HAL_UART_Transmit>
            Error_Handler();
 8001198:	f000 fa4a 	bl	8001630 <Error_Handler>
        }
        HAL_Delay(10);
 800119c:	200a      	movs	r0, #10
 800119e:	f000 fca9 	bl	8001af4 <HAL_Delay>

        // Réception des données
        if (HAL_I2C_Master_Receive(&hi2c1, NUNCHUK_ADDRESS, data, 6, HAL_MAX_DELAY) != HAL_OK) {
 80011a2:	f04f 33ff 	mov.w	r3, #4294967295
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	2306      	movs	r3, #6
 80011aa:	4aa6      	ldr	r2, [pc, #664]	@ (8001444 <main+0x4cc>)
 80011ac:	21a4      	movs	r1, #164	@ 0xa4
 80011ae:	48a3      	ldr	r0, [pc, #652]	@ (800143c <main+0x4c4>)
 80011b0:	f001 f980 	bl	80024b4 <HAL_I2C_Master_Receive>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d013      	beq.n	80011e2 <main+0x26a>
            const char errMsg[] = "Error in data reception\n\r";
 80011ba:	4ba3      	ldr	r3, [pc, #652]	@ (8001448 <main+0x4d0>)
 80011bc:	f107 0494 	add.w	r4, r7, #148	@ 0x94
 80011c0:	461d      	mov	r5, r3
 80011c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011c6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011ca:	c403      	stmia	r4!, {r0, r1}
 80011cc:	8022      	strh	r2, [r4, #0]
            HAL_UART_Transmit(&huart2, (uint8_t*)errMsg, strlen(errMsg), HAL_MAX_DELAY);
 80011ce:	f107 0194 	add.w	r1, r7, #148	@ 0x94
 80011d2:	f04f 33ff 	mov.w	r3, #4294967295
 80011d6:	2219      	movs	r2, #25
 80011d8:	4896      	ldr	r0, [pc, #600]	@ (8001434 <main+0x4bc>)
 80011da:	f002 fe89 	bl	8003ef0 <HAL_UART_Transmit>
            Error_Handler();
 80011de:	f000 fa27 	bl	8001630 <Error_Handler>
        }

        // Extraction des données
        uint8_t joystickX = data[0];
 80011e2:	4b98      	ldr	r3, [pc, #608]	@ (8001444 <main+0x4cc>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        uint8_t joystickY = data[1];
 80011ea:	4b96      	ldr	r3, [pc, #600]	@ (8001444 <main+0x4cc>)
 80011ec:	785b      	ldrb	r3, [r3, #1]
 80011ee:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
        uint16_t accelX = (data[2] << 2) | ((data[5] >> 2) & 0x03);
 80011f2:	4b94      	ldr	r3, [pc, #592]	@ (8001444 <main+0x4cc>)
 80011f4:	789b      	ldrb	r3, [r3, #2]
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	b21a      	sxth	r2, r3
 80011fa:	4b92      	ldr	r3, [pc, #584]	@ (8001444 <main+0x4cc>)
 80011fc:	795b      	ldrb	r3, [r3, #5]
 80011fe:	089b      	lsrs	r3, r3, #2
 8001200:	b2db      	uxtb	r3, r3
 8001202:	b21b      	sxth	r3, r3
 8001204:	f003 0303 	and.w	r3, r3, #3
 8001208:	b21b      	sxth	r3, r3
 800120a:	4313      	orrs	r3, r2
 800120c:	b21b      	sxth	r3, r3
 800120e:	f8a7 3114 	strh.w	r3, [r7, #276]	@ 0x114
        uint16_t accelY = (data[3] << 2) | ((data[5] >> 4) & 0x03);
 8001212:	4b8c      	ldr	r3, [pc, #560]	@ (8001444 <main+0x4cc>)
 8001214:	78db      	ldrb	r3, [r3, #3]
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	b21a      	sxth	r2, r3
 800121a:	4b8a      	ldr	r3, [pc, #552]	@ (8001444 <main+0x4cc>)
 800121c:	795b      	ldrb	r3, [r3, #5]
 800121e:	091b      	lsrs	r3, r3, #4
 8001220:	b2db      	uxtb	r3, r3
 8001222:	b21b      	sxth	r3, r3
 8001224:	f003 0303 	and.w	r3, r3, #3
 8001228:	b21b      	sxth	r3, r3
 800122a:	4313      	orrs	r3, r2
 800122c:	b21b      	sxth	r3, r3
 800122e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
        uint16_t accelZ = (data[4] << 2) | ((data[5] >> 6) & 0x03);
 8001232:	4b84      	ldr	r3, [pc, #528]	@ (8001444 <main+0x4cc>)
 8001234:	791b      	ldrb	r3, [r3, #4]
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	b21a      	sxth	r2, r3
 800123a:	4b82      	ldr	r3, [pc, #520]	@ (8001444 <main+0x4cc>)
 800123c:	795b      	ldrb	r3, [r3, #5]
 800123e:	099b      	lsrs	r3, r3, #6
 8001240:	b2db      	uxtb	r3, r3
 8001242:	b21b      	sxth	r3, r3
 8001244:	f003 0303 	and.w	r3, r3, #3
 8001248:	b21b      	sxth	r3, r3
 800124a:	4313      	orrs	r3, r2
 800124c:	b21b      	sxth	r3, r3
 800124e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
        uint8_t buttonC = !(data[5] & 0x02);
 8001252:	4b7c      	ldr	r3, [pc, #496]	@ (8001444 <main+0x4cc>)
 8001254:	795b      	ldrb	r3, [r3, #5]
 8001256:	f003 0302 	and.w	r3, r3, #2
 800125a:	2b00      	cmp	r3, #0
 800125c:	bf0c      	ite	eq
 800125e:	2301      	moveq	r3, #1
 8001260:	2300      	movne	r3, #0
 8001262:	b2db      	uxtb	r3, r3
 8001264:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
        uint8_t buttonZ = !(data[5] & 0x01);
 8001268:	4b76      	ldr	r3, [pc, #472]	@ (8001444 <main+0x4cc>)
 800126a:	795b      	ldrb	r3, [r3, #5]
 800126c:	f003 0301 	and.w	r3, r3, #1
 8001270:	2b00      	cmp	r3, #0
 8001272:	bf0c      	ite	eq
 8001274:	2301      	moveq	r3, #1
 8001276:	2300      	movne	r3, #0
 8001278:	b2db      	uxtb	r3, r3
 800127a:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e

        float  roll = atan(accelY/sqrt(accelX*accelX + accelZ *accelZ)) * 180.0 / M_PI;
 800127e:	f8b7 3112 	ldrh.w	r3, [r7, #274]	@ 0x112
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff f96e 	bl	8000564 <__aeabi_i2d>
 8001288:	4604      	mov	r4, r0
 800128a:	460d      	mov	r5, r1
 800128c:	f8b7 3114 	ldrh.w	r3, [r7, #276]	@ 0x114
 8001290:	f8b7 2114 	ldrh.w	r2, [r7, #276]	@ 0x114
 8001294:	fb03 f202 	mul.w	r2, r3, r2
 8001298:	f8b7 3110 	ldrh.w	r3, [r7, #272]	@ 0x110
 800129c:	f8b7 1110 	ldrh.w	r1, [r7, #272]	@ 0x110
 80012a0:	fb01 f303 	mul.w	r3, r1, r3
 80012a4:	4413      	add	r3, r2
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff f95c 	bl	8000564 <__aeabi_i2d>
 80012ac:	4602      	mov	r2, r0
 80012ae:	460b      	mov	r3, r1
 80012b0:	ec43 2b10 	vmov	d0, r2, r3
 80012b4:	f006 f834 	bl	8007320 <sqrt>
 80012b8:	ec53 2b10 	vmov	r2, r3, d0
 80012bc:	4620      	mov	r0, r4
 80012be:	4629      	mov	r1, r5
 80012c0:	f7ff fae4 	bl	800088c <__aeabi_ddiv>
 80012c4:	4602      	mov	r2, r0
 80012c6:	460b      	mov	r3, r1
 80012c8:	ec43 2b17 	vmov	d7, r2, r3
 80012cc:	eeb0 0a47 	vmov.f32	s0, s14
 80012d0:	eef0 0a67 	vmov.f32	s1, s15
 80012d4:	f006 f850 	bl	8007378 <atan>
 80012d8:	ec51 0b10 	vmov	r0, r1, d0
 80012dc:	f04f 0200 	mov.w	r2, #0
 80012e0:	4b5a      	ldr	r3, [pc, #360]	@ (800144c <main+0x4d4>)
 80012e2:	f7ff f9a9 	bl	8000638 <__aeabi_dmul>
 80012e6:	4602      	mov	r2, r0
 80012e8:	460b      	mov	r3, r1
 80012ea:	4610      	mov	r0, r2
 80012ec:	4619      	mov	r1, r3
 80012ee:	a34e      	add	r3, pc, #312	@ (adr r3, 8001428 <main+0x4b0>)
 80012f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f4:	f7ff faca 	bl	800088c <__aeabi_ddiv>
 80012f8:	4602      	mov	r2, r0
 80012fa:	460b      	mov	r3, r1
 80012fc:	4610      	mov	r0, r2
 80012fe:	4619      	mov	r1, r3
 8001300:	f7ff fc72 	bl	8000be8 <__aeabi_d2f>
 8001304:	4603      	mov	r3, r0
 8001306:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        float  pitch = atan(accelX/sqrt(accelY*accelY + accelZ *accelZ))* 180.0 / M_PI;
 800130a:	f8b7 3114 	ldrh.w	r3, [r7, #276]	@ 0x114
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff f928 	bl	8000564 <__aeabi_i2d>
 8001314:	4604      	mov	r4, r0
 8001316:	460d      	mov	r5, r1
 8001318:	f8b7 3112 	ldrh.w	r3, [r7, #274]	@ 0x112
 800131c:	f8b7 2112 	ldrh.w	r2, [r7, #274]	@ 0x112
 8001320:	fb03 f202 	mul.w	r2, r3, r2
 8001324:	f8b7 3110 	ldrh.w	r3, [r7, #272]	@ 0x110
 8001328:	f8b7 1110 	ldrh.w	r1, [r7, #272]	@ 0x110
 800132c:	fb01 f303 	mul.w	r3, r1, r3
 8001330:	4413      	add	r3, r2
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff f916 	bl	8000564 <__aeabi_i2d>
 8001338:	4602      	mov	r2, r0
 800133a:	460b      	mov	r3, r1
 800133c:	ec43 2b10 	vmov	d0, r2, r3
 8001340:	f005 ffee 	bl	8007320 <sqrt>
 8001344:	ec53 2b10 	vmov	r2, r3, d0
 8001348:	4620      	mov	r0, r4
 800134a:	4629      	mov	r1, r5
 800134c:	f7ff fa9e 	bl	800088c <__aeabi_ddiv>
 8001350:	4602      	mov	r2, r0
 8001352:	460b      	mov	r3, r1
 8001354:	ec43 2b17 	vmov	d7, r2, r3
 8001358:	eeb0 0a47 	vmov.f32	s0, s14
 800135c:	eef0 0a67 	vmov.f32	s1, s15
 8001360:	f006 f80a 	bl	8007378 <atan>
 8001364:	ec51 0b10 	vmov	r0, r1, d0
 8001368:	f04f 0200 	mov.w	r2, #0
 800136c:	4b37      	ldr	r3, [pc, #220]	@ (800144c <main+0x4d4>)
 800136e:	f7ff f963 	bl	8000638 <__aeabi_dmul>
 8001372:	4602      	mov	r2, r0
 8001374:	460b      	mov	r3, r1
 8001376:	4610      	mov	r0, r2
 8001378:	4619      	mov	r1, r3
 800137a:	a32b      	add	r3, pc, #172	@ (adr r3, 8001428 <main+0x4b0>)
 800137c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001380:	f7ff fa84 	bl	800088c <__aeabi_ddiv>
 8001384:	4602      	mov	r2, r0
 8001386:	460b      	mov	r3, r1
 8001388:	4610      	mov	r0, r2
 800138a:	4619      	mov	r1, r3
 800138c:	f7ff fc2c 	bl	8000be8 <__aeabi_d2f>
 8001390:	4603      	mov	r3, r0
 8001392:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

        // Affichage des données sur UART
        char dataMsg[120];
        snprintf(dataMsg, sizeof(dataMsg),
 8001396:	f897 8117 	ldrb.w	r8, [r7, #279]	@ 0x117
 800139a:	f897 6116 	ldrb.w	r6, [r7, #278]	@ 0x116
 800139e:	f8b7 3114 	ldrh.w	r3, [r7, #276]	@ 0x114
 80013a2:	617b      	str	r3, [r7, #20]
 80013a4:	f8b7 2112 	ldrh.w	r2, [r7, #274]	@ 0x112
 80013a8:	613a      	str	r2, [r7, #16]
 80013aa:	f8b7 1110 	ldrh.w	r1, [r7, #272]	@ 0x110
 80013ae:	60f9      	str	r1, [r7, #12]
 80013b0:	f897 010f 	ldrb.w	r0, [r7, #271]	@ 0x10f
 80013b4:	60b8      	str	r0, [r7, #8]
 80013b6:	f897 510e 	ldrb.w	r5, [r7, #270]	@ 0x10e
 80013ba:	607d      	str	r5, [r7, #4]
 80013bc:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 80013c0:	f7ff f8e2 	bl	8000588 <__aeabi_f2d>
 80013c4:	4604      	mov	r4, r0
 80013c6:	460d      	mov	r5, r1
 80013c8:	f8d7 0104 	ldr.w	r0, [r7, #260]	@ 0x104
 80013cc:	f7ff f8dc 	bl	8000588 <__aeabi_f2d>
 80013d0:	4602      	mov	r2, r0
 80013d2:	460b      	mov	r3, r1
 80013d4:	f107 001c 	add.w	r0, r7, #28
 80013d8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80013dc:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80013e0:	687d      	ldr	r5, [r7, #4]
 80013e2:	9505      	str	r5, [sp, #20]
 80013e4:	68bc      	ldr	r4, [r7, #8]
 80013e6:	9404      	str	r4, [sp, #16]
 80013e8:	68f9      	ldr	r1, [r7, #12]
 80013ea:	9103      	str	r1, [sp, #12]
 80013ec:	693a      	ldr	r2, [r7, #16]
 80013ee:	9202      	str	r2, [sp, #8]
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	9301      	str	r3, [sp, #4]
 80013f4:	9600      	str	r6, [sp, #0]
 80013f6:	4643      	mov	r3, r8
 80013f8:	4a15      	ldr	r2, [pc, #84]	@ (8001450 <main+0x4d8>)
 80013fa:	2178      	movs	r1, #120	@ 0x78
 80013fc:	f003 fe4e 	bl	800509c <sniprintf>
                 joystickX, joystickY,
                 accelX, accelY, accelZ,
                 buttonC, buttonZ,
				 roll, pitch);

        HAL_UART_Transmit(&huart2, (uint8_t*)dataMsg, strlen(dataMsg), HAL_MAX_DELAY);
 8001400:	f107 031c 	add.w	r3, r7, #28
 8001404:	4618      	mov	r0, r3
 8001406:	f7fe ff53 	bl	80002b0 <strlen>
 800140a:	4603      	mov	r3, r0
 800140c:	b29a      	uxth	r2, r3
 800140e:	f107 011c 	add.w	r1, r7, #28
 8001412:	f04f 33ff 	mov.w	r3, #4294967295
 8001416:	4807      	ldr	r0, [pc, #28]	@ (8001434 <main+0x4bc>)
 8001418:	f002 fd6a 	bl	8003ef0 <HAL_UART_Transmit>

        HAL_Delay(100);  // Attente avant de relire les données
 800141c:	2064      	movs	r0, #100	@ 0x64
 800141e:	f000 fb69 	bl	8001af4 <HAL_Delay>
    {
 8001422:	e69a      	b.n	800115a <main+0x1e2>
 8001424:	f3af 8000 	nop.w
 8001428:	54442d18 	.word	0x54442d18
 800142c:	400921fb 	.word	0x400921fb
 8001430:	08007a00 	.word	0x08007a00
 8001434:	20000258 	.word	0x20000258
 8001438:	08007a24 	.word	0x08007a24
 800143c:	20000204 	.word	0x20000204
 8001440:	08007a3c 	.word	0x08007a3c
 8001444:	200002a0 	.word	0x200002a0
 8001448:	08007a54 	.word	0x08007a54
 800144c:	40668000 	.word	0x40668000
 8001450:	08007888 	.word	0x08007888

08001454 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b094      	sub	sp, #80	@ 0x50
 8001458:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800145a:	f107 031c 	add.w	r3, r7, #28
 800145e:	2234      	movs	r2, #52	@ 0x34
 8001460:	2100      	movs	r1, #0
 8001462:	4618      	mov	r0, r3
 8001464:	f003 fe91 	bl	800518a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001468:	f107 0308 	add.w	r3, r7, #8
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
 8001476:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001478:	2300      	movs	r3, #0
 800147a:	607b      	str	r3, [r7, #4]
 800147c:	4b2a      	ldr	r3, [pc, #168]	@ (8001528 <SystemClock_Config+0xd4>)
 800147e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001480:	4a29      	ldr	r2, [pc, #164]	@ (8001528 <SystemClock_Config+0xd4>)
 8001482:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001486:	6413      	str	r3, [r2, #64]	@ 0x40
 8001488:	4b27      	ldr	r3, [pc, #156]	@ (8001528 <SystemClock_Config+0xd4>)
 800148a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800148c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001490:	607b      	str	r3, [r7, #4]
 8001492:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001494:	2300      	movs	r3, #0
 8001496:	603b      	str	r3, [r7, #0]
 8001498:	4b24      	ldr	r3, [pc, #144]	@ (800152c <SystemClock_Config+0xd8>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80014a0:	4a22      	ldr	r2, [pc, #136]	@ (800152c <SystemClock_Config+0xd8>)
 80014a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014a6:	6013      	str	r3, [r2, #0]
 80014a8:	4b20      	ldr	r3, [pc, #128]	@ (800152c <SystemClock_Config+0xd8>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80014b0:	603b      	str	r3, [r7, #0]
 80014b2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014b4:	2302      	movs	r3, #2
 80014b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014b8:	2301      	movs	r3, #1
 80014ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014bc:	2310      	movs	r3, #16
 80014be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014c0:	2302      	movs	r3, #2
 80014c2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014c4:	2300      	movs	r3, #0
 80014c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80014c8:	2310      	movs	r3, #16
 80014ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80014cc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80014d0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80014d2:	2304      	movs	r3, #4
 80014d4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80014d6:	2302      	movs	r3, #2
 80014d8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80014da:	2302      	movs	r3, #2
 80014dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014de:	f107 031c 	add.w	r3, r7, #28
 80014e2:	4618      	mov	r0, r3
 80014e4:	f002 fa16 	bl	8003914 <HAL_RCC_OscConfig>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80014ee:	f000 f89f 	bl	8001630 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014f2:	230f      	movs	r3, #15
 80014f4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014f6:	2302      	movs	r3, #2
 80014f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014fa:	2300      	movs	r3, #0
 80014fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001502:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001504:	2300      	movs	r3, #0
 8001506:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001508:	f107 0308 	add.w	r3, r7, #8
 800150c:	2102      	movs	r1, #2
 800150e:	4618      	mov	r0, r3
 8001510:	f001 feb6 	bl	8003280 <HAL_RCC_ClockConfig>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800151a:	f000 f889 	bl	8001630 <Error_Handler>
  }
}
 800151e:	bf00      	nop
 8001520:	3750      	adds	r7, #80	@ 0x50
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	40023800 	.word	0x40023800
 800152c:	40007000 	.word	0x40007000

08001530 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001534:	4b12      	ldr	r3, [pc, #72]	@ (8001580 <MX_I2C1_Init+0x50>)
 8001536:	4a13      	ldr	r2, [pc, #76]	@ (8001584 <MX_I2C1_Init+0x54>)
 8001538:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800153a:	4b11      	ldr	r3, [pc, #68]	@ (8001580 <MX_I2C1_Init+0x50>)
 800153c:	4a12      	ldr	r2, [pc, #72]	@ (8001588 <MX_I2C1_Init+0x58>)
 800153e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001540:	4b0f      	ldr	r3, [pc, #60]	@ (8001580 <MX_I2C1_Init+0x50>)
 8001542:	2200      	movs	r2, #0
 8001544:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001546:	4b0e      	ldr	r3, [pc, #56]	@ (8001580 <MX_I2C1_Init+0x50>)
 8001548:	2200      	movs	r2, #0
 800154a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800154c:	4b0c      	ldr	r3, [pc, #48]	@ (8001580 <MX_I2C1_Init+0x50>)
 800154e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001552:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001554:	4b0a      	ldr	r3, [pc, #40]	@ (8001580 <MX_I2C1_Init+0x50>)
 8001556:	2200      	movs	r2, #0
 8001558:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800155a:	4b09      	ldr	r3, [pc, #36]	@ (8001580 <MX_I2C1_Init+0x50>)
 800155c:	2200      	movs	r2, #0
 800155e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001560:	4b07      	ldr	r3, [pc, #28]	@ (8001580 <MX_I2C1_Init+0x50>)
 8001562:	2200      	movs	r2, #0
 8001564:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001566:	4b06      	ldr	r3, [pc, #24]	@ (8001580 <MX_I2C1_Init+0x50>)
 8001568:	2200      	movs	r2, #0
 800156a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800156c:	4804      	ldr	r0, [pc, #16]	@ (8001580 <MX_I2C1_Init+0x50>)
 800156e:	f000 fd5f 	bl	8002030 <HAL_I2C_Init>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001578:	f000 f85a 	bl	8001630 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800157c:	bf00      	nop
 800157e:	bd80      	pop	{r7, pc}
 8001580:	20000204 	.word	0x20000204
 8001584:	40005400 	.word	0x40005400
 8001588:	000186a0 	.word	0x000186a0

0800158c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001590:	4b11      	ldr	r3, [pc, #68]	@ (80015d8 <MX_USART2_UART_Init+0x4c>)
 8001592:	4a12      	ldr	r2, [pc, #72]	@ (80015dc <MX_USART2_UART_Init+0x50>)
 8001594:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001596:	4b10      	ldr	r3, [pc, #64]	@ (80015d8 <MX_USART2_UART_Init+0x4c>)
 8001598:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800159c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800159e:	4b0e      	ldr	r3, [pc, #56]	@ (80015d8 <MX_USART2_UART_Init+0x4c>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015a4:	4b0c      	ldr	r3, [pc, #48]	@ (80015d8 <MX_USART2_UART_Init+0x4c>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015aa:	4b0b      	ldr	r3, [pc, #44]	@ (80015d8 <MX_USART2_UART_Init+0x4c>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015b0:	4b09      	ldr	r3, [pc, #36]	@ (80015d8 <MX_USART2_UART_Init+0x4c>)
 80015b2:	220c      	movs	r2, #12
 80015b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015b6:	4b08      	ldr	r3, [pc, #32]	@ (80015d8 <MX_USART2_UART_Init+0x4c>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015bc:	4b06      	ldr	r3, [pc, #24]	@ (80015d8 <MX_USART2_UART_Init+0x4c>)
 80015be:	2200      	movs	r2, #0
 80015c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015c2:	4805      	ldr	r0, [pc, #20]	@ (80015d8 <MX_USART2_UART_Init+0x4c>)
 80015c4:	f002 fc44 	bl	8003e50 <HAL_UART_Init>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80015ce:	f000 f82f 	bl	8001630 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015d2:	bf00      	nop
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	20000258 	.word	0x20000258
 80015dc:	40004400 	.word	0x40004400

080015e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	607b      	str	r3, [r7, #4]
 80015ea:	4b10      	ldr	r3, [pc, #64]	@ (800162c <MX_GPIO_Init+0x4c>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ee:	4a0f      	ldr	r2, [pc, #60]	@ (800162c <MX_GPIO_Init+0x4c>)
 80015f0:	f043 0301 	orr.w	r3, r3, #1
 80015f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015f6:	4b0d      	ldr	r3, [pc, #52]	@ (800162c <MX_GPIO_Init+0x4c>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	607b      	str	r3, [r7, #4]
 8001600:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	603b      	str	r3, [r7, #0]
 8001606:	4b09      	ldr	r3, [pc, #36]	@ (800162c <MX_GPIO_Init+0x4c>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160a:	4a08      	ldr	r2, [pc, #32]	@ (800162c <MX_GPIO_Init+0x4c>)
 800160c:	f043 0302 	orr.w	r3, r3, #2
 8001610:	6313      	str	r3, [r2, #48]	@ 0x30
 8001612:	4b06      	ldr	r3, [pc, #24]	@ (800162c <MX_GPIO_Init+0x4c>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	603b      	str	r3, [r7, #0]
 800161c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800161e:	bf00      	nop
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	40023800 	.word	0x40023800

08001630 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001634:	b672      	cpsid	i
}
 8001636:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001638:	bf00      	nop
 800163a:	e7fd      	b.n	8001638 <Error_Handler+0x8>

0800163c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	607b      	str	r3, [r7, #4]
 8001646:	4b10      	ldr	r3, [pc, #64]	@ (8001688 <HAL_MspInit+0x4c>)
 8001648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800164a:	4a0f      	ldr	r2, [pc, #60]	@ (8001688 <HAL_MspInit+0x4c>)
 800164c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001650:	6453      	str	r3, [r2, #68]	@ 0x44
 8001652:	4b0d      	ldr	r3, [pc, #52]	@ (8001688 <HAL_MspInit+0x4c>)
 8001654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001656:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800165a:	607b      	str	r3, [r7, #4]
 800165c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	603b      	str	r3, [r7, #0]
 8001662:	4b09      	ldr	r3, [pc, #36]	@ (8001688 <HAL_MspInit+0x4c>)
 8001664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001666:	4a08      	ldr	r2, [pc, #32]	@ (8001688 <HAL_MspInit+0x4c>)
 8001668:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800166c:	6413      	str	r3, [r2, #64]	@ 0x40
 800166e:	4b06      	ldr	r3, [pc, #24]	@ (8001688 <HAL_MspInit+0x4c>)
 8001670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001672:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001676:	603b      	str	r3, [r7, #0]
 8001678:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800167a:	2007      	movs	r0, #7
 800167c:	f000 fb10 	bl	8001ca0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001680:	bf00      	nop
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	40023800 	.word	0x40023800

0800168c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b08a      	sub	sp, #40	@ 0x28
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001694:	f107 0314 	add.w	r3, r7, #20
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	605a      	str	r2, [r3, #4]
 800169e:	609a      	str	r2, [r3, #8]
 80016a0:	60da      	str	r2, [r3, #12]
 80016a2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a19      	ldr	r2, [pc, #100]	@ (8001710 <HAL_I2C_MspInit+0x84>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d12c      	bne.n	8001708 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	613b      	str	r3, [r7, #16]
 80016b2:	4b18      	ldr	r3, [pc, #96]	@ (8001714 <HAL_I2C_MspInit+0x88>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b6:	4a17      	ldr	r2, [pc, #92]	@ (8001714 <HAL_I2C_MspInit+0x88>)
 80016b8:	f043 0302 	orr.w	r3, r3, #2
 80016bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80016be:	4b15      	ldr	r3, [pc, #84]	@ (8001714 <HAL_I2C_MspInit+0x88>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	613b      	str	r3, [r7, #16]
 80016c8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80016ca:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80016ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016d0:	2312      	movs	r3, #18
 80016d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d4:	2300      	movs	r3, #0
 80016d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d8:	2303      	movs	r3, #3
 80016da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016dc:	2304      	movs	r3, #4
 80016de:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e0:	f107 0314 	add.w	r3, r7, #20
 80016e4:	4619      	mov	r1, r3
 80016e6:	480c      	ldr	r0, [pc, #48]	@ (8001718 <HAL_I2C_MspInit+0x8c>)
 80016e8:	f000 fb0e 	bl	8001d08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016ec:	2300      	movs	r3, #0
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	4b08      	ldr	r3, [pc, #32]	@ (8001714 <HAL_I2C_MspInit+0x88>)
 80016f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f4:	4a07      	ldr	r2, [pc, #28]	@ (8001714 <HAL_I2C_MspInit+0x88>)
 80016f6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80016fc:	4b05      	ldr	r3, [pc, #20]	@ (8001714 <HAL_I2C_MspInit+0x88>)
 80016fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001700:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001704:	60fb      	str	r3, [r7, #12]
 8001706:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001708:	bf00      	nop
 800170a:	3728      	adds	r7, #40	@ 0x28
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	40005400 	.word	0x40005400
 8001714:	40023800 	.word	0x40023800
 8001718:	40020400 	.word	0x40020400

0800171c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b08a      	sub	sp, #40	@ 0x28
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001724:	f107 0314 	add.w	r3, r7, #20
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	605a      	str	r2, [r3, #4]
 800172e:	609a      	str	r2, [r3, #8]
 8001730:	60da      	str	r2, [r3, #12]
 8001732:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a19      	ldr	r2, [pc, #100]	@ (80017a0 <HAL_UART_MspInit+0x84>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d12b      	bne.n	8001796 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	613b      	str	r3, [r7, #16]
 8001742:	4b18      	ldr	r3, [pc, #96]	@ (80017a4 <HAL_UART_MspInit+0x88>)
 8001744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001746:	4a17      	ldr	r2, [pc, #92]	@ (80017a4 <HAL_UART_MspInit+0x88>)
 8001748:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800174c:	6413      	str	r3, [r2, #64]	@ 0x40
 800174e:	4b15      	ldr	r3, [pc, #84]	@ (80017a4 <HAL_UART_MspInit+0x88>)
 8001750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001752:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001756:	613b      	str	r3, [r7, #16]
 8001758:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	60fb      	str	r3, [r7, #12]
 800175e:	4b11      	ldr	r3, [pc, #68]	@ (80017a4 <HAL_UART_MspInit+0x88>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001762:	4a10      	ldr	r2, [pc, #64]	@ (80017a4 <HAL_UART_MspInit+0x88>)
 8001764:	f043 0301 	orr.w	r3, r3, #1
 8001768:	6313      	str	r3, [r2, #48]	@ 0x30
 800176a:	4b0e      	ldr	r3, [pc, #56]	@ (80017a4 <HAL_UART_MspInit+0x88>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	60fb      	str	r3, [r7, #12]
 8001774:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001776:	230c      	movs	r3, #12
 8001778:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177a:	2302      	movs	r3, #2
 800177c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177e:	2300      	movs	r3, #0
 8001780:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001782:	2303      	movs	r3, #3
 8001784:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001786:	2307      	movs	r3, #7
 8001788:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800178a:	f107 0314 	add.w	r3, r7, #20
 800178e:	4619      	mov	r1, r3
 8001790:	4805      	ldr	r0, [pc, #20]	@ (80017a8 <HAL_UART_MspInit+0x8c>)
 8001792:	f000 fab9 	bl	8001d08 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001796:	bf00      	nop
 8001798:	3728      	adds	r7, #40	@ 0x28
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	40004400 	.word	0x40004400
 80017a4:	40023800 	.word	0x40023800
 80017a8:	40020000 	.word	0x40020000

080017ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017b0:	bf00      	nop
 80017b2:	e7fd      	b.n	80017b0 <NMI_Handler+0x4>

080017b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017b8:	bf00      	nop
 80017ba:	e7fd      	b.n	80017b8 <HardFault_Handler+0x4>

080017bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017c0:	bf00      	nop
 80017c2:	e7fd      	b.n	80017c0 <MemManage_Handler+0x4>

080017c4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017c8:	bf00      	nop
 80017ca:	e7fd      	b.n	80017c8 <BusFault_Handler+0x4>

080017cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017d0:	bf00      	nop
 80017d2:	e7fd      	b.n	80017d0 <UsageFault_Handler+0x4>

080017d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017d8:	bf00      	nop
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr

080017e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017e2:	b480      	push	{r7}
 80017e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017f4:	bf00      	nop
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr

080017fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017fe:	b580      	push	{r7, lr}
 8001800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001802:	f000 f957 	bl	8001ab4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}

0800180a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800180a:	b480      	push	{r7}
 800180c:	af00      	add	r7, sp, #0
  return 1;
 800180e:	2301      	movs	r3, #1
}
 8001810:	4618      	mov	r0, r3
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr

0800181a <_kill>:

int _kill(int pid, int sig)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	b082      	sub	sp, #8
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
 8001822:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001824:	f003 fd04 	bl	8005230 <__errno>
 8001828:	4603      	mov	r3, r0
 800182a:	2216      	movs	r2, #22
 800182c:	601a      	str	r2, [r3, #0]
  return -1;
 800182e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001832:	4618      	mov	r0, r3
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <_exit>:

void _exit (int status)
{
 800183a:	b580      	push	{r7, lr}
 800183c:	b082      	sub	sp, #8
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001842:	f04f 31ff 	mov.w	r1, #4294967295
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f7ff ffe7 	bl	800181a <_kill>
  while (1) {}    /* Make sure we hang here */
 800184c:	bf00      	nop
 800184e:	e7fd      	b.n	800184c <_exit+0x12>

08001850 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b086      	sub	sp, #24
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800185c:	2300      	movs	r3, #0
 800185e:	617b      	str	r3, [r7, #20]
 8001860:	e00a      	b.n	8001878 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001862:	f3af 8000 	nop.w
 8001866:	4601      	mov	r1, r0
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	1c5a      	adds	r2, r3, #1
 800186c:	60ba      	str	r2, [r7, #8]
 800186e:	b2ca      	uxtb	r2, r1
 8001870:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	3301      	adds	r3, #1
 8001876:	617b      	str	r3, [r7, #20]
 8001878:	697a      	ldr	r2, [r7, #20]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	429a      	cmp	r2, r3
 800187e:	dbf0      	blt.n	8001862 <_read+0x12>
  }

  return len;
 8001880:	687b      	ldr	r3, [r7, #4]
}
 8001882:	4618      	mov	r0, r3
 8001884:	3718      	adds	r7, #24
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}

0800188a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800188a:	b580      	push	{r7, lr}
 800188c:	b086      	sub	sp, #24
 800188e:	af00      	add	r7, sp, #0
 8001890:	60f8      	str	r0, [r7, #12]
 8001892:	60b9      	str	r1, [r7, #8]
 8001894:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001896:	2300      	movs	r3, #0
 8001898:	617b      	str	r3, [r7, #20]
 800189a:	e009      	b.n	80018b0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	1c5a      	adds	r2, r3, #1
 80018a0:	60ba      	str	r2, [r7, #8]
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	3301      	adds	r3, #1
 80018ae:	617b      	str	r3, [r7, #20]
 80018b0:	697a      	ldr	r2, [r7, #20]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	dbf1      	blt.n	800189c <_write+0x12>
  }
  return len;
 80018b8:	687b      	ldr	r3, [r7, #4]
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3718      	adds	r7, #24
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <_close>:

int _close(int file)
{
 80018c2:	b480      	push	{r7}
 80018c4:	b083      	sub	sp, #12
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr

080018da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018da:	b480      	push	{r7}
 80018dc:	b083      	sub	sp, #12
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
 80018e2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018ea:	605a      	str	r2, [r3, #4]
  return 0;
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr

080018fa <_isatty>:

int _isatty(int file)
{
 80018fa:	b480      	push	{r7}
 80018fc:	b083      	sub	sp, #12
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001902:	2301      	movs	r3, #1
}
 8001904:	4618      	mov	r0, r3
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001910:	b480      	push	{r7}
 8001912:	b085      	sub	sp, #20
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3714      	adds	r7, #20
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
	...

0800192c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b086      	sub	sp, #24
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001934:	4a14      	ldr	r2, [pc, #80]	@ (8001988 <_sbrk+0x5c>)
 8001936:	4b15      	ldr	r3, [pc, #84]	@ (800198c <_sbrk+0x60>)
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001940:	4b13      	ldr	r3, [pc, #76]	@ (8001990 <_sbrk+0x64>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d102      	bne.n	800194e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001948:	4b11      	ldr	r3, [pc, #68]	@ (8001990 <_sbrk+0x64>)
 800194a:	4a12      	ldr	r2, [pc, #72]	@ (8001994 <_sbrk+0x68>)
 800194c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800194e:	4b10      	ldr	r3, [pc, #64]	@ (8001990 <_sbrk+0x64>)
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4413      	add	r3, r2
 8001956:	693a      	ldr	r2, [r7, #16]
 8001958:	429a      	cmp	r2, r3
 800195a:	d207      	bcs.n	800196c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800195c:	f003 fc68 	bl	8005230 <__errno>
 8001960:	4603      	mov	r3, r0
 8001962:	220c      	movs	r2, #12
 8001964:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001966:	f04f 33ff 	mov.w	r3, #4294967295
 800196a:	e009      	b.n	8001980 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800196c:	4b08      	ldr	r3, [pc, #32]	@ (8001990 <_sbrk+0x64>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001972:	4b07      	ldr	r3, [pc, #28]	@ (8001990 <_sbrk+0x64>)
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4413      	add	r3, r2
 800197a:	4a05      	ldr	r2, [pc, #20]	@ (8001990 <_sbrk+0x64>)
 800197c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800197e:	68fb      	ldr	r3, [r7, #12]
}
 8001980:	4618      	mov	r0, r3
 8001982:	3718      	adds	r7, #24
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	20020000 	.word	0x20020000
 800198c:	00000400 	.word	0x00000400
 8001990:	200002a8 	.word	0x200002a8
 8001994:	20000400 	.word	0x20000400

08001998 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800199c:	4b06      	ldr	r3, [pc, #24]	@ (80019b8 <SystemInit+0x20>)
 800199e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019a2:	4a05      	ldr	r2, [pc, #20]	@ (80019b8 <SystemInit+0x20>)
 80019a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019ac:	bf00      	nop
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	e000ed00 	.word	0xe000ed00

080019bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80019bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019f4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80019c0:	f7ff ffea 	bl	8001998 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019c4:	480c      	ldr	r0, [pc, #48]	@ (80019f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019c6:	490d      	ldr	r1, [pc, #52]	@ (80019fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001a00 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019cc:	e002      	b.n	80019d4 <LoopCopyDataInit>

080019ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019d2:	3304      	adds	r3, #4

080019d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019d8:	d3f9      	bcc.n	80019ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019da:	4a0a      	ldr	r2, [pc, #40]	@ (8001a04 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019dc:	4c0a      	ldr	r4, [pc, #40]	@ (8001a08 <LoopFillZerobss+0x22>)
  movs r3, #0
 80019de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019e0:	e001      	b.n	80019e6 <LoopFillZerobss>

080019e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019e4:	3204      	adds	r2, #4

080019e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019e8:	d3fb      	bcc.n	80019e2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80019ea:	f003 fc27 	bl	800523c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019ee:	f7ff fac3 	bl	8000f78 <main>
  bx  lr    
 80019f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019fc:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001a00:	08007e48 	.word	0x08007e48
  ldr r2, =_sbss
 8001a04:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001a08:	200003fc 	.word	0x200003fc

08001a0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a0c:	e7fe      	b.n	8001a0c <ADC_IRQHandler>
	...

08001a10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a14:	4b0e      	ldr	r3, [pc, #56]	@ (8001a50 <HAL_Init+0x40>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a0d      	ldr	r2, [pc, #52]	@ (8001a50 <HAL_Init+0x40>)
 8001a1a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a20:	4b0b      	ldr	r3, [pc, #44]	@ (8001a50 <HAL_Init+0x40>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a0a      	ldr	r2, [pc, #40]	@ (8001a50 <HAL_Init+0x40>)
 8001a26:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a2c:	4b08      	ldr	r3, [pc, #32]	@ (8001a50 <HAL_Init+0x40>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a07      	ldr	r2, [pc, #28]	@ (8001a50 <HAL_Init+0x40>)
 8001a32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a38:	2003      	movs	r0, #3
 8001a3a:	f000 f931 	bl	8001ca0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a3e:	2000      	movs	r0, #0
 8001a40:	f000 f808 	bl	8001a54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a44:	f7ff fdfa 	bl	800163c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	40023c00 	.word	0x40023c00

08001a54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a5c:	4b12      	ldr	r3, [pc, #72]	@ (8001aa8 <HAL_InitTick+0x54>)
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	4b12      	ldr	r3, [pc, #72]	@ (8001aac <HAL_InitTick+0x58>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	4619      	mov	r1, r3
 8001a66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a72:	4618      	mov	r0, r3
 8001a74:	f000 f93b 	bl	8001cee <HAL_SYSTICK_Config>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e00e      	b.n	8001aa0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2b0f      	cmp	r3, #15
 8001a86:	d80a      	bhi.n	8001a9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a88:	2200      	movs	r2, #0
 8001a8a:	6879      	ldr	r1, [r7, #4]
 8001a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a90:	f000 f911 	bl	8001cb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a94:	4a06      	ldr	r2, [pc, #24]	@ (8001ab0 <HAL_InitTick+0x5c>)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	e000      	b.n	8001aa0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3708      	adds	r7, #8
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	20000004 	.word	0x20000004
 8001aac:	2000000c 	.word	0x2000000c
 8001ab0:	20000008 	.word	0x20000008

08001ab4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ab8:	4b06      	ldr	r3, [pc, #24]	@ (8001ad4 <HAL_IncTick+0x20>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	461a      	mov	r2, r3
 8001abe:	4b06      	ldr	r3, [pc, #24]	@ (8001ad8 <HAL_IncTick+0x24>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	4a04      	ldr	r2, [pc, #16]	@ (8001ad8 <HAL_IncTick+0x24>)
 8001ac6:	6013      	str	r3, [r2, #0]
}
 8001ac8:	bf00      	nop
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	2000000c 	.word	0x2000000c
 8001ad8:	200002ac 	.word	0x200002ac

08001adc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  return uwTick;
 8001ae0:	4b03      	ldr	r3, [pc, #12]	@ (8001af0 <HAL_GetTick+0x14>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	200002ac 	.word	0x200002ac

08001af4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001afc:	f7ff ffee 	bl	8001adc <HAL_GetTick>
 8001b00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b0c:	d005      	beq.n	8001b1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b0e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b38 <HAL_Delay+0x44>)
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	461a      	mov	r2, r3
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	4413      	add	r3, r2
 8001b18:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b1a:	bf00      	nop
 8001b1c:	f7ff ffde 	bl	8001adc <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	68fa      	ldr	r2, [r7, #12]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d8f7      	bhi.n	8001b1c <HAL_Delay+0x28>
  {
  }
}
 8001b2c:	bf00      	nop
 8001b2e:	bf00      	nop
 8001b30:	3710      	adds	r7, #16
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	2000000c 	.word	0x2000000c

08001b3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f003 0307 	and.w	r3, r3, #7
 8001b4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b80 <__NVIC_SetPriorityGrouping+0x44>)
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b52:	68ba      	ldr	r2, [r7, #8]
 8001b54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b58:	4013      	ands	r3, r2
 8001b5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b6e:	4a04      	ldr	r2, [pc, #16]	@ (8001b80 <__NVIC_SetPriorityGrouping+0x44>)
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	60d3      	str	r3, [r2, #12]
}
 8001b74:	bf00      	nop
 8001b76:	3714      	adds	r7, #20
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr
 8001b80:	e000ed00 	.word	0xe000ed00

08001b84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b88:	4b04      	ldr	r3, [pc, #16]	@ (8001b9c <__NVIC_GetPriorityGrouping+0x18>)
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	0a1b      	lsrs	r3, r3, #8
 8001b8e:	f003 0307 	and.w	r3, r3, #7
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr
 8001b9c:	e000ed00 	.word	0xe000ed00

08001ba0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	6039      	str	r1, [r7, #0]
 8001baa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	db0a      	blt.n	8001bca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	b2da      	uxtb	r2, r3
 8001bb8:	490c      	ldr	r1, [pc, #48]	@ (8001bec <__NVIC_SetPriority+0x4c>)
 8001bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bbe:	0112      	lsls	r2, r2, #4
 8001bc0:	b2d2      	uxtb	r2, r2
 8001bc2:	440b      	add	r3, r1
 8001bc4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bc8:	e00a      	b.n	8001be0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	b2da      	uxtb	r2, r3
 8001bce:	4908      	ldr	r1, [pc, #32]	@ (8001bf0 <__NVIC_SetPriority+0x50>)
 8001bd0:	79fb      	ldrb	r3, [r7, #7]
 8001bd2:	f003 030f 	and.w	r3, r3, #15
 8001bd6:	3b04      	subs	r3, #4
 8001bd8:	0112      	lsls	r2, r2, #4
 8001bda:	b2d2      	uxtb	r2, r2
 8001bdc:	440b      	add	r3, r1
 8001bde:	761a      	strb	r2, [r3, #24]
}
 8001be0:	bf00      	nop
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr
 8001bec:	e000e100 	.word	0xe000e100
 8001bf0:	e000ed00 	.word	0xe000ed00

08001bf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b089      	sub	sp, #36	@ 0x24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	60f8      	str	r0, [r7, #12]
 8001bfc:	60b9      	str	r1, [r7, #8]
 8001bfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	f003 0307 	and.w	r3, r3, #7
 8001c06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	f1c3 0307 	rsb	r3, r3, #7
 8001c0e:	2b04      	cmp	r3, #4
 8001c10:	bf28      	it	cs
 8001c12:	2304      	movcs	r3, #4
 8001c14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	3304      	adds	r3, #4
 8001c1a:	2b06      	cmp	r3, #6
 8001c1c:	d902      	bls.n	8001c24 <NVIC_EncodePriority+0x30>
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	3b03      	subs	r3, #3
 8001c22:	e000      	b.n	8001c26 <NVIC_EncodePriority+0x32>
 8001c24:	2300      	movs	r3, #0
 8001c26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c28:	f04f 32ff 	mov.w	r2, #4294967295
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c32:	43da      	mvns	r2, r3
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	401a      	ands	r2, r3
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	fa01 f303 	lsl.w	r3, r1, r3
 8001c46:	43d9      	mvns	r1, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c4c:	4313      	orrs	r3, r2
         );
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3724      	adds	r7, #36	@ 0x24
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
	...

08001c5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	3b01      	subs	r3, #1
 8001c68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c6c:	d301      	bcc.n	8001c72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e00f      	b.n	8001c92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c72:	4a0a      	ldr	r2, [pc, #40]	@ (8001c9c <SysTick_Config+0x40>)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	3b01      	subs	r3, #1
 8001c78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c7a:	210f      	movs	r1, #15
 8001c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c80:	f7ff ff8e 	bl	8001ba0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c84:	4b05      	ldr	r3, [pc, #20]	@ (8001c9c <SysTick_Config+0x40>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c8a:	4b04      	ldr	r3, [pc, #16]	@ (8001c9c <SysTick_Config+0x40>)
 8001c8c:	2207      	movs	r2, #7
 8001c8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	e000e010 	.word	0xe000e010

08001ca0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f7ff ff47 	bl	8001b3c <__NVIC_SetPriorityGrouping>
}
 8001cae:	bf00      	nop
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b086      	sub	sp, #24
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	60b9      	str	r1, [r7, #8]
 8001cc0:	607a      	str	r2, [r7, #4]
 8001cc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cc8:	f7ff ff5c 	bl	8001b84 <__NVIC_GetPriorityGrouping>
 8001ccc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	68b9      	ldr	r1, [r7, #8]
 8001cd2:	6978      	ldr	r0, [r7, #20]
 8001cd4:	f7ff ff8e 	bl	8001bf4 <NVIC_EncodePriority>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cde:	4611      	mov	r1, r2
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff ff5d 	bl	8001ba0 <__NVIC_SetPriority>
}
 8001ce6:	bf00      	nop
 8001ce8:	3718      	adds	r7, #24
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b082      	sub	sp, #8
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f7ff ffb0 	bl	8001c5c <SysTick_Config>
 8001cfc:	4603      	mov	r3, r0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
	...

08001d08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b089      	sub	sp, #36	@ 0x24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d12:	2300      	movs	r3, #0
 8001d14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d16:	2300      	movs	r3, #0
 8001d18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d1e:	2300      	movs	r3, #0
 8001d20:	61fb      	str	r3, [r7, #28]
 8001d22:	e165      	b.n	8001ff0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d24:	2201      	movs	r2, #1
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	697a      	ldr	r2, [r7, #20]
 8001d34:	4013      	ands	r3, r2
 8001d36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d38:	693a      	ldr	r2, [r7, #16]
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	f040 8154 	bne.w	8001fea <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f003 0303 	and.w	r3, r3, #3
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d005      	beq.n	8001d5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d130      	bne.n	8001dbc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	2203      	movs	r2, #3
 8001d66:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6a:	43db      	mvns	r3, r3
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	4013      	ands	r3, r2
 8001d70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	68da      	ldr	r2, [r3, #12]
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d90:	2201      	movs	r2, #1
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	43db      	mvns	r3, r3
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	091b      	lsrs	r3, r3, #4
 8001da6:	f003 0201 	and.w	r2, r3, #1
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f003 0303 	and.w	r3, r3, #3
 8001dc4:	2b03      	cmp	r3, #3
 8001dc6:	d017      	beq.n	8001df8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	2203      	movs	r2, #3
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	689a      	ldr	r2, [r3, #8]
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f003 0303 	and.w	r3, r3, #3
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d123      	bne.n	8001e4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	08da      	lsrs	r2, r3, #3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	3208      	adds	r2, #8
 8001e0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	f003 0307 	and.w	r3, r3, #7
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	220f      	movs	r2, #15
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	43db      	mvns	r3, r3
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	4013      	ands	r3, r2
 8001e26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	691a      	ldr	r2, [r3, #16]
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	f003 0307 	and.w	r3, r3, #7
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	08da      	lsrs	r2, r3, #3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	3208      	adds	r2, #8
 8001e46:	69b9      	ldr	r1, [r7, #24]
 8001e48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	2203      	movs	r2, #3
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	4013      	ands	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f003 0203 	and.w	r2, r3, #3
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	f000 80ae 	beq.w	8001fea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e8e:	2300      	movs	r3, #0
 8001e90:	60fb      	str	r3, [r7, #12]
 8001e92:	4b5d      	ldr	r3, [pc, #372]	@ (8002008 <HAL_GPIO_Init+0x300>)
 8001e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e96:	4a5c      	ldr	r2, [pc, #368]	@ (8002008 <HAL_GPIO_Init+0x300>)
 8001e98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e9e:	4b5a      	ldr	r3, [pc, #360]	@ (8002008 <HAL_GPIO_Init+0x300>)
 8001ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ea2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ea6:	60fb      	str	r3, [r7, #12]
 8001ea8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001eaa:	4a58      	ldr	r2, [pc, #352]	@ (800200c <HAL_GPIO_Init+0x304>)
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	089b      	lsrs	r3, r3, #2
 8001eb0:	3302      	adds	r3, #2
 8001eb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	f003 0303 	and.w	r3, r3, #3
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	220f      	movs	r2, #15
 8001ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec6:	43db      	mvns	r3, r3
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	4013      	ands	r3, r2
 8001ecc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a4f      	ldr	r2, [pc, #316]	@ (8002010 <HAL_GPIO_Init+0x308>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d025      	beq.n	8001f22 <HAL_GPIO_Init+0x21a>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a4e      	ldr	r2, [pc, #312]	@ (8002014 <HAL_GPIO_Init+0x30c>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d01f      	beq.n	8001f1e <HAL_GPIO_Init+0x216>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a4d      	ldr	r2, [pc, #308]	@ (8002018 <HAL_GPIO_Init+0x310>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d019      	beq.n	8001f1a <HAL_GPIO_Init+0x212>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a4c      	ldr	r2, [pc, #304]	@ (800201c <HAL_GPIO_Init+0x314>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d013      	beq.n	8001f16 <HAL_GPIO_Init+0x20e>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a4b      	ldr	r2, [pc, #300]	@ (8002020 <HAL_GPIO_Init+0x318>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d00d      	beq.n	8001f12 <HAL_GPIO_Init+0x20a>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a4a      	ldr	r2, [pc, #296]	@ (8002024 <HAL_GPIO_Init+0x31c>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d007      	beq.n	8001f0e <HAL_GPIO_Init+0x206>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a49      	ldr	r2, [pc, #292]	@ (8002028 <HAL_GPIO_Init+0x320>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d101      	bne.n	8001f0a <HAL_GPIO_Init+0x202>
 8001f06:	2306      	movs	r3, #6
 8001f08:	e00c      	b.n	8001f24 <HAL_GPIO_Init+0x21c>
 8001f0a:	2307      	movs	r3, #7
 8001f0c:	e00a      	b.n	8001f24 <HAL_GPIO_Init+0x21c>
 8001f0e:	2305      	movs	r3, #5
 8001f10:	e008      	b.n	8001f24 <HAL_GPIO_Init+0x21c>
 8001f12:	2304      	movs	r3, #4
 8001f14:	e006      	b.n	8001f24 <HAL_GPIO_Init+0x21c>
 8001f16:	2303      	movs	r3, #3
 8001f18:	e004      	b.n	8001f24 <HAL_GPIO_Init+0x21c>
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	e002      	b.n	8001f24 <HAL_GPIO_Init+0x21c>
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e000      	b.n	8001f24 <HAL_GPIO_Init+0x21c>
 8001f22:	2300      	movs	r3, #0
 8001f24:	69fa      	ldr	r2, [r7, #28]
 8001f26:	f002 0203 	and.w	r2, r2, #3
 8001f2a:	0092      	lsls	r2, r2, #2
 8001f2c:	4093      	lsls	r3, r2
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f34:	4935      	ldr	r1, [pc, #212]	@ (800200c <HAL_GPIO_Init+0x304>)
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	089b      	lsrs	r3, r3, #2
 8001f3a:	3302      	adds	r3, #2
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f42:	4b3a      	ldr	r3, [pc, #232]	@ (800202c <HAL_GPIO_Init+0x324>)
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	43db      	mvns	r3, r3
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d003      	beq.n	8001f66 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f66:	4a31      	ldr	r2, [pc, #196]	@ (800202c <HAL_GPIO_Init+0x324>)
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f6c:	4b2f      	ldr	r3, [pc, #188]	@ (800202c <HAL_GPIO_Init+0x324>)
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	43db      	mvns	r3, r3
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d003      	beq.n	8001f90 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f90:	4a26      	ldr	r2, [pc, #152]	@ (800202c <HAL_GPIO_Init+0x324>)
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f96:	4b25      	ldr	r3, [pc, #148]	@ (800202c <HAL_GPIO_Init+0x324>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	43db      	mvns	r3, r3
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d003      	beq.n	8001fba <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001fb2:	69ba      	ldr	r2, [r7, #24]
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fba:	4a1c      	ldr	r2, [pc, #112]	@ (800202c <HAL_GPIO_Init+0x324>)
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fc0:	4b1a      	ldr	r3, [pc, #104]	@ (800202c <HAL_GPIO_Init+0x324>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d003      	beq.n	8001fe4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fe4:	4a11      	ldr	r2, [pc, #68]	@ (800202c <HAL_GPIO_Init+0x324>)
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	3301      	adds	r3, #1
 8001fee:	61fb      	str	r3, [r7, #28]
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	2b0f      	cmp	r3, #15
 8001ff4:	f67f ae96 	bls.w	8001d24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ff8:	bf00      	nop
 8001ffa:	bf00      	nop
 8001ffc:	3724      	adds	r7, #36	@ 0x24
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	40023800 	.word	0x40023800
 800200c:	40013800 	.word	0x40013800
 8002010:	40020000 	.word	0x40020000
 8002014:	40020400 	.word	0x40020400
 8002018:	40020800 	.word	0x40020800
 800201c:	40020c00 	.word	0x40020c00
 8002020:	40021000 	.word	0x40021000
 8002024:	40021400 	.word	0x40021400
 8002028:	40021800 	.word	0x40021800
 800202c:	40013c00 	.word	0x40013c00

08002030 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d101      	bne.n	8002042 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e12b      	b.n	800229a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2b00      	cmp	r3, #0
 800204c:	d106      	bne.n	800205c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f7ff fb18 	bl	800168c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2224      	movs	r2, #36	@ 0x24
 8002060:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f022 0201 	bic.w	r2, r2, #1
 8002072:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002082:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002092:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002094:	f001 f9e6 	bl	8003464 <HAL_RCC_GetPCLK1Freq>
 8002098:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	4a81      	ldr	r2, [pc, #516]	@ (80022a4 <HAL_I2C_Init+0x274>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d807      	bhi.n	80020b4 <HAL_I2C_Init+0x84>
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	4a80      	ldr	r2, [pc, #512]	@ (80022a8 <HAL_I2C_Init+0x278>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	bf94      	ite	ls
 80020ac:	2301      	movls	r3, #1
 80020ae:	2300      	movhi	r3, #0
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	e006      	b.n	80020c2 <HAL_I2C_Init+0x92>
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	4a7d      	ldr	r2, [pc, #500]	@ (80022ac <HAL_I2C_Init+0x27c>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	bf94      	ite	ls
 80020bc:	2301      	movls	r3, #1
 80020be:	2300      	movhi	r3, #0
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e0e7      	b.n	800229a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	4a78      	ldr	r2, [pc, #480]	@ (80022b0 <HAL_I2C_Init+0x280>)
 80020ce:	fba2 2303 	umull	r2, r3, r2, r3
 80020d2:	0c9b      	lsrs	r3, r3, #18
 80020d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	68ba      	ldr	r2, [r7, #8]
 80020e6:	430a      	orrs	r2, r1
 80020e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	6a1b      	ldr	r3, [r3, #32]
 80020f0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	4a6a      	ldr	r2, [pc, #424]	@ (80022a4 <HAL_I2C_Init+0x274>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d802      	bhi.n	8002104 <HAL_I2C_Init+0xd4>
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	3301      	adds	r3, #1
 8002102:	e009      	b.n	8002118 <HAL_I2C_Init+0xe8>
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800210a:	fb02 f303 	mul.w	r3, r2, r3
 800210e:	4a69      	ldr	r2, [pc, #420]	@ (80022b4 <HAL_I2C_Init+0x284>)
 8002110:	fba2 2303 	umull	r2, r3, r2, r3
 8002114:	099b      	lsrs	r3, r3, #6
 8002116:	3301      	adds	r3, #1
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	6812      	ldr	r2, [r2, #0]
 800211c:	430b      	orrs	r3, r1
 800211e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	69db      	ldr	r3, [r3, #28]
 8002126:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800212a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	495c      	ldr	r1, [pc, #368]	@ (80022a4 <HAL_I2C_Init+0x274>)
 8002134:	428b      	cmp	r3, r1
 8002136:	d819      	bhi.n	800216c <HAL_I2C_Init+0x13c>
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	1e59      	subs	r1, r3, #1
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	fbb1 f3f3 	udiv	r3, r1, r3
 8002146:	1c59      	adds	r1, r3, #1
 8002148:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800214c:	400b      	ands	r3, r1
 800214e:	2b00      	cmp	r3, #0
 8002150:	d00a      	beq.n	8002168 <HAL_I2C_Init+0x138>
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	1e59      	subs	r1, r3, #1
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002160:	3301      	adds	r3, #1
 8002162:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002166:	e051      	b.n	800220c <HAL_I2C_Init+0x1dc>
 8002168:	2304      	movs	r3, #4
 800216a:	e04f      	b.n	800220c <HAL_I2C_Init+0x1dc>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d111      	bne.n	8002198 <HAL_I2C_Init+0x168>
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	1e58      	subs	r0, r3, #1
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6859      	ldr	r1, [r3, #4]
 800217c:	460b      	mov	r3, r1
 800217e:	005b      	lsls	r3, r3, #1
 8002180:	440b      	add	r3, r1
 8002182:	fbb0 f3f3 	udiv	r3, r0, r3
 8002186:	3301      	adds	r3, #1
 8002188:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800218c:	2b00      	cmp	r3, #0
 800218e:	bf0c      	ite	eq
 8002190:	2301      	moveq	r3, #1
 8002192:	2300      	movne	r3, #0
 8002194:	b2db      	uxtb	r3, r3
 8002196:	e012      	b.n	80021be <HAL_I2C_Init+0x18e>
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	1e58      	subs	r0, r3, #1
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6859      	ldr	r1, [r3, #4]
 80021a0:	460b      	mov	r3, r1
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	440b      	add	r3, r1
 80021a6:	0099      	lsls	r1, r3, #2
 80021a8:	440b      	add	r3, r1
 80021aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80021ae:	3301      	adds	r3, #1
 80021b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	bf0c      	ite	eq
 80021b8:	2301      	moveq	r3, #1
 80021ba:	2300      	movne	r3, #0
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <HAL_I2C_Init+0x196>
 80021c2:	2301      	movs	r3, #1
 80021c4:	e022      	b.n	800220c <HAL_I2C_Init+0x1dc>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d10e      	bne.n	80021ec <HAL_I2C_Init+0x1bc>
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	1e58      	subs	r0, r3, #1
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6859      	ldr	r1, [r3, #4]
 80021d6:	460b      	mov	r3, r1
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	440b      	add	r3, r1
 80021dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80021e0:	3301      	adds	r3, #1
 80021e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80021ea:	e00f      	b.n	800220c <HAL_I2C_Init+0x1dc>
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	1e58      	subs	r0, r3, #1
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6859      	ldr	r1, [r3, #4]
 80021f4:	460b      	mov	r3, r1
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	440b      	add	r3, r1
 80021fa:	0099      	lsls	r1, r3, #2
 80021fc:	440b      	add	r3, r1
 80021fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002202:	3301      	adds	r3, #1
 8002204:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002208:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800220c:	6879      	ldr	r1, [r7, #4]
 800220e:	6809      	ldr	r1, [r1, #0]
 8002210:	4313      	orrs	r3, r2
 8002212:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	69da      	ldr	r2, [r3, #28]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a1b      	ldr	r3, [r3, #32]
 8002226:	431a      	orrs	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	430a      	orrs	r2, r1
 800222e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800223a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	6911      	ldr	r1, [r2, #16]
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	68d2      	ldr	r2, [r2, #12]
 8002246:	4311      	orrs	r1, r2
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	6812      	ldr	r2, [r2, #0]
 800224c:	430b      	orrs	r3, r1
 800224e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	695a      	ldr	r2, [r3, #20]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	699b      	ldr	r3, [r3, #24]
 8002262:	431a      	orrs	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	430a      	orrs	r2, r1
 800226a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f042 0201 	orr.w	r2, r2, #1
 800227a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2220      	movs	r2, #32
 8002286:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3710      	adds	r7, #16
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	000186a0 	.word	0x000186a0
 80022a8:	001e847f 	.word	0x001e847f
 80022ac:	003d08ff 	.word	0x003d08ff
 80022b0:	431bde83 	.word	0x431bde83
 80022b4:	10624dd3 	.word	0x10624dd3

080022b8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b088      	sub	sp, #32
 80022bc:	af02      	add	r7, sp, #8
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	607a      	str	r2, [r7, #4]
 80022c2:	461a      	mov	r2, r3
 80022c4:	460b      	mov	r3, r1
 80022c6:	817b      	strh	r3, [r7, #10]
 80022c8:	4613      	mov	r3, r2
 80022ca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80022cc:	f7ff fc06 	bl	8001adc <HAL_GetTick>
 80022d0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	2b20      	cmp	r3, #32
 80022dc:	f040 80e0 	bne.w	80024a0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	9300      	str	r3, [sp, #0]
 80022e4:	2319      	movs	r3, #25
 80022e6:	2201      	movs	r2, #1
 80022e8:	4970      	ldr	r1, [pc, #448]	@ (80024ac <HAL_I2C_Master_Transmit+0x1f4>)
 80022ea:	68f8      	ldr	r0, [r7, #12]
 80022ec:	f000 fd92 	bl	8002e14 <I2C_WaitOnFlagUntilTimeout>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80022f6:	2302      	movs	r3, #2
 80022f8:	e0d3      	b.n	80024a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002300:	2b01      	cmp	r3, #1
 8002302:	d101      	bne.n	8002308 <HAL_I2C_Master_Transmit+0x50>
 8002304:	2302      	movs	r3, #2
 8002306:	e0cc      	b.n	80024a2 <HAL_I2C_Master_Transmit+0x1ea>
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2201      	movs	r2, #1
 800230c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	2b01      	cmp	r3, #1
 800231c:	d007      	beq.n	800232e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f042 0201 	orr.w	r2, r2, #1
 800232c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800233c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2221      	movs	r2, #33	@ 0x21
 8002342:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2210      	movs	r2, #16
 800234a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2200      	movs	r2, #0
 8002352:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	893a      	ldrh	r2, [r7, #8]
 800235e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002364:	b29a      	uxth	r2, r3
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	4a50      	ldr	r2, [pc, #320]	@ (80024b0 <HAL_I2C_Master_Transmit+0x1f8>)
 800236e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002370:	8979      	ldrh	r1, [r7, #10]
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	6a3a      	ldr	r2, [r7, #32]
 8002376:	68f8      	ldr	r0, [r7, #12]
 8002378:	f000 fbfc 	bl	8002b74 <I2C_MasterRequestWrite>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e08d      	b.n	80024a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002386:	2300      	movs	r3, #0
 8002388:	613b      	str	r3, [r7, #16]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	695b      	ldr	r3, [r3, #20]
 8002390:	613b      	str	r3, [r7, #16]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	613b      	str	r3, [r7, #16]
 800239a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800239c:	e066      	b.n	800246c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800239e:	697a      	ldr	r2, [r7, #20]
 80023a0:	6a39      	ldr	r1, [r7, #32]
 80023a2:	68f8      	ldr	r0, [r7, #12]
 80023a4:	f000 fe50 	bl	8003048 <I2C_WaitOnTXEFlagUntilTimeout>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d00d      	beq.n	80023ca <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b2:	2b04      	cmp	r3, #4
 80023b4:	d107      	bne.n	80023c6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023c4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e06b      	b.n	80024a2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ce:	781a      	ldrb	r2, [r3, #0]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023da:	1c5a      	adds	r2, r3, #1
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	3b01      	subs	r3, #1
 80023e8:	b29a      	uxth	r2, r3
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023f2:	3b01      	subs	r3, #1
 80023f4:	b29a      	uxth	r2, r3
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	695b      	ldr	r3, [r3, #20]
 8002400:	f003 0304 	and.w	r3, r3, #4
 8002404:	2b04      	cmp	r3, #4
 8002406:	d11b      	bne.n	8002440 <HAL_I2C_Master_Transmit+0x188>
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800240c:	2b00      	cmp	r3, #0
 800240e:	d017      	beq.n	8002440 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002414:	781a      	ldrb	r2, [r3, #0]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002420:	1c5a      	adds	r2, r3, #1
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800242a:	b29b      	uxth	r3, r3
 800242c:	3b01      	subs	r3, #1
 800242e:	b29a      	uxth	r2, r3
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002438:	3b01      	subs	r3, #1
 800243a:	b29a      	uxth	r2, r3
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002440:	697a      	ldr	r2, [r7, #20]
 8002442:	6a39      	ldr	r1, [r7, #32]
 8002444:	68f8      	ldr	r0, [r7, #12]
 8002446:	f000 fe47 	bl	80030d8 <I2C_WaitOnBTFFlagUntilTimeout>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d00d      	beq.n	800246c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002454:	2b04      	cmp	r3, #4
 8002456:	d107      	bne.n	8002468 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002466:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e01a      	b.n	80024a2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002470:	2b00      	cmp	r3, #0
 8002472:	d194      	bne.n	800239e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002482:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2220      	movs	r2, #32
 8002488:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2200      	movs	r2, #0
 8002490:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2200      	movs	r2, #0
 8002498:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800249c:	2300      	movs	r3, #0
 800249e:	e000      	b.n	80024a2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80024a0:	2302      	movs	r3, #2
  }
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3718      	adds	r7, #24
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	00100002 	.word	0x00100002
 80024b0:	ffff0000 	.word	0xffff0000

080024b4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b08c      	sub	sp, #48	@ 0x30
 80024b8:	af02      	add	r7, sp, #8
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	607a      	str	r2, [r7, #4]
 80024be:	461a      	mov	r2, r3
 80024c0:	460b      	mov	r3, r1
 80024c2:	817b      	strh	r3, [r7, #10]
 80024c4:	4613      	mov	r3, r2
 80024c6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80024c8:	f7ff fb08 	bl	8001adc <HAL_GetTick>
 80024cc:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	2b20      	cmp	r3, #32
 80024d8:	f040 8217 	bne.w	800290a <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024de:	9300      	str	r3, [sp, #0]
 80024e0:	2319      	movs	r3, #25
 80024e2:	2201      	movs	r2, #1
 80024e4:	497c      	ldr	r1, [pc, #496]	@ (80026d8 <HAL_I2C_Master_Receive+0x224>)
 80024e6:	68f8      	ldr	r0, [r7, #12]
 80024e8:	f000 fc94 	bl	8002e14 <I2C_WaitOnFlagUntilTimeout>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80024f2:	2302      	movs	r3, #2
 80024f4:	e20a      	b.n	800290c <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d101      	bne.n	8002504 <HAL_I2C_Master_Receive+0x50>
 8002500:	2302      	movs	r3, #2
 8002502:	e203      	b.n	800290c <HAL_I2C_Master_Receive+0x458>
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2201      	movs	r2, #1
 8002508:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	2b01      	cmp	r3, #1
 8002518:	d007      	beq.n	800252a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f042 0201 	orr.w	r2, r2, #1
 8002528:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002538:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2222      	movs	r2, #34	@ 0x22
 800253e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2210      	movs	r2, #16
 8002546:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2200      	movs	r2, #0
 800254e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	893a      	ldrh	r2, [r7, #8]
 800255a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002560:	b29a      	uxth	r2, r3
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	4a5c      	ldr	r2, [pc, #368]	@ (80026dc <HAL_I2C_Master_Receive+0x228>)
 800256a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800256c:	8979      	ldrh	r1, [r7, #10]
 800256e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002570:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002572:	68f8      	ldr	r0, [r7, #12]
 8002574:	f000 fb80 	bl	8002c78 <I2C_MasterRequestRead>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e1c4      	b.n	800290c <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002586:	2b00      	cmp	r3, #0
 8002588:	d113      	bne.n	80025b2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800258a:	2300      	movs	r3, #0
 800258c:	623b      	str	r3, [r7, #32]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	695b      	ldr	r3, [r3, #20]
 8002594:	623b      	str	r3, [r7, #32]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	699b      	ldr	r3, [r3, #24]
 800259c:	623b      	str	r3, [r7, #32]
 800259e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025ae:	601a      	str	r2, [r3, #0]
 80025b0:	e198      	b.n	80028e4 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d11b      	bne.n	80025f2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025ca:	2300      	movs	r3, #0
 80025cc:	61fb      	str	r3, [r7, #28]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	695b      	ldr	r3, [r3, #20]
 80025d4:	61fb      	str	r3, [r7, #28]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	61fb      	str	r3, [r7, #28]
 80025de:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025ee:	601a      	str	r2, [r3, #0]
 80025f0:	e178      	b.n	80028e4 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d11b      	bne.n	8002632 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002608:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002618:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800261a:	2300      	movs	r3, #0
 800261c:	61bb      	str	r3, [r7, #24]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	695b      	ldr	r3, [r3, #20]
 8002624:	61bb      	str	r3, [r7, #24]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	699b      	ldr	r3, [r3, #24]
 800262c:	61bb      	str	r3, [r7, #24]
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	e158      	b.n	80028e4 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002640:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002642:	2300      	movs	r3, #0
 8002644:	617b      	str	r3, [r7, #20]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	695b      	ldr	r3, [r3, #20]
 800264c:	617b      	str	r3, [r7, #20]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	699b      	ldr	r3, [r3, #24]
 8002654:	617b      	str	r3, [r7, #20]
 8002656:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002658:	e144      	b.n	80028e4 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800265e:	2b03      	cmp	r3, #3
 8002660:	f200 80f1 	bhi.w	8002846 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002668:	2b01      	cmp	r3, #1
 800266a:	d123      	bne.n	80026b4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800266c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800266e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002670:	68f8      	ldr	r0, [r7, #12]
 8002672:	f000 fd79 	bl	8003168 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d001      	beq.n	8002680 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e145      	b.n	800290c <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	691a      	ldr	r2, [r3, #16]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800268a:	b2d2      	uxtb	r2, r2
 800268c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002692:	1c5a      	adds	r2, r3, #1
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800269c:	3b01      	subs	r3, #1
 800269e:	b29a      	uxth	r2, r3
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	3b01      	subs	r3, #1
 80026ac:	b29a      	uxth	r2, r3
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80026b2:	e117      	b.n	80028e4 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d14e      	bne.n	800275a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026be:	9300      	str	r3, [sp, #0]
 80026c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026c2:	2200      	movs	r2, #0
 80026c4:	4906      	ldr	r1, [pc, #24]	@ (80026e0 <HAL_I2C_Master_Receive+0x22c>)
 80026c6:	68f8      	ldr	r0, [r7, #12]
 80026c8:	f000 fba4 	bl	8002e14 <I2C_WaitOnFlagUntilTimeout>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d008      	beq.n	80026e4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e11a      	b.n	800290c <HAL_I2C_Master_Receive+0x458>
 80026d6:	bf00      	nop
 80026d8:	00100002 	.word	0x00100002
 80026dc:	ffff0000 	.word	0xffff0000
 80026e0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	691a      	ldr	r2, [r3, #16]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026fe:	b2d2      	uxtb	r2, r2
 8002700:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002706:	1c5a      	adds	r2, r3, #1
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002710:	3b01      	subs	r3, #1
 8002712:	b29a      	uxth	r2, r3
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800271c:	b29b      	uxth	r3, r3
 800271e:	3b01      	subs	r3, #1
 8002720:	b29a      	uxth	r2, r3
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	691a      	ldr	r2, [r3, #16]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002730:	b2d2      	uxtb	r2, r2
 8002732:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002738:	1c5a      	adds	r2, r3, #1
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002742:	3b01      	subs	r3, #1
 8002744:	b29a      	uxth	r2, r3
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800274e:	b29b      	uxth	r3, r3
 8002750:	3b01      	subs	r3, #1
 8002752:	b29a      	uxth	r2, r3
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002758:	e0c4      	b.n	80028e4 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800275a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800275c:	9300      	str	r3, [sp, #0]
 800275e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002760:	2200      	movs	r2, #0
 8002762:	496c      	ldr	r1, [pc, #432]	@ (8002914 <HAL_I2C_Master_Receive+0x460>)
 8002764:	68f8      	ldr	r0, [r7, #12]
 8002766:	f000 fb55 	bl	8002e14 <I2C_WaitOnFlagUntilTimeout>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d001      	beq.n	8002774 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e0cb      	b.n	800290c <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002782:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	691a      	ldr	r2, [r3, #16]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800278e:	b2d2      	uxtb	r2, r2
 8002790:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002796:	1c5a      	adds	r2, r3, #1
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027a0:	3b01      	subs	r3, #1
 80027a2:	b29a      	uxth	r2, r3
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	3b01      	subs	r3, #1
 80027b0:	b29a      	uxth	r2, r3
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b8:	9300      	str	r3, [sp, #0]
 80027ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027bc:	2200      	movs	r2, #0
 80027be:	4955      	ldr	r1, [pc, #340]	@ (8002914 <HAL_I2C_Master_Receive+0x460>)
 80027c0:	68f8      	ldr	r0, [r7, #12]
 80027c2:	f000 fb27 	bl	8002e14 <I2C_WaitOnFlagUntilTimeout>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d001      	beq.n	80027d0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e09d      	b.n	800290c <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	691a      	ldr	r2, [r3, #16]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ea:	b2d2      	uxtb	r2, r2
 80027ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027f2:	1c5a      	adds	r2, r3, #1
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027fc:	3b01      	subs	r3, #1
 80027fe:	b29a      	uxth	r2, r3
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002808:	b29b      	uxth	r3, r3
 800280a:	3b01      	subs	r3, #1
 800280c:	b29a      	uxth	r2, r3
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	691a      	ldr	r2, [r3, #16]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800281c:	b2d2      	uxtb	r2, r2
 800281e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002824:	1c5a      	adds	r2, r3, #1
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800282e:	3b01      	subs	r3, #1
 8002830:	b29a      	uxth	r2, r3
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800283a:	b29b      	uxth	r3, r3
 800283c:	3b01      	subs	r3, #1
 800283e:	b29a      	uxth	r2, r3
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002844:	e04e      	b.n	80028e4 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002846:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002848:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800284a:	68f8      	ldr	r0, [r7, #12]
 800284c:	f000 fc8c 	bl	8003168 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e058      	b.n	800290c <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	691a      	ldr	r2, [r3, #16]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002864:	b2d2      	uxtb	r2, r2
 8002866:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800286c:	1c5a      	adds	r2, r3, #1
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002876:	3b01      	subs	r3, #1
 8002878:	b29a      	uxth	r2, r3
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002882:	b29b      	uxth	r3, r3
 8002884:	3b01      	subs	r3, #1
 8002886:	b29a      	uxth	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	695b      	ldr	r3, [r3, #20]
 8002892:	f003 0304 	and.w	r3, r3, #4
 8002896:	2b04      	cmp	r3, #4
 8002898:	d124      	bne.n	80028e4 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800289e:	2b03      	cmp	r3, #3
 80028a0:	d107      	bne.n	80028b2 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028b0:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	691a      	ldr	r2, [r3, #16]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028bc:	b2d2      	uxtb	r2, r2
 80028be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c4:	1c5a      	adds	r2, r3, #1
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028ce:	3b01      	subs	r3, #1
 80028d0:	b29a      	uxth	r2, r3
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028da:	b29b      	uxth	r3, r3
 80028dc:	3b01      	subs	r3, #1
 80028de:	b29a      	uxth	r2, r3
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	f47f aeb6 	bne.w	800265a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2220      	movs	r2, #32
 80028f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002906:	2300      	movs	r3, #0
 8002908:	e000      	b.n	800290c <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800290a:	2302      	movs	r3, #2
  }
}
 800290c:	4618      	mov	r0, r3
 800290e:	3728      	adds	r7, #40	@ 0x28
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	00010004 	.word	0x00010004

08002918 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b08a      	sub	sp, #40	@ 0x28
 800291c:	af02      	add	r7, sp, #8
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	607a      	str	r2, [r7, #4]
 8002922:	603b      	str	r3, [r7, #0]
 8002924:	460b      	mov	r3, r1
 8002926:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002928:	f7ff f8d8 	bl	8001adc <HAL_GetTick>
 800292c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800292e:	2300      	movs	r3, #0
 8002930:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002938:	b2db      	uxtb	r3, r3
 800293a:	2b20      	cmp	r3, #32
 800293c:	f040 8111 	bne.w	8002b62 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	9300      	str	r3, [sp, #0]
 8002944:	2319      	movs	r3, #25
 8002946:	2201      	movs	r2, #1
 8002948:	4988      	ldr	r1, [pc, #544]	@ (8002b6c <HAL_I2C_IsDeviceReady+0x254>)
 800294a:	68f8      	ldr	r0, [r7, #12]
 800294c:	f000 fa62 	bl	8002e14 <I2C_WaitOnFlagUntilTimeout>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d001      	beq.n	800295a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002956:	2302      	movs	r3, #2
 8002958:	e104      	b.n	8002b64 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002960:	2b01      	cmp	r3, #1
 8002962:	d101      	bne.n	8002968 <HAL_I2C_IsDeviceReady+0x50>
 8002964:	2302      	movs	r3, #2
 8002966:	e0fd      	b.n	8002b64 <HAL_I2C_IsDeviceReady+0x24c>
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	2b01      	cmp	r3, #1
 800297c:	d007      	beq.n	800298e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f042 0201 	orr.w	r2, r2, #1
 800298c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800299c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2224      	movs	r2, #36	@ 0x24
 80029a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2200      	movs	r2, #0
 80029aa:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	4a70      	ldr	r2, [pc, #448]	@ (8002b70 <HAL_I2C_IsDeviceReady+0x258>)
 80029b0:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80029c0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	9300      	str	r3, [sp, #0]
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80029ce:	68f8      	ldr	r0, [r7, #12]
 80029d0:	f000 fa20 	bl	8002e14 <I2C_WaitOnFlagUntilTimeout>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d00d      	beq.n	80029f6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80029e8:	d103      	bne.n	80029f2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80029f0:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e0b6      	b.n	8002b64 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80029f6:	897b      	ldrh	r3, [r7, #10]
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	461a      	mov	r2, r3
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002a04:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002a06:	f7ff f869 	bl	8001adc <HAL_GetTick>
 8002a0a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	695b      	ldr	r3, [r3, #20]
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	bf0c      	ite	eq
 8002a1a:	2301      	moveq	r3, #1
 8002a1c:	2300      	movne	r3, #0
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	695b      	ldr	r3, [r3, #20]
 8002a28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a30:	bf0c      	ite	eq
 8002a32:	2301      	moveq	r3, #1
 8002a34:	2300      	movne	r3, #0
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002a3a:	e025      	b.n	8002a88 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002a3c:	f7ff f84e 	bl	8001adc <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	683a      	ldr	r2, [r7, #0]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d302      	bcc.n	8002a52 <HAL_I2C_IsDeviceReady+0x13a>
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d103      	bne.n	8002a5a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	22a0      	movs	r2, #160	@ 0xa0
 8002a56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	695b      	ldr	r3, [r3, #20]
 8002a60:	f003 0302 	and.w	r3, r3, #2
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	bf0c      	ite	eq
 8002a68:	2301      	moveq	r3, #1
 8002a6a:	2300      	movne	r3, #0
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	695b      	ldr	r3, [r3, #20]
 8002a76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a7e:	bf0c      	ite	eq
 8002a80:	2301      	moveq	r3, #1
 8002a82:	2300      	movne	r3, #0
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	2ba0      	cmp	r3, #160	@ 0xa0
 8002a92:	d005      	beq.n	8002aa0 <HAL_I2C_IsDeviceReady+0x188>
 8002a94:	7dfb      	ldrb	r3, [r7, #23]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d102      	bne.n	8002aa0 <HAL_I2C_IsDeviceReady+0x188>
 8002a9a:	7dbb      	ldrb	r3, [r7, #22]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d0cd      	beq.n	8002a3c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2220      	movs	r2, #32
 8002aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	695b      	ldr	r3, [r3, #20]
 8002aae:	f003 0302 	and.w	r3, r3, #2
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d129      	bne.n	8002b0a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ac4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	613b      	str	r3, [r7, #16]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	695b      	ldr	r3, [r3, #20]
 8002ad0:	613b      	str	r3, [r7, #16]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	699b      	ldr	r3, [r3, #24]
 8002ad8:	613b      	str	r3, [r7, #16]
 8002ada:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	9300      	str	r3, [sp, #0]
 8002ae0:	2319      	movs	r3, #25
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	4921      	ldr	r1, [pc, #132]	@ (8002b6c <HAL_I2C_IsDeviceReady+0x254>)
 8002ae6:	68f8      	ldr	r0, [r7, #12]
 8002ae8:	f000 f994 	bl	8002e14 <I2C_WaitOnFlagUntilTimeout>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d001      	beq.n	8002af6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e036      	b.n	8002b64 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2220      	movs	r2, #32
 8002afa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8002b06:	2300      	movs	r3, #0
 8002b08:	e02c      	b.n	8002b64 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b18:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002b22:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	9300      	str	r3, [sp, #0]
 8002b28:	2319      	movs	r3, #25
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	490f      	ldr	r1, [pc, #60]	@ (8002b6c <HAL_I2C_IsDeviceReady+0x254>)
 8002b2e:	68f8      	ldr	r0, [r7, #12]
 8002b30:	f000 f970 	bl	8002e14 <I2C_WaitOnFlagUntilTimeout>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e012      	b.n	8002b64 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	3301      	adds	r3, #1
 8002b42:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	f4ff af32 	bcc.w	80029b2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2220      	movs	r2, #32
 8002b52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e000      	b.n	8002b64 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002b62:	2302      	movs	r3, #2
  }
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3720      	adds	r7, #32
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	00100002 	.word	0x00100002
 8002b70:	ffff0000 	.word	0xffff0000

08002b74 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b088      	sub	sp, #32
 8002b78:	af02      	add	r7, sp, #8
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	607a      	str	r2, [r7, #4]
 8002b7e:	603b      	str	r3, [r7, #0]
 8002b80:	460b      	mov	r3, r1
 8002b82:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b88:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	2b08      	cmp	r3, #8
 8002b8e:	d006      	beq.n	8002b9e <I2C_MasterRequestWrite+0x2a>
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d003      	beq.n	8002b9e <I2C_MasterRequestWrite+0x2a>
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002b9c:	d108      	bne.n	8002bb0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002bac:	601a      	str	r2, [r3, #0]
 8002bae:	e00b      	b.n	8002bc8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bb4:	2b12      	cmp	r3, #18
 8002bb6:	d107      	bne.n	8002bc8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002bc6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	9300      	str	r3, [sp, #0]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002bd4:	68f8      	ldr	r0, [r7, #12]
 8002bd6:	f000 f91d 	bl	8002e14 <I2C_WaitOnFlagUntilTimeout>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d00d      	beq.n	8002bfc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002bee:	d103      	bne.n	8002bf8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002bf6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e035      	b.n	8002c68 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	691b      	ldr	r3, [r3, #16]
 8002c00:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002c04:	d108      	bne.n	8002c18 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c06:	897b      	ldrh	r3, [r7, #10]
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002c14:	611a      	str	r2, [r3, #16]
 8002c16:	e01b      	b.n	8002c50 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002c18:	897b      	ldrh	r3, [r7, #10]
 8002c1a:	11db      	asrs	r3, r3, #7
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	f003 0306 	and.w	r3, r3, #6
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	f063 030f 	orn	r3, r3, #15
 8002c28:	b2da      	uxtb	r2, r3
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	490e      	ldr	r1, [pc, #56]	@ (8002c70 <I2C_MasterRequestWrite+0xfc>)
 8002c36:	68f8      	ldr	r0, [r7, #12]
 8002c38:	f000 f966 	bl	8002f08 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e010      	b.n	8002c68 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002c46:	897b      	ldrh	r3, [r7, #10]
 8002c48:	b2da      	uxtb	r2, r3
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	4907      	ldr	r1, [pc, #28]	@ (8002c74 <I2C_MasterRequestWrite+0x100>)
 8002c56:	68f8      	ldr	r0, [r7, #12]
 8002c58:	f000 f956 	bl	8002f08 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d001      	beq.n	8002c66 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e000      	b.n	8002c68 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002c66:	2300      	movs	r3, #0
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3718      	adds	r7, #24
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	00010008 	.word	0x00010008
 8002c74:	00010002 	.word	0x00010002

08002c78 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b088      	sub	sp, #32
 8002c7c:	af02      	add	r7, sp, #8
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	607a      	str	r2, [r7, #4]
 8002c82:	603b      	str	r3, [r7, #0]
 8002c84:	460b      	mov	r3, r1
 8002c86:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c8c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002c9c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	2b08      	cmp	r3, #8
 8002ca2:	d006      	beq.n	8002cb2 <I2C_MasterRequestRead+0x3a>
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d003      	beq.n	8002cb2 <I2C_MasterRequestRead+0x3a>
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002cb0:	d108      	bne.n	8002cc4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002cc0:	601a      	str	r2, [r3, #0]
 8002cc2:	e00b      	b.n	8002cdc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cc8:	2b11      	cmp	r3, #17
 8002cca:	d107      	bne.n	8002cdc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002cda:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	9300      	str	r3, [sp, #0]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002ce8:	68f8      	ldr	r0, [r7, #12]
 8002cea:	f000 f893 	bl	8002e14 <I2C_WaitOnFlagUntilTimeout>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d00d      	beq.n	8002d10 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cfe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d02:	d103      	bne.n	8002d0c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d0a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e079      	b.n	8002e04 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002d18:	d108      	bne.n	8002d2c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002d1a:	897b      	ldrh	r3, [r7, #10]
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	f043 0301 	orr.w	r3, r3, #1
 8002d22:	b2da      	uxtb	r2, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	611a      	str	r2, [r3, #16]
 8002d2a:	e05f      	b.n	8002dec <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002d2c:	897b      	ldrh	r3, [r7, #10]
 8002d2e:	11db      	asrs	r3, r3, #7
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	f003 0306 	and.w	r3, r3, #6
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	f063 030f 	orn	r3, r3, #15
 8002d3c:	b2da      	uxtb	r2, r3
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	4930      	ldr	r1, [pc, #192]	@ (8002e0c <I2C_MasterRequestRead+0x194>)
 8002d4a:	68f8      	ldr	r0, [r7, #12]
 8002d4c:	f000 f8dc 	bl	8002f08 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d001      	beq.n	8002d5a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e054      	b.n	8002e04 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002d5a:	897b      	ldrh	r3, [r7, #10]
 8002d5c:	b2da      	uxtb	r2, r3
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	4929      	ldr	r1, [pc, #164]	@ (8002e10 <I2C_MasterRequestRead+0x198>)
 8002d6a:	68f8      	ldr	r0, [r7, #12]
 8002d6c:	f000 f8cc 	bl	8002f08 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d001      	beq.n	8002d7a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e044      	b.n	8002e04 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	613b      	str	r3, [r7, #16]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	695b      	ldr	r3, [r3, #20]
 8002d84:	613b      	str	r3, [r7, #16]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	699b      	ldr	r3, [r3, #24]
 8002d8c:	613b      	str	r3, [r7, #16]
 8002d8e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d9e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	9300      	str	r3, [sp, #0]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002dac:	68f8      	ldr	r0, [r7, #12]
 8002dae:	f000 f831 	bl	8002e14 <I2C_WaitOnFlagUntilTimeout>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d00d      	beq.n	8002dd4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002dc6:	d103      	bne.n	8002dd0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002dce:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e017      	b.n	8002e04 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002dd4:	897b      	ldrh	r3, [r7, #10]
 8002dd6:	11db      	asrs	r3, r3, #7
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	f003 0306 	and.w	r3, r3, #6
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	f063 030e 	orn	r3, r3, #14
 8002de4:	b2da      	uxtb	r2, r3
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	4907      	ldr	r1, [pc, #28]	@ (8002e10 <I2C_MasterRequestRead+0x198>)
 8002df2:	68f8      	ldr	r0, [r7, #12]
 8002df4:	f000 f888 	bl	8002f08 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d001      	beq.n	8002e02 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e000      	b.n	8002e04 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002e02:	2300      	movs	r3, #0
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3718      	adds	r7, #24
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	00010008 	.word	0x00010008
 8002e10:	00010002 	.word	0x00010002

08002e14 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	60b9      	str	r1, [r7, #8]
 8002e1e:	603b      	str	r3, [r7, #0]
 8002e20:	4613      	mov	r3, r2
 8002e22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e24:	e048      	b.n	8002eb8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e2c:	d044      	beq.n	8002eb8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e2e:	f7fe fe55 	bl	8001adc <HAL_GetTick>
 8002e32:	4602      	mov	r2, r0
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	683a      	ldr	r2, [r7, #0]
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d302      	bcc.n	8002e44 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d139      	bne.n	8002eb8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	0c1b      	lsrs	r3, r3, #16
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d10d      	bne.n	8002e6a <I2C_WaitOnFlagUntilTimeout+0x56>
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	695b      	ldr	r3, [r3, #20]
 8002e54:	43da      	mvns	r2, r3
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	4013      	ands	r3, r2
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	bf0c      	ite	eq
 8002e60:	2301      	moveq	r3, #1
 8002e62:	2300      	movne	r3, #0
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	461a      	mov	r2, r3
 8002e68:	e00c      	b.n	8002e84 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	43da      	mvns	r2, r3
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	4013      	ands	r3, r2
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	bf0c      	ite	eq
 8002e7c:	2301      	moveq	r3, #1
 8002e7e:	2300      	movne	r3, #0
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	461a      	mov	r2, r3
 8002e84:	79fb      	ldrb	r3, [r7, #7]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d116      	bne.n	8002eb8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2220      	movs	r2, #32
 8002e94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea4:	f043 0220 	orr.w	r2, r3, #32
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e023      	b.n	8002f00 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	0c1b      	lsrs	r3, r3, #16
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d10d      	bne.n	8002ede <I2C_WaitOnFlagUntilTimeout+0xca>
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	695b      	ldr	r3, [r3, #20]
 8002ec8:	43da      	mvns	r2, r3
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	4013      	ands	r3, r2
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	bf0c      	ite	eq
 8002ed4:	2301      	moveq	r3, #1
 8002ed6:	2300      	movne	r3, #0
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	461a      	mov	r2, r3
 8002edc:	e00c      	b.n	8002ef8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	699b      	ldr	r3, [r3, #24]
 8002ee4:	43da      	mvns	r2, r3
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	4013      	ands	r3, r2
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	bf0c      	ite	eq
 8002ef0:	2301      	moveq	r3, #1
 8002ef2:	2300      	movne	r3, #0
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	79fb      	ldrb	r3, [r7, #7]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d093      	beq.n	8002e26 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002efe:	2300      	movs	r3, #0
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3710      	adds	r7, #16
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	607a      	str	r2, [r7, #4]
 8002f14:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f16:	e071      	b.n	8002ffc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f26:	d123      	bne.n	8002f70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f36:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002f40:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2200      	movs	r2, #0
 8002f46:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2220      	movs	r2, #32
 8002f4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f5c:	f043 0204 	orr.w	r2, r3, #4
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2200      	movs	r2, #0
 8002f68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e067      	b.n	8003040 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f76:	d041      	beq.n	8002ffc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f78:	f7fe fdb0 	bl	8001adc <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d302      	bcc.n	8002f8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d136      	bne.n	8002ffc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	0c1b      	lsrs	r3, r3, #16
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d10c      	bne.n	8002fb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	43da      	mvns	r2, r3
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	bf14      	ite	ne
 8002faa:	2301      	movne	r3, #1
 8002fac:	2300      	moveq	r3, #0
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	e00b      	b.n	8002fca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	43da      	mvns	r2, r3
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	bf14      	ite	ne
 8002fc4:	2301      	movne	r3, #1
 8002fc6:	2300      	moveq	r3, #0
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d016      	beq.n	8002ffc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2220      	movs	r2, #32
 8002fd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe8:	f043 0220 	orr.w	r2, r3, #32
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e021      	b.n	8003040 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	0c1b      	lsrs	r3, r3, #16
 8003000:	b2db      	uxtb	r3, r3
 8003002:	2b01      	cmp	r3, #1
 8003004:	d10c      	bne.n	8003020 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	695b      	ldr	r3, [r3, #20]
 800300c:	43da      	mvns	r2, r3
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	4013      	ands	r3, r2
 8003012:	b29b      	uxth	r3, r3
 8003014:	2b00      	cmp	r3, #0
 8003016:	bf14      	ite	ne
 8003018:	2301      	movne	r3, #1
 800301a:	2300      	moveq	r3, #0
 800301c:	b2db      	uxtb	r3, r3
 800301e:	e00b      	b.n	8003038 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	699b      	ldr	r3, [r3, #24]
 8003026:	43da      	mvns	r2, r3
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	4013      	ands	r3, r2
 800302c:	b29b      	uxth	r3, r3
 800302e:	2b00      	cmp	r3, #0
 8003030:	bf14      	ite	ne
 8003032:	2301      	movne	r3, #1
 8003034:	2300      	moveq	r3, #0
 8003036:	b2db      	uxtb	r3, r3
 8003038:	2b00      	cmp	r3, #0
 800303a:	f47f af6d 	bne.w	8002f18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800303e:	2300      	movs	r3, #0
}
 8003040:	4618      	mov	r0, r3
 8003042:	3710      	adds	r7, #16
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	60b9      	str	r1, [r7, #8]
 8003052:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003054:	e034      	b.n	80030c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003056:	68f8      	ldr	r0, [r7, #12]
 8003058:	f000 f8e3 	bl	8003222 <I2C_IsAcknowledgeFailed>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e034      	b.n	80030d0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800306c:	d028      	beq.n	80030c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800306e:	f7fe fd35 	bl	8001adc <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	68ba      	ldr	r2, [r7, #8]
 800307a:	429a      	cmp	r2, r3
 800307c:	d302      	bcc.n	8003084 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d11d      	bne.n	80030c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	695b      	ldr	r3, [r3, #20]
 800308a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800308e:	2b80      	cmp	r3, #128	@ 0x80
 8003090:	d016      	beq.n	80030c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2200      	movs	r2, #0
 8003096:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2220      	movs	r2, #32
 800309c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ac:	f043 0220 	orr.w	r2, r3, #32
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e007      	b.n	80030d0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	695b      	ldr	r3, [r3, #20]
 80030c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030ca:	2b80      	cmp	r3, #128	@ 0x80
 80030cc:	d1c3      	bne.n	8003056 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80030ce:	2300      	movs	r3, #0
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3710      	adds	r7, #16
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	60b9      	str	r1, [r7, #8]
 80030e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030e4:	e034      	b.n	8003150 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030e6:	68f8      	ldr	r0, [r7, #12]
 80030e8:	f000 f89b 	bl	8003222 <I2C_IsAcknowledgeFailed>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d001      	beq.n	80030f6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e034      	b.n	8003160 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030fc:	d028      	beq.n	8003150 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030fe:	f7fe fced 	bl	8001adc <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	68ba      	ldr	r2, [r7, #8]
 800310a:	429a      	cmp	r2, r3
 800310c:	d302      	bcc.n	8003114 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d11d      	bne.n	8003150 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	f003 0304 	and.w	r3, r3, #4
 800311e:	2b04      	cmp	r3, #4
 8003120:	d016      	beq.n	8003150 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2200      	movs	r2, #0
 8003126:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2220      	movs	r2, #32
 800312c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800313c:	f043 0220 	orr.w	r2, r3, #32
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2200      	movs	r2, #0
 8003148:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e007      	b.n	8003160 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	695b      	ldr	r3, [r3, #20]
 8003156:	f003 0304 	and.w	r3, r3, #4
 800315a:	2b04      	cmp	r3, #4
 800315c:	d1c3      	bne.n	80030e6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800315e:	2300      	movs	r3, #0
}
 8003160:	4618      	mov	r0, r3
 8003162:	3710      	adds	r7, #16
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	60b9      	str	r1, [r7, #8]
 8003172:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003174:	e049      	b.n	800320a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	695b      	ldr	r3, [r3, #20]
 800317c:	f003 0310 	and.w	r3, r3, #16
 8003180:	2b10      	cmp	r3, #16
 8003182:	d119      	bne.n	80031b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f06f 0210 	mvn.w	r2, #16
 800318c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2200      	movs	r2, #0
 8003192:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2220      	movs	r2, #32
 8003198:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e030      	b.n	800321a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031b8:	f7fe fc90 	bl	8001adc <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	68ba      	ldr	r2, [r7, #8]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d302      	bcc.n	80031ce <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d11d      	bne.n	800320a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	695b      	ldr	r3, [r3, #20]
 80031d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031d8:	2b40      	cmp	r3, #64	@ 0x40
 80031da:	d016      	beq.n	800320a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2200      	movs	r2, #0
 80031e0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2220      	movs	r2, #32
 80031e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f6:	f043 0220 	orr.w	r2, r3, #32
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e007      	b.n	800321a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	695b      	ldr	r3, [r3, #20]
 8003210:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003214:	2b40      	cmp	r3, #64	@ 0x40
 8003216:	d1ae      	bne.n	8003176 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3710      	adds	r7, #16
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}

08003222 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003222:	b480      	push	{r7}
 8003224:	b083      	sub	sp, #12
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	695b      	ldr	r3, [r3, #20]
 8003230:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003234:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003238:	d11b      	bne.n	8003272 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003242:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2220      	movs	r2, #32
 800324e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800325e:	f043 0204 	orr.w	r2, r3, #4
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e000      	b.n	8003274 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003272:	2300      	movs	r3, #0
}
 8003274:	4618      	mov	r0, r3
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d101      	bne.n	8003294 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e0cc      	b.n	800342e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003294:	4b68      	ldr	r3, [pc, #416]	@ (8003438 <HAL_RCC_ClockConfig+0x1b8>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 030f 	and.w	r3, r3, #15
 800329c:	683a      	ldr	r2, [r7, #0]
 800329e:	429a      	cmp	r2, r3
 80032a0:	d90c      	bls.n	80032bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032a2:	4b65      	ldr	r3, [pc, #404]	@ (8003438 <HAL_RCC_ClockConfig+0x1b8>)
 80032a4:	683a      	ldr	r2, [r7, #0]
 80032a6:	b2d2      	uxtb	r2, r2
 80032a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032aa:	4b63      	ldr	r3, [pc, #396]	@ (8003438 <HAL_RCC_ClockConfig+0x1b8>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 030f 	and.w	r3, r3, #15
 80032b2:	683a      	ldr	r2, [r7, #0]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d001      	beq.n	80032bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e0b8      	b.n	800342e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0302 	and.w	r3, r3, #2
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d020      	beq.n	800330a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0304 	and.w	r3, r3, #4
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d005      	beq.n	80032e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032d4:	4b59      	ldr	r3, [pc, #356]	@ (800343c <HAL_RCC_ClockConfig+0x1bc>)
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	4a58      	ldr	r2, [pc, #352]	@ (800343c <HAL_RCC_ClockConfig+0x1bc>)
 80032da:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80032de:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0308 	and.w	r3, r3, #8
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d005      	beq.n	80032f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032ec:	4b53      	ldr	r3, [pc, #332]	@ (800343c <HAL_RCC_ClockConfig+0x1bc>)
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	4a52      	ldr	r2, [pc, #328]	@ (800343c <HAL_RCC_ClockConfig+0x1bc>)
 80032f2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80032f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032f8:	4b50      	ldr	r3, [pc, #320]	@ (800343c <HAL_RCC_ClockConfig+0x1bc>)
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	494d      	ldr	r1, [pc, #308]	@ (800343c <HAL_RCC_ClockConfig+0x1bc>)
 8003306:	4313      	orrs	r3, r2
 8003308:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0301 	and.w	r3, r3, #1
 8003312:	2b00      	cmp	r3, #0
 8003314:	d044      	beq.n	80033a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	2b01      	cmp	r3, #1
 800331c:	d107      	bne.n	800332e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800331e:	4b47      	ldr	r3, [pc, #284]	@ (800343c <HAL_RCC_ClockConfig+0x1bc>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d119      	bne.n	800335e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e07f      	b.n	800342e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	2b02      	cmp	r3, #2
 8003334:	d003      	beq.n	800333e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800333a:	2b03      	cmp	r3, #3
 800333c:	d107      	bne.n	800334e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800333e:	4b3f      	ldr	r3, [pc, #252]	@ (800343c <HAL_RCC_ClockConfig+0x1bc>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d109      	bne.n	800335e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e06f      	b.n	800342e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800334e:	4b3b      	ldr	r3, [pc, #236]	@ (800343c <HAL_RCC_ClockConfig+0x1bc>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0302 	and.w	r3, r3, #2
 8003356:	2b00      	cmp	r3, #0
 8003358:	d101      	bne.n	800335e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e067      	b.n	800342e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800335e:	4b37      	ldr	r3, [pc, #220]	@ (800343c <HAL_RCC_ClockConfig+0x1bc>)
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f023 0203 	bic.w	r2, r3, #3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	4934      	ldr	r1, [pc, #208]	@ (800343c <HAL_RCC_ClockConfig+0x1bc>)
 800336c:	4313      	orrs	r3, r2
 800336e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003370:	f7fe fbb4 	bl	8001adc <HAL_GetTick>
 8003374:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003376:	e00a      	b.n	800338e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003378:	f7fe fbb0 	bl	8001adc <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003386:	4293      	cmp	r3, r2
 8003388:	d901      	bls.n	800338e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e04f      	b.n	800342e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800338e:	4b2b      	ldr	r3, [pc, #172]	@ (800343c <HAL_RCC_ClockConfig+0x1bc>)
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f003 020c 	and.w	r2, r3, #12
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	429a      	cmp	r2, r3
 800339e:	d1eb      	bne.n	8003378 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033a0:	4b25      	ldr	r3, [pc, #148]	@ (8003438 <HAL_RCC_ClockConfig+0x1b8>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 030f 	and.w	r3, r3, #15
 80033a8:	683a      	ldr	r2, [r7, #0]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d20c      	bcs.n	80033c8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ae:	4b22      	ldr	r3, [pc, #136]	@ (8003438 <HAL_RCC_ClockConfig+0x1b8>)
 80033b0:	683a      	ldr	r2, [r7, #0]
 80033b2:	b2d2      	uxtb	r2, r2
 80033b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033b6:	4b20      	ldr	r3, [pc, #128]	@ (8003438 <HAL_RCC_ClockConfig+0x1b8>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 030f 	and.w	r3, r3, #15
 80033be:	683a      	ldr	r2, [r7, #0]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d001      	beq.n	80033c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e032      	b.n	800342e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0304 	and.w	r3, r3, #4
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d008      	beq.n	80033e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033d4:	4b19      	ldr	r3, [pc, #100]	@ (800343c <HAL_RCC_ClockConfig+0x1bc>)
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	4916      	ldr	r1, [pc, #88]	@ (800343c <HAL_RCC_ClockConfig+0x1bc>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0308 	and.w	r3, r3, #8
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d009      	beq.n	8003406 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033f2:	4b12      	ldr	r3, [pc, #72]	@ (800343c <HAL_RCC_ClockConfig+0x1bc>)
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	00db      	lsls	r3, r3, #3
 8003400:	490e      	ldr	r1, [pc, #56]	@ (800343c <HAL_RCC_ClockConfig+0x1bc>)
 8003402:	4313      	orrs	r3, r2
 8003404:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003406:	f000 f855 	bl	80034b4 <HAL_RCC_GetSysClockFreq>
 800340a:	4602      	mov	r2, r0
 800340c:	4b0b      	ldr	r3, [pc, #44]	@ (800343c <HAL_RCC_ClockConfig+0x1bc>)
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	091b      	lsrs	r3, r3, #4
 8003412:	f003 030f 	and.w	r3, r3, #15
 8003416:	490a      	ldr	r1, [pc, #40]	@ (8003440 <HAL_RCC_ClockConfig+0x1c0>)
 8003418:	5ccb      	ldrb	r3, [r1, r3]
 800341a:	fa22 f303 	lsr.w	r3, r2, r3
 800341e:	4a09      	ldr	r2, [pc, #36]	@ (8003444 <HAL_RCC_ClockConfig+0x1c4>)
 8003420:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003422:	4b09      	ldr	r3, [pc, #36]	@ (8003448 <HAL_RCC_ClockConfig+0x1c8>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4618      	mov	r0, r3
 8003428:	f7fe fb14 	bl	8001a54 <HAL_InitTick>

  return HAL_OK;
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	3710      	adds	r7, #16
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	40023c00 	.word	0x40023c00
 800343c:	40023800 	.word	0x40023800
 8003440:	08007a70 	.word	0x08007a70
 8003444:	20000004 	.word	0x20000004
 8003448:	20000008 	.word	0x20000008

0800344c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800344c:	b480      	push	{r7}
 800344e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003450:	4b03      	ldr	r3, [pc, #12]	@ (8003460 <HAL_RCC_GetHCLKFreq+0x14>)
 8003452:	681b      	ldr	r3, [r3, #0]
}
 8003454:	4618      	mov	r0, r3
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop
 8003460:	20000004 	.word	0x20000004

08003464 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003468:	f7ff fff0 	bl	800344c <HAL_RCC_GetHCLKFreq>
 800346c:	4602      	mov	r2, r0
 800346e:	4b05      	ldr	r3, [pc, #20]	@ (8003484 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	0a9b      	lsrs	r3, r3, #10
 8003474:	f003 0307 	and.w	r3, r3, #7
 8003478:	4903      	ldr	r1, [pc, #12]	@ (8003488 <HAL_RCC_GetPCLK1Freq+0x24>)
 800347a:	5ccb      	ldrb	r3, [r1, r3]
 800347c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003480:	4618      	mov	r0, r3
 8003482:	bd80      	pop	{r7, pc}
 8003484:	40023800 	.word	0x40023800
 8003488:	08007a80 	.word	0x08007a80

0800348c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003490:	f7ff ffdc 	bl	800344c <HAL_RCC_GetHCLKFreq>
 8003494:	4602      	mov	r2, r0
 8003496:	4b05      	ldr	r3, [pc, #20]	@ (80034ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	0b5b      	lsrs	r3, r3, #13
 800349c:	f003 0307 	and.w	r3, r3, #7
 80034a0:	4903      	ldr	r1, [pc, #12]	@ (80034b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034a2:	5ccb      	ldrb	r3, [r1, r3]
 80034a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	40023800 	.word	0x40023800
 80034b0:	08007a80 	.word	0x08007a80

080034b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034b8:	b0ae      	sub	sp, #184	@ 0xb8
 80034ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80034bc:	2300      	movs	r3, #0
 80034be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80034c2:	2300      	movs	r3, #0
 80034c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80034c8:	2300      	movs	r3, #0
 80034ca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80034ce:	2300      	movs	r3, #0
 80034d0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80034d4:	2300      	movs	r3, #0
 80034d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034da:	4bcb      	ldr	r3, [pc, #812]	@ (8003808 <HAL_RCC_GetSysClockFreq+0x354>)
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f003 030c 	and.w	r3, r3, #12
 80034e2:	2b0c      	cmp	r3, #12
 80034e4:	f200 8206 	bhi.w	80038f4 <HAL_RCC_GetSysClockFreq+0x440>
 80034e8:	a201      	add	r2, pc, #4	@ (adr r2, 80034f0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80034ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ee:	bf00      	nop
 80034f0:	08003525 	.word	0x08003525
 80034f4:	080038f5 	.word	0x080038f5
 80034f8:	080038f5 	.word	0x080038f5
 80034fc:	080038f5 	.word	0x080038f5
 8003500:	0800352d 	.word	0x0800352d
 8003504:	080038f5 	.word	0x080038f5
 8003508:	080038f5 	.word	0x080038f5
 800350c:	080038f5 	.word	0x080038f5
 8003510:	08003535 	.word	0x08003535
 8003514:	080038f5 	.word	0x080038f5
 8003518:	080038f5 	.word	0x080038f5
 800351c:	080038f5 	.word	0x080038f5
 8003520:	08003725 	.word	0x08003725
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003524:	4bb9      	ldr	r3, [pc, #740]	@ (800380c <HAL_RCC_GetSysClockFreq+0x358>)
 8003526:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800352a:	e1e7      	b.n	80038fc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800352c:	4bb8      	ldr	r3, [pc, #736]	@ (8003810 <HAL_RCC_GetSysClockFreq+0x35c>)
 800352e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003532:	e1e3      	b.n	80038fc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003534:	4bb4      	ldr	r3, [pc, #720]	@ (8003808 <HAL_RCC_GetSysClockFreq+0x354>)
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800353c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003540:	4bb1      	ldr	r3, [pc, #708]	@ (8003808 <HAL_RCC_GetSysClockFreq+0x354>)
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003548:	2b00      	cmp	r3, #0
 800354a:	d071      	beq.n	8003630 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800354c:	4bae      	ldr	r3, [pc, #696]	@ (8003808 <HAL_RCC_GetSysClockFreq+0x354>)
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	099b      	lsrs	r3, r3, #6
 8003552:	2200      	movs	r2, #0
 8003554:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003558:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800355c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003560:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003564:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003568:	2300      	movs	r3, #0
 800356a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800356e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003572:	4622      	mov	r2, r4
 8003574:	462b      	mov	r3, r5
 8003576:	f04f 0000 	mov.w	r0, #0
 800357a:	f04f 0100 	mov.w	r1, #0
 800357e:	0159      	lsls	r1, r3, #5
 8003580:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003584:	0150      	lsls	r0, r2, #5
 8003586:	4602      	mov	r2, r0
 8003588:	460b      	mov	r3, r1
 800358a:	4621      	mov	r1, r4
 800358c:	1a51      	subs	r1, r2, r1
 800358e:	6439      	str	r1, [r7, #64]	@ 0x40
 8003590:	4629      	mov	r1, r5
 8003592:	eb63 0301 	sbc.w	r3, r3, r1
 8003596:	647b      	str	r3, [r7, #68]	@ 0x44
 8003598:	f04f 0200 	mov.w	r2, #0
 800359c:	f04f 0300 	mov.w	r3, #0
 80035a0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80035a4:	4649      	mov	r1, r9
 80035a6:	018b      	lsls	r3, r1, #6
 80035a8:	4641      	mov	r1, r8
 80035aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80035ae:	4641      	mov	r1, r8
 80035b0:	018a      	lsls	r2, r1, #6
 80035b2:	4641      	mov	r1, r8
 80035b4:	1a51      	subs	r1, r2, r1
 80035b6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80035b8:	4649      	mov	r1, r9
 80035ba:	eb63 0301 	sbc.w	r3, r3, r1
 80035be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80035c0:	f04f 0200 	mov.w	r2, #0
 80035c4:	f04f 0300 	mov.w	r3, #0
 80035c8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80035cc:	4649      	mov	r1, r9
 80035ce:	00cb      	lsls	r3, r1, #3
 80035d0:	4641      	mov	r1, r8
 80035d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035d6:	4641      	mov	r1, r8
 80035d8:	00ca      	lsls	r2, r1, #3
 80035da:	4610      	mov	r0, r2
 80035dc:	4619      	mov	r1, r3
 80035de:	4603      	mov	r3, r0
 80035e0:	4622      	mov	r2, r4
 80035e2:	189b      	adds	r3, r3, r2
 80035e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80035e6:	462b      	mov	r3, r5
 80035e8:	460a      	mov	r2, r1
 80035ea:	eb42 0303 	adc.w	r3, r2, r3
 80035ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80035f0:	f04f 0200 	mov.w	r2, #0
 80035f4:	f04f 0300 	mov.w	r3, #0
 80035f8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80035fc:	4629      	mov	r1, r5
 80035fe:	024b      	lsls	r3, r1, #9
 8003600:	4621      	mov	r1, r4
 8003602:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003606:	4621      	mov	r1, r4
 8003608:	024a      	lsls	r2, r1, #9
 800360a:	4610      	mov	r0, r2
 800360c:	4619      	mov	r1, r3
 800360e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003612:	2200      	movs	r2, #0
 8003614:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003618:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800361c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003620:	f7fd fb32 	bl	8000c88 <__aeabi_uldivmod>
 8003624:	4602      	mov	r2, r0
 8003626:	460b      	mov	r3, r1
 8003628:	4613      	mov	r3, r2
 800362a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800362e:	e067      	b.n	8003700 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003630:	4b75      	ldr	r3, [pc, #468]	@ (8003808 <HAL_RCC_GetSysClockFreq+0x354>)
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	099b      	lsrs	r3, r3, #6
 8003636:	2200      	movs	r2, #0
 8003638:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800363c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003640:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003644:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003648:	67bb      	str	r3, [r7, #120]	@ 0x78
 800364a:	2300      	movs	r3, #0
 800364c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800364e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003652:	4622      	mov	r2, r4
 8003654:	462b      	mov	r3, r5
 8003656:	f04f 0000 	mov.w	r0, #0
 800365a:	f04f 0100 	mov.w	r1, #0
 800365e:	0159      	lsls	r1, r3, #5
 8003660:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003664:	0150      	lsls	r0, r2, #5
 8003666:	4602      	mov	r2, r0
 8003668:	460b      	mov	r3, r1
 800366a:	4621      	mov	r1, r4
 800366c:	1a51      	subs	r1, r2, r1
 800366e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003670:	4629      	mov	r1, r5
 8003672:	eb63 0301 	sbc.w	r3, r3, r1
 8003676:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003678:	f04f 0200 	mov.w	r2, #0
 800367c:	f04f 0300 	mov.w	r3, #0
 8003680:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003684:	4649      	mov	r1, r9
 8003686:	018b      	lsls	r3, r1, #6
 8003688:	4641      	mov	r1, r8
 800368a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800368e:	4641      	mov	r1, r8
 8003690:	018a      	lsls	r2, r1, #6
 8003692:	4641      	mov	r1, r8
 8003694:	ebb2 0a01 	subs.w	sl, r2, r1
 8003698:	4649      	mov	r1, r9
 800369a:	eb63 0b01 	sbc.w	fp, r3, r1
 800369e:	f04f 0200 	mov.w	r2, #0
 80036a2:	f04f 0300 	mov.w	r3, #0
 80036a6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80036aa:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80036ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80036b2:	4692      	mov	sl, r2
 80036b4:	469b      	mov	fp, r3
 80036b6:	4623      	mov	r3, r4
 80036b8:	eb1a 0303 	adds.w	r3, sl, r3
 80036bc:	623b      	str	r3, [r7, #32]
 80036be:	462b      	mov	r3, r5
 80036c0:	eb4b 0303 	adc.w	r3, fp, r3
 80036c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80036c6:	f04f 0200 	mov.w	r2, #0
 80036ca:	f04f 0300 	mov.w	r3, #0
 80036ce:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80036d2:	4629      	mov	r1, r5
 80036d4:	028b      	lsls	r3, r1, #10
 80036d6:	4621      	mov	r1, r4
 80036d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80036dc:	4621      	mov	r1, r4
 80036de:	028a      	lsls	r2, r1, #10
 80036e0:	4610      	mov	r0, r2
 80036e2:	4619      	mov	r1, r3
 80036e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80036e8:	2200      	movs	r2, #0
 80036ea:	673b      	str	r3, [r7, #112]	@ 0x70
 80036ec:	677a      	str	r2, [r7, #116]	@ 0x74
 80036ee:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80036f2:	f7fd fac9 	bl	8000c88 <__aeabi_uldivmod>
 80036f6:	4602      	mov	r2, r0
 80036f8:	460b      	mov	r3, r1
 80036fa:	4613      	mov	r3, r2
 80036fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003700:	4b41      	ldr	r3, [pc, #260]	@ (8003808 <HAL_RCC_GetSysClockFreq+0x354>)
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	0c1b      	lsrs	r3, r3, #16
 8003706:	f003 0303 	and.w	r3, r3, #3
 800370a:	3301      	adds	r3, #1
 800370c:	005b      	lsls	r3, r3, #1
 800370e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8003712:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003716:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800371a:	fbb2 f3f3 	udiv	r3, r2, r3
 800371e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003722:	e0eb      	b.n	80038fc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003724:	4b38      	ldr	r3, [pc, #224]	@ (8003808 <HAL_RCC_GetSysClockFreq+0x354>)
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800372c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003730:	4b35      	ldr	r3, [pc, #212]	@ (8003808 <HAL_RCC_GetSysClockFreq+0x354>)
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d06b      	beq.n	8003814 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800373c:	4b32      	ldr	r3, [pc, #200]	@ (8003808 <HAL_RCC_GetSysClockFreq+0x354>)
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	099b      	lsrs	r3, r3, #6
 8003742:	2200      	movs	r2, #0
 8003744:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003746:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003748:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800374a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800374e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003750:	2300      	movs	r3, #0
 8003752:	667b      	str	r3, [r7, #100]	@ 0x64
 8003754:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003758:	4622      	mov	r2, r4
 800375a:	462b      	mov	r3, r5
 800375c:	f04f 0000 	mov.w	r0, #0
 8003760:	f04f 0100 	mov.w	r1, #0
 8003764:	0159      	lsls	r1, r3, #5
 8003766:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800376a:	0150      	lsls	r0, r2, #5
 800376c:	4602      	mov	r2, r0
 800376e:	460b      	mov	r3, r1
 8003770:	4621      	mov	r1, r4
 8003772:	1a51      	subs	r1, r2, r1
 8003774:	61b9      	str	r1, [r7, #24]
 8003776:	4629      	mov	r1, r5
 8003778:	eb63 0301 	sbc.w	r3, r3, r1
 800377c:	61fb      	str	r3, [r7, #28]
 800377e:	f04f 0200 	mov.w	r2, #0
 8003782:	f04f 0300 	mov.w	r3, #0
 8003786:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800378a:	4659      	mov	r1, fp
 800378c:	018b      	lsls	r3, r1, #6
 800378e:	4651      	mov	r1, sl
 8003790:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003794:	4651      	mov	r1, sl
 8003796:	018a      	lsls	r2, r1, #6
 8003798:	4651      	mov	r1, sl
 800379a:	ebb2 0801 	subs.w	r8, r2, r1
 800379e:	4659      	mov	r1, fp
 80037a0:	eb63 0901 	sbc.w	r9, r3, r1
 80037a4:	f04f 0200 	mov.w	r2, #0
 80037a8:	f04f 0300 	mov.w	r3, #0
 80037ac:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037b0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037b4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037b8:	4690      	mov	r8, r2
 80037ba:	4699      	mov	r9, r3
 80037bc:	4623      	mov	r3, r4
 80037be:	eb18 0303 	adds.w	r3, r8, r3
 80037c2:	613b      	str	r3, [r7, #16]
 80037c4:	462b      	mov	r3, r5
 80037c6:	eb49 0303 	adc.w	r3, r9, r3
 80037ca:	617b      	str	r3, [r7, #20]
 80037cc:	f04f 0200 	mov.w	r2, #0
 80037d0:	f04f 0300 	mov.w	r3, #0
 80037d4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80037d8:	4629      	mov	r1, r5
 80037da:	024b      	lsls	r3, r1, #9
 80037dc:	4621      	mov	r1, r4
 80037de:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80037e2:	4621      	mov	r1, r4
 80037e4:	024a      	lsls	r2, r1, #9
 80037e6:	4610      	mov	r0, r2
 80037e8:	4619      	mov	r1, r3
 80037ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80037ee:	2200      	movs	r2, #0
 80037f0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80037f2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80037f4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80037f8:	f7fd fa46 	bl	8000c88 <__aeabi_uldivmod>
 80037fc:	4602      	mov	r2, r0
 80037fe:	460b      	mov	r3, r1
 8003800:	4613      	mov	r3, r2
 8003802:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003806:	e065      	b.n	80038d4 <HAL_RCC_GetSysClockFreq+0x420>
 8003808:	40023800 	.word	0x40023800
 800380c:	00f42400 	.word	0x00f42400
 8003810:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003814:	4b3d      	ldr	r3, [pc, #244]	@ (800390c <HAL_RCC_GetSysClockFreq+0x458>)
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	099b      	lsrs	r3, r3, #6
 800381a:	2200      	movs	r2, #0
 800381c:	4618      	mov	r0, r3
 800381e:	4611      	mov	r1, r2
 8003820:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003824:	653b      	str	r3, [r7, #80]	@ 0x50
 8003826:	2300      	movs	r3, #0
 8003828:	657b      	str	r3, [r7, #84]	@ 0x54
 800382a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800382e:	4642      	mov	r2, r8
 8003830:	464b      	mov	r3, r9
 8003832:	f04f 0000 	mov.w	r0, #0
 8003836:	f04f 0100 	mov.w	r1, #0
 800383a:	0159      	lsls	r1, r3, #5
 800383c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003840:	0150      	lsls	r0, r2, #5
 8003842:	4602      	mov	r2, r0
 8003844:	460b      	mov	r3, r1
 8003846:	4641      	mov	r1, r8
 8003848:	1a51      	subs	r1, r2, r1
 800384a:	60b9      	str	r1, [r7, #8]
 800384c:	4649      	mov	r1, r9
 800384e:	eb63 0301 	sbc.w	r3, r3, r1
 8003852:	60fb      	str	r3, [r7, #12]
 8003854:	f04f 0200 	mov.w	r2, #0
 8003858:	f04f 0300 	mov.w	r3, #0
 800385c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003860:	4659      	mov	r1, fp
 8003862:	018b      	lsls	r3, r1, #6
 8003864:	4651      	mov	r1, sl
 8003866:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800386a:	4651      	mov	r1, sl
 800386c:	018a      	lsls	r2, r1, #6
 800386e:	4651      	mov	r1, sl
 8003870:	1a54      	subs	r4, r2, r1
 8003872:	4659      	mov	r1, fp
 8003874:	eb63 0501 	sbc.w	r5, r3, r1
 8003878:	f04f 0200 	mov.w	r2, #0
 800387c:	f04f 0300 	mov.w	r3, #0
 8003880:	00eb      	lsls	r3, r5, #3
 8003882:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003886:	00e2      	lsls	r2, r4, #3
 8003888:	4614      	mov	r4, r2
 800388a:	461d      	mov	r5, r3
 800388c:	4643      	mov	r3, r8
 800388e:	18e3      	adds	r3, r4, r3
 8003890:	603b      	str	r3, [r7, #0]
 8003892:	464b      	mov	r3, r9
 8003894:	eb45 0303 	adc.w	r3, r5, r3
 8003898:	607b      	str	r3, [r7, #4]
 800389a:	f04f 0200 	mov.w	r2, #0
 800389e:	f04f 0300 	mov.w	r3, #0
 80038a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038a6:	4629      	mov	r1, r5
 80038a8:	028b      	lsls	r3, r1, #10
 80038aa:	4621      	mov	r1, r4
 80038ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038b0:	4621      	mov	r1, r4
 80038b2:	028a      	lsls	r2, r1, #10
 80038b4:	4610      	mov	r0, r2
 80038b6:	4619      	mov	r1, r3
 80038b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80038bc:	2200      	movs	r2, #0
 80038be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80038c0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80038c2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80038c6:	f7fd f9df 	bl	8000c88 <__aeabi_uldivmod>
 80038ca:	4602      	mov	r2, r0
 80038cc:	460b      	mov	r3, r1
 80038ce:	4613      	mov	r3, r2
 80038d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80038d4:	4b0d      	ldr	r3, [pc, #52]	@ (800390c <HAL_RCC_GetSysClockFreq+0x458>)
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	0f1b      	lsrs	r3, r3, #28
 80038da:	f003 0307 	and.w	r3, r3, #7
 80038de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80038e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80038e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80038ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80038f2:	e003      	b.n	80038fc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038f4:	4b06      	ldr	r3, [pc, #24]	@ (8003910 <HAL_RCC_GetSysClockFreq+0x45c>)
 80038f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80038fa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038fc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003900:	4618      	mov	r0, r3
 8003902:	37b8      	adds	r7, #184	@ 0xb8
 8003904:	46bd      	mov	sp, r7
 8003906:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800390a:	bf00      	nop
 800390c:	40023800 	.word	0x40023800
 8003910:	00f42400 	.word	0x00f42400

08003914 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b086      	sub	sp, #24
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d101      	bne.n	8003926 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e28d      	b.n	8003e42 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0301 	and.w	r3, r3, #1
 800392e:	2b00      	cmp	r3, #0
 8003930:	f000 8083 	beq.w	8003a3a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003934:	4b94      	ldr	r3, [pc, #592]	@ (8003b88 <HAL_RCC_OscConfig+0x274>)
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	f003 030c 	and.w	r3, r3, #12
 800393c:	2b04      	cmp	r3, #4
 800393e:	d019      	beq.n	8003974 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003940:	4b91      	ldr	r3, [pc, #580]	@ (8003b88 <HAL_RCC_OscConfig+0x274>)
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	f003 030c 	and.w	r3, r3, #12
        || \
 8003948:	2b08      	cmp	r3, #8
 800394a:	d106      	bne.n	800395a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800394c:	4b8e      	ldr	r3, [pc, #568]	@ (8003b88 <HAL_RCC_OscConfig+0x274>)
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003954:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003958:	d00c      	beq.n	8003974 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800395a:	4b8b      	ldr	r3, [pc, #556]	@ (8003b88 <HAL_RCC_OscConfig+0x274>)
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003962:	2b0c      	cmp	r3, #12
 8003964:	d112      	bne.n	800398c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003966:	4b88      	ldr	r3, [pc, #544]	@ (8003b88 <HAL_RCC_OscConfig+0x274>)
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800396e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003972:	d10b      	bne.n	800398c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003974:	4b84      	ldr	r3, [pc, #528]	@ (8003b88 <HAL_RCC_OscConfig+0x274>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d05b      	beq.n	8003a38 <HAL_RCC_OscConfig+0x124>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d157      	bne.n	8003a38 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e25a      	b.n	8003e42 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003994:	d106      	bne.n	80039a4 <HAL_RCC_OscConfig+0x90>
 8003996:	4b7c      	ldr	r3, [pc, #496]	@ (8003b88 <HAL_RCC_OscConfig+0x274>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a7b      	ldr	r2, [pc, #492]	@ (8003b88 <HAL_RCC_OscConfig+0x274>)
 800399c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039a0:	6013      	str	r3, [r2, #0]
 80039a2:	e01d      	b.n	80039e0 <HAL_RCC_OscConfig+0xcc>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039ac:	d10c      	bne.n	80039c8 <HAL_RCC_OscConfig+0xb4>
 80039ae:	4b76      	ldr	r3, [pc, #472]	@ (8003b88 <HAL_RCC_OscConfig+0x274>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a75      	ldr	r2, [pc, #468]	@ (8003b88 <HAL_RCC_OscConfig+0x274>)
 80039b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80039b8:	6013      	str	r3, [r2, #0]
 80039ba:	4b73      	ldr	r3, [pc, #460]	@ (8003b88 <HAL_RCC_OscConfig+0x274>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a72      	ldr	r2, [pc, #456]	@ (8003b88 <HAL_RCC_OscConfig+0x274>)
 80039c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039c4:	6013      	str	r3, [r2, #0]
 80039c6:	e00b      	b.n	80039e0 <HAL_RCC_OscConfig+0xcc>
 80039c8:	4b6f      	ldr	r3, [pc, #444]	@ (8003b88 <HAL_RCC_OscConfig+0x274>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a6e      	ldr	r2, [pc, #440]	@ (8003b88 <HAL_RCC_OscConfig+0x274>)
 80039ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039d2:	6013      	str	r3, [r2, #0]
 80039d4:	4b6c      	ldr	r3, [pc, #432]	@ (8003b88 <HAL_RCC_OscConfig+0x274>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a6b      	ldr	r2, [pc, #428]	@ (8003b88 <HAL_RCC_OscConfig+0x274>)
 80039da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d013      	beq.n	8003a10 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e8:	f7fe f878 	bl	8001adc <HAL_GetTick>
 80039ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ee:	e008      	b.n	8003a02 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039f0:	f7fe f874 	bl	8001adc <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	2b64      	cmp	r3, #100	@ 0x64
 80039fc:	d901      	bls.n	8003a02 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e21f      	b.n	8003e42 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a02:	4b61      	ldr	r3, [pc, #388]	@ (8003b88 <HAL_RCC_OscConfig+0x274>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d0f0      	beq.n	80039f0 <HAL_RCC_OscConfig+0xdc>
 8003a0e:	e014      	b.n	8003a3a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a10:	f7fe f864 	bl	8001adc <HAL_GetTick>
 8003a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a16:	e008      	b.n	8003a2a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a18:	f7fe f860 	bl	8001adc <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	2b64      	cmp	r3, #100	@ 0x64
 8003a24:	d901      	bls.n	8003a2a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e20b      	b.n	8003e42 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a2a:	4b57      	ldr	r3, [pc, #348]	@ (8003b88 <HAL_RCC_OscConfig+0x274>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d1f0      	bne.n	8003a18 <HAL_RCC_OscConfig+0x104>
 8003a36:	e000      	b.n	8003a3a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0302 	and.w	r3, r3, #2
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d06f      	beq.n	8003b26 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003a46:	4b50      	ldr	r3, [pc, #320]	@ (8003b88 <HAL_RCC_OscConfig+0x274>)
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f003 030c 	and.w	r3, r3, #12
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d017      	beq.n	8003a82 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003a52:	4b4d      	ldr	r3, [pc, #308]	@ (8003b88 <HAL_RCC_OscConfig+0x274>)
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	f003 030c 	and.w	r3, r3, #12
        || \
 8003a5a:	2b08      	cmp	r3, #8
 8003a5c:	d105      	bne.n	8003a6a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003a5e:	4b4a      	ldr	r3, [pc, #296]	@ (8003b88 <HAL_RCC_OscConfig+0x274>)
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d00b      	beq.n	8003a82 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a6a:	4b47      	ldr	r3, [pc, #284]	@ (8003b88 <HAL_RCC_OscConfig+0x274>)
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003a72:	2b0c      	cmp	r3, #12
 8003a74:	d11c      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a76:	4b44      	ldr	r3, [pc, #272]	@ (8003b88 <HAL_RCC_OscConfig+0x274>)
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d116      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a82:	4b41      	ldr	r3, [pc, #260]	@ (8003b88 <HAL_RCC_OscConfig+0x274>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0302 	and.w	r3, r3, #2
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d005      	beq.n	8003a9a <HAL_RCC_OscConfig+0x186>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d001      	beq.n	8003a9a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e1d3      	b.n	8003e42 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a9a:	4b3b      	ldr	r3, [pc, #236]	@ (8003b88 <HAL_RCC_OscConfig+0x274>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	00db      	lsls	r3, r3, #3
 8003aa8:	4937      	ldr	r1, [pc, #220]	@ (8003b88 <HAL_RCC_OscConfig+0x274>)
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aae:	e03a      	b.n	8003b26 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d020      	beq.n	8003afa <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ab8:	4b34      	ldr	r3, [pc, #208]	@ (8003b8c <HAL_RCC_OscConfig+0x278>)
 8003aba:	2201      	movs	r2, #1
 8003abc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003abe:	f7fe f80d 	bl	8001adc <HAL_GetTick>
 8003ac2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ac4:	e008      	b.n	8003ad8 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ac6:	f7fe f809 	bl	8001adc <HAL_GetTick>
 8003aca:	4602      	mov	r2, r0
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	2b02      	cmp	r3, #2
 8003ad2:	d901      	bls.n	8003ad8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	e1b4      	b.n	8003e42 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ad8:	4b2b      	ldr	r3, [pc, #172]	@ (8003b88 <HAL_RCC_OscConfig+0x274>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0302 	and.w	r3, r3, #2
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d0f0      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ae4:	4b28      	ldr	r3, [pc, #160]	@ (8003b88 <HAL_RCC_OscConfig+0x274>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	691b      	ldr	r3, [r3, #16]
 8003af0:	00db      	lsls	r3, r3, #3
 8003af2:	4925      	ldr	r1, [pc, #148]	@ (8003b88 <HAL_RCC_OscConfig+0x274>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	600b      	str	r3, [r1, #0]
 8003af8:	e015      	b.n	8003b26 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003afa:	4b24      	ldr	r3, [pc, #144]	@ (8003b8c <HAL_RCC_OscConfig+0x278>)
 8003afc:	2200      	movs	r2, #0
 8003afe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b00:	f7fd ffec 	bl	8001adc <HAL_GetTick>
 8003b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b06:	e008      	b.n	8003b1a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b08:	f7fd ffe8 	bl	8001adc <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d901      	bls.n	8003b1a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e193      	b.n	8003e42 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b1a:	4b1b      	ldr	r3, [pc, #108]	@ (8003b88 <HAL_RCC_OscConfig+0x274>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d1f0      	bne.n	8003b08 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0308 	and.w	r3, r3, #8
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d036      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	695b      	ldr	r3, [r3, #20]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d016      	beq.n	8003b68 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b3a:	4b15      	ldr	r3, [pc, #84]	@ (8003b90 <HAL_RCC_OscConfig+0x27c>)
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b40:	f7fd ffcc 	bl	8001adc <HAL_GetTick>
 8003b44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b46:	e008      	b.n	8003b5a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b48:	f7fd ffc8 	bl	8001adc <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d901      	bls.n	8003b5a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e173      	b.n	8003e42 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b5a:	4b0b      	ldr	r3, [pc, #44]	@ (8003b88 <HAL_RCC_OscConfig+0x274>)
 8003b5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b5e:	f003 0302 	and.w	r3, r3, #2
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d0f0      	beq.n	8003b48 <HAL_RCC_OscConfig+0x234>
 8003b66:	e01b      	b.n	8003ba0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b68:	4b09      	ldr	r3, [pc, #36]	@ (8003b90 <HAL_RCC_OscConfig+0x27c>)
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b6e:	f7fd ffb5 	bl	8001adc <HAL_GetTick>
 8003b72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b74:	e00e      	b.n	8003b94 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b76:	f7fd ffb1 	bl	8001adc <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d907      	bls.n	8003b94 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	e15c      	b.n	8003e42 <HAL_RCC_OscConfig+0x52e>
 8003b88:	40023800 	.word	0x40023800
 8003b8c:	42470000 	.word	0x42470000
 8003b90:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b94:	4b8a      	ldr	r3, [pc, #552]	@ (8003dc0 <HAL_RCC_OscConfig+0x4ac>)
 8003b96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b98:	f003 0302 	and.w	r3, r3, #2
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d1ea      	bne.n	8003b76 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0304 	and.w	r3, r3, #4
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	f000 8097 	beq.w	8003cdc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bb2:	4b83      	ldr	r3, [pc, #524]	@ (8003dc0 <HAL_RCC_OscConfig+0x4ac>)
 8003bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d10f      	bne.n	8003bde <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	60bb      	str	r3, [r7, #8]
 8003bc2:	4b7f      	ldr	r3, [pc, #508]	@ (8003dc0 <HAL_RCC_OscConfig+0x4ac>)
 8003bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bc6:	4a7e      	ldr	r2, [pc, #504]	@ (8003dc0 <HAL_RCC_OscConfig+0x4ac>)
 8003bc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bcc:	6413      	str	r3, [r2, #64]	@ 0x40
 8003bce:	4b7c      	ldr	r3, [pc, #496]	@ (8003dc0 <HAL_RCC_OscConfig+0x4ac>)
 8003bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bd6:	60bb      	str	r3, [r7, #8]
 8003bd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bde:	4b79      	ldr	r3, [pc, #484]	@ (8003dc4 <HAL_RCC_OscConfig+0x4b0>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d118      	bne.n	8003c1c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bea:	4b76      	ldr	r3, [pc, #472]	@ (8003dc4 <HAL_RCC_OscConfig+0x4b0>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a75      	ldr	r2, [pc, #468]	@ (8003dc4 <HAL_RCC_OscConfig+0x4b0>)
 8003bf0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bf4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bf6:	f7fd ff71 	bl	8001adc <HAL_GetTick>
 8003bfa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bfc:	e008      	b.n	8003c10 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bfe:	f7fd ff6d 	bl	8001adc <HAL_GetTick>
 8003c02:	4602      	mov	r2, r0
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	d901      	bls.n	8003c10 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003c0c:	2303      	movs	r3, #3
 8003c0e:	e118      	b.n	8003e42 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c10:	4b6c      	ldr	r3, [pc, #432]	@ (8003dc4 <HAL_RCC_OscConfig+0x4b0>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d0f0      	beq.n	8003bfe <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d106      	bne.n	8003c32 <HAL_RCC_OscConfig+0x31e>
 8003c24:	4b66      	ldr	r3, [pc, #408]	@ (8003dc0 <HAL_RCC_OscConfig+0x4ac>)
 8003c26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c28:	4a65      	ldr	r2, [pc, #404]	@ (8003dc0 <HAL_RCC_OscConfig+0x4ac>)
 8003c2a:	f043 0301 	orr.w	r3, r3, #1
 8003c2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c30:	e01c      	b.n	8003c6c <HAL_RCC_OscConfig+0x358>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	2b05      	cmp	r3, #5
 8003c38:	d10c      	bne.n	8003c54 <HAL_RCC_OscConfig+0x340>
 8003c3a:	4b61      	ldr	r3, [pc, #388]	@ (8003dc0 <HAL_RCC_OscConfig+0x4ac>)
 8003c3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c3e:	4a60      	ldr	r2, [pc, #384]	@ (8003dc0 <HAL_RCC_OscConfig+0x4ac>)
 8003c40:	f043 0304 	orr.w	r3, r3, #4
 8003c44:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c46:	4b5e      	ldr	r3, [pc, #376]	@ (8003dc0 <HAL_RCC_OscConfig+0x4ac>)
 8003c48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c4a:	4a5d      	ldr	r2, [pc, #372]	@ (8003dc0 <HAL_RCC_OscConfig+0x4ac>)
 8003c4c:	f043 0301 	orr.w	r3, r3, #1
 8003c50:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c52:	e00b      	b.n	8003c6c <HAL_RCC_OscConfig+0x358>
 8003c54:	4b5a      	ldr	r3, [pc, #360]	@ (8003dc0 <HAL_RCC_OscConfig+0x4ac>)
 8003c56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c58:	4a59      	ldr	r2, [pc, #356]	@ (8003dc0 <HAL_RCC_OscConfig+0x4ac>)
 8003c5a:	f023 0301 	bic.w	r3, r3, #1
 8003c5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c60:	4b57      	ldr	r3, [pc, #348]	@ (8003dc0 <HAL_RCC_OscConfig+0x4ac>)
 8003c62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c64:	4a56      	ldr	r2, [pc, #344]	@ (8003dc0 <HAL_RCC_OscConfig+0x4ac>)
 8003c66:	f023 0304 	bic.w	r3, r3, #4
 8003c6a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d015      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c74:	f7fd ff32 	bl	8001adc <HAL_GetTick>
 8003c78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c7a:	e00a      	b.n	8003c92 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c7c:	f7fd ff2e 	bl	8001adc <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e0d7      	b.n	8003e42 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c92:	4b4b      	ldr	r3, [pc, #300]	@ (8003dc0 <HAL_RCC_OscConfig+0x4ac>)
 8003c94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c96:	f003 0302 	and.w	r3, r3, #2
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d0ee      	beq.n	8003c7c <HAL_RCC_OscConfig+0x368>
 8003c9e:	e014      	b.n	8003cca <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ca0:	f7fd ff1c 	bl	8001adc <HAL_GetTick>
 8003ca4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ca6:	e00a      	b.n	8003cbe <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ca8:	f7fd ff18 	bl	8001adc <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e0c1      	b.n	8003e42 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cbe:	4b40      	ldr	r3, [pc, #256]	@ (8003dc0 <HAL_RCC_OscConfig+0x4ac>)
 8003cc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cc2:	f003 0302 	and.w	r3, r3, #2
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1ee      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003cca:	7dfb      	ldrb	r3, [r7, #23]
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d105      	bne.n	8003cdc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cd0:	4b3b      	ldr	r3, [pc, #236]	@ (8003dc0 <HAL_RCC_OscConfig+0x4ac>)
 8003cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cd4:	4a3a      	ldr	r2, [pc, #232]	@ (8003dc0 <HAL_RCC_OscConfig+0x4ac>)
 8003cd6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003cda:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	699b      	ldr	r3, [r3, #24]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	f000 80ad 	beq.w	8003e40 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ce6:	4b36      	ldr	r3, [pc, #216]	@ (8003dc0 <HAL_RCC_OscConfig+0x4ac>)
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	f003 030c 	and.w	r3, r3, #12
 8003cee:	2b08      	cmp	r3, #8
 8003cf0:	d060      	beq.n	8003db4 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	699b      	ldr	r3, [r3, #24]
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d145      	bne.n	8003d86 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cfa:	4b33      	ldr	r3, [pc, #204]	@ (8003dc8 <HAL_RCC_OscConfig+0x4b4>)
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d00:	f7fd feec 	bl	8001adc <HAL_GetTick>
 8003d04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d06:	e008      	b.n	8003d1a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d08:	f7fd fee8 	bl	8001adc <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d901      	bls.n	8003d1a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e093      	b.n	8003e42 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d1a:	4b29      	ldr	r3, [pc, #164]	@ (8003dc0 <HAL_RCC_OscConfig+0x4ac>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d1f0      	bne.n	8003d08 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	69da      	ldr	r2, [r3, #28]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a1b      	ldr	r3, [r3, #32]
 8003d2e:	431a      	orrs	r2, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d34:	019b      	lsls	r3, r3, #6
 8003d36:	431a      	orrs	r2, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d3c:	085b      	lsrs	r3, r3, #1
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	041b      	lsls	r3, r3, #16
 8003d42:	431a      	orrs	r2, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d48:	061b      	lsls	r3, r3, #24
 8003d4a:	431a      	orrs	r2, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d50:	071b      	lsls	r3, r3, #28
 8003d52:	491b      	ldr	r1, [pc, #108]	@ (8003dc0 <HAL_RCC_OscConfig+0x4ac>)
 8003d54:	4313      	orrs	r3, r2
 8003d56:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d58:	4b1b      	ldr	r3, [pc, #108]	@ (8003dc8 <HAL_RCC_OscConfig+0x4b4>)
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d5e:	f7fd febd 	bl	8001adc <HAL_GetTick>
 8003d62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d64:	e008      	b.n	8003d78 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d66:	f7fd feb9 	bl	8001adc <HAL_GetTick>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	d901      	bls.n	8003d78 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003d74:	2303      	movs	r3, #3
 8003d76:	e064      	b.n	8003e42 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d78:	4b11      	ldr	r3, [pc, #68]	@ (8003dc0 <HAL_RCC_OscConfig+0x4ac>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d0f0      	beq.n	8003d66 <HAL_RCC_OscConfig+0x452>
 8003d84:	e05c      	b.n	8003e40 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d86:	4b10      	ldr	r3, [pc, #64]	@ (8003dc8 <HAL_RCC_OscConfig+0x4b4>)
 8003d88:	2200      	movs	r2, #0
 8003d8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d8c:	f7fd fea6 	bl	8001adc <HAL_GetTick>
 8003d90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d92:	e008      	b.n	8003da6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d94:	f7fd fea2 	bl	8001adc <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d901      	bls.n	8003da6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e04d      	b.n	8003e42 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003da6:	4b06      	ldr	r3, [pc, #24]	@ (8003dc0 <HAL_RCC_OscConfig+0x4ac>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d1f0      	bne.n	8003d94 <HAL_RCC_OscConfig+0x480>
 8003db2:	e045      	b.n	8003e40 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	699b      	ldr	r3, [r3, #24]
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d107      	bne.n	8003dcc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e040      	b.n	8003e42 <HAL_RCC_OscConfig+0x52e>
 8003dc0:	40023800 	.word	0x40023800
 8003dc4:	40007000 	.word	0x40007000
 8003dc8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003dcc:	4b1f      	ldr	r3, [pc, #124]	@ (8003e4c <HAL_RCC_OscConfig+0x538>)
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	699b      	ldr	r3, [r3, #24]
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d030      	beq.n	8003e3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d129      	bne.n	8003e3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d122      	bne.n	8003e3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003df6:	68fa      	ldr	r2, [r7, #12]
 8003df8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003e02:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d119      	bne.n	8003e3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e12:	085b      	lsrs	r3, r3, #1
 8003e14:	3b01      	subs	r3, #1
 8003e16:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d10f      	bne.n	8003e3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e26:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d107      	bne.n	8003e3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e36:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d001      	beq.n	8003e40 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e000      	b.n	8003e42 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3718      	adds	r7, #24
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	40023800 	.word	0x40023800

08003e50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b082      	sub	sp, #8
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d101      	bne.n	8003e62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e042      	b.n	8003ee8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d106      	bne.n	8003e7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f7fd fc50 	bl	800171c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2224      	movs	r2, #36	@ 0x24
 8003e80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	68da      	ldr	r2, [r3, #12]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003e92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f000 f973 	bl	8004180 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	691a      	ldr	r2, [r3, #16]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003ea8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	695a      	ldr	r2, [r3, #20]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003eb8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	68da      	ldr	r2, [r3, #12]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003ec8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2220      	movs	r2, #32
 8003ed4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2220      	movs	r2, #32
 8003edc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003ee6:	2300      	movs	r3, #0
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3708      	adds	r7, #8
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b08a      	sub	sp, #40	@ 0x28
 8003ef4:	af02      	add	r7, sp, #8
 8003ef6:	60f8      	str	r0, [r7, #12]
 8003ef8:	60b9      	str	r1, [r7, #8]
 8003efa:	603b      	str	r3, [r7, #0]
 8003efc:	4613      	mov	r3, r2
 8003efe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003f00:	2300      	movs	r3, #0
 8003f02:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	2b20      	cmp	r3, #32
 8003f0e:	d175      	bne.n	8003ffc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d002      	beq.n	8003f1c <HAL_UART_Transmit+0x2c>
 8003f16:	88fb      	ldrh	r3, [r7, #6]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d101      	bne.n	8003f20 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e06e      	b.n	8003ffe <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2200      	movs	r2, #0
 8003f24:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2221      	movs	r2, #33	@ 0x21
 8003f2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f2e:	f7fd fdd5 	bl	8001adc <HAL_GetTick>
 8003f32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	88fa      	ldrh	r2, [r7, #6]
 8003f38:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	88fa      	ldrh	r2, [r7, #6]
 8003f3e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f48:	d108      	bne.n	8003f5c <HAL_UART_Transmit+0x6c>
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	691b      	ldr	r3, [r3, #16]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d104      	bne.n	8003f5c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003f52:	2300      	movs	r3, #0
 8003f54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	61bb      	str	r3, [r7, #24]
 8003f5a:	e003      	b.n	8003f64 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f60:	2300      	movs	r3, #0
 8003f62:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003f64:	e02e      	b.n	8003fc4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	9300      	str	r3, [sp, #0]
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	2180      	movs	r1, #128	@ 0x80
 8003f70:	68f8      	ldr	r0, [r7, #12]
 8003f72:	f000 f848 	bl	8004006 <UART_WaitOnFlagUntilTimeout>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d005      	beq.n	8003f88 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2220      	movs	r2, #32
 8003f80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003f84:	2303      	movs	r3, #3
 8003f86:	e03a      	b.n	8003ffe <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d10b      	bne.n	8003fa6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	881b      	ldrh	r3, [r3, #0]
 8003f92:	461a      	mov	r2, r3
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f9c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	3302      	adds	r3, #2
 8003fa2:	61bb      	str	r3, [r7, #24]
 8003fa4:	e007      	b.n	8003fb6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	781a      	ldrb	r2, [r3, #0]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	3301      	adds	r3, #1
 8003fb4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	3b01      	subs	r3, #1
 8003fbe:	b29a      	uxth	r2, r3
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d1cb      	bne.n	8003f66 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	9300      	str	r3, [sp, #0]
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	2140      	movs	r1, #64	@ 0x40
 8003fd8:	68f8      	ldr	r0, [r7, #12]
 8003fda:	f000 f814 	bl	8004006 <UART_WaitOnFlagUntilTimeout>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d005      	beq.n	8003ff0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2220      	movs	r2, #32
 8003fe8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e006      	b.n	8003ffe <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2220      	movs	r2, #32
 8003ff4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	e000      	b.n	8003ffe <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003ffc:	2302      	movs	r3, #2
  }
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3720      	adds	r7, #32
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}

08004006 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004006:	b580      	push	{r7, lr}
 8004008:	b086      	sub	sp, #24
 800400a:	af00      	add	r7, sp, #0
 800400c:	60f8      	str	r0, [r7, #12]
 800400e:	60b9      	str	r1, [r7, #8]
 8004010:	603b      	str	r3, [r7, #0]
 8004012:	4613      	mov	r3, r2
 8004014:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004016:	e03b      	b.n	8004090 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004018:	6a3b      	ldr	r3, [r7, #32]
 800401a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800401e:	d037      	beq.n	8004090 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004020:	f7fd fd5c 	bl	8001adc <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	6a3a      	ldr	r2, [r7, #32]
 800402c:	429a      	cmp	r2, r3
 800402e:	d302      	bcc.n	8004036 <UART_WaitOnFlagUntilTimeout+0x30>
 8004030:	6a3b      	ldr	r3, [r7, #32]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d101      	bne.n	800403a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e03a      	b.n	80040b0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	f003 0304 	and.w	r3, r3, #4
 8004044:	2b00      	cmp	r3, #0
 8004046:	d023      	beq.n	8004090 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	2b80      	cmp	r3, #128	@ 0x80
 800404c:	d020      	beq.n	8004090 <UART_WaitOnFlagUntilTimeout+0x8a>
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	2b40      	cmp	r3, #64	@ 0x40
 8004052:	d01d      	beq.n	8004090 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0308 	and.w	r3, r3, #8
 800405e:	2b08      	cmp	r3, #8
 8004060:	d116      	bne.n	8004090 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004062:	2300      	movs	r3, #0
 8004064:	617b      	str	r3, [r7, #20]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	617b      	str	r3, [r7, #20]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	617b      	str	r3, [r7, #20]
 8004076:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004078:	68f8      	ldr	r0, [r7, #12]
 800407a:	f000 f81d 	bl	80040b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2208      	movs	r2, #8
 8004082:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2200      	movs	r2, #0
 8004088:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e00f      	b.n	80040b0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	4013      	ands	r3, r2
 800409a:	68ba      	ldr	r2, [r7, #8]
 800409c:	429a      	cmp	r2, r3
 800409e:	bf0c      	ite	eq
 80040a0:	2301      	moveq	r3, #1
 80040a2:	2300      	movne	r3, #0
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	461a      	mov	r2, r3
 80040a8:	79fb      	ldrb	r3, [r7, #7]
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d0b4      	beq.n	8004018 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040ae:	2300      	movs	r3, #0
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3718      	adds	r7, #24
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}

080040b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b095      	sub	sp, #84	@ 0x54
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	330c      	adds	r3, #12
 80040c6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040ca:	e853 3f00 	ldrex	r3, [r3]
 80040ce:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80040d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040d2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80040d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	330c      	adds	r3, #12
 80040de:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80040e0:	643a      	str	r2, [r7, #64]	@ 0x40
 80040e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80040e6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80040e8:	e841 2300 	strex	r3, r2, [r1]
 80040ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80040ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d1e5      	bne.n	80040c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	3314      	adds	r3, #20
 80040fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040fc:	6a3b      	ldr	r3, [r7, #32]
 80040fe:	e853 3f00 	ldrex	r3, [r3]
 8004102:	61fb      	str	r3, [r7, #28]
   return(result);
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	f023 0301 	bic.w	r3, r3, #1
 800410a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	3314      	adds	r3, #20
 8004112:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004114:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004116:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004118:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800411a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800411c:	e841 2300 	strex	r3, r2, [r1]
 8004120:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004124:	2b00      	cmp	r3, #0
 8004126:	d1e5      	bne.n	80040f4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800412c:	2b01      	cmp	r3, #1
 800412e:	d119      	bne.n	8004164 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	330c      	adds	r3, #12
 8004136:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	e853 3f00 	ldrex	r3, [r3]
 800413e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	f023 0310 	bic.w	r3, r3, #16
 8004146:	647b      	str	r3, [r7, #68]	@ 0x44
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	330c      	adds	r3, #12
 800414e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004150:	61ba      	str	r2, [r7, #24]
 8004152:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004154:	6979      	ldr	r1, [r7, #20]
 8004156:	69ba      	ldr	r2, [r7, #24]
 8004158:	e841 2300 	strex	r3, r2, [r1]
 800415c:	613b      	str	r3, [r7, #16]
   return(result);
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d1e5      	bne.n	8004130 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2220      	movs	r2, #32
 8004168:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004172:	bf00      	nop
 8004174:	3754      	adds	r7, #84	@ 0x54
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr
	...

08004180 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004180:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004184:	b0c0      	sub	sp, #256	@ 0x100
 8004186:	af00      	add	r7, sp, #0
 8004188:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800418c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	691b      	ldr	r3, [r3, #16]
 8004194:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800419c:	68d9      	ldr	r1, [r3, #12]
 800419e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	ea40 0301 	orr.w	r3, r0, r1
 80041a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80041aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041ae:	689a      	ldr	r2, [r3, #8]
 80041b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	431a      	orrs	r2, r3
 80041b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041bc:	695b      	ldr	r3, [r3, #20]
 80041be:	431a      	orrs	r2, r3
 80041c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041c4:	69db      	ldr	r3, [r3, #28]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80041cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80041d8:	f021 010c 	bic.w	r1, r1, #12
 80041dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80041e6:	430b      	orrs	r3, r1
 80041e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80041ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	695b      	ldr	r3, [r3, #20]
 80041f2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80041f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041fa:	6999      	ldr	r1, [r3, #24]
 80041fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	ea40 0301 	orr.w	r3, r0, r1
 8004206:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	4b8f      	ldr	r3, [pc, #572]	@ (800444c <UART_SetConfig+0x2cc>)
 8004210:	429a      	cmp	r2, r3
 8004212:	d005      	beq.n	8004220 <UART_SetConfig+0xa0>
 8004214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	4b8d      	ldr	r3, [pc, #564]	@ (8004450 <UART_SetConfig+0x2d0>)
 800421c:	429a      	cmp	r2, r3
 800421e:	d104      	bne.n	800422a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004220:	f7ff f934 	bl	800348c <HAL_RCC_GetPCLK2Freq>
 8004224:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004228:	e003      	b.n	8004232 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800422a:	f7ff f91b 	bl	8003464 <HAL_RCC_GetPCLK1Freq>
 800422e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004232:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004236:	69db      	ldr	r3, [r3, #28]
 8004238:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800423c:	f040 810c 	bne.w	8004458 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004240:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004244:	2200      	movs	r2, #0
 8004246:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800424a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800424e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004252:	4622      	mov	r2, r4
 8004254:	462b      	mov	r3, r5
 8004256:	1891      	adds	r1, r2, r2
 8004258:	65b9      	str	r1, [r7, #88]	@ 0x58
 800425a:	415b      	adcs	r3, r3
 800425c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800425e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004262:	4621      	mov	r1, r4
 8004264:	eb12 0801 	adds.w	r8, r2, r1
 8004268:	4629      	mov	r1, r5
 800426a:	eb43 0901 	adc.w	r9, r3, r1
 800426e:	f04f 0200 	mov.w	r2, #0
 8004272:	f04f 0300 	mov.w	r3, #0
 8004276:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800427a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800427e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004282:	4690      	mov	r8, r2
 8004284:	4699      	mov	r9, r3
 8004286:	4623      	mov	r3, r4
 8004288:	eb18 0303 	adds.w	r3, r8, r3
 800428c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004290:	462b      	mov	r3, r5
 8004292:	eb49 0303 	adc.w	r3, r9, r3
 8004296:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800429a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80042a6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80042aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80042ae:	460b      	mov	r3, r1
 80042b0:	18db      	adds	r3, r3, r3
 80042b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80042b4:	4613      	mov	r3, r2
 80042b6:	eb42 0303 	adc.w	r3, r2, r3
 80042ba:	657b      	str	r3, [r7, #84]	@ 0x54
 80042bc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80042c0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80042c4:	f7fc fce0 	bl	8000c88 <__aeabi_uldivmod>
 80042c8:	4602      	mov	r2, r0
 80042ca:	460b      	mov	r3, r1
 80042cc:	4b61      	ldr	r3, [pc, #388]	@ (8004454 <UART_SetConfig+0x2d4>)
 80042ce:	fba3 2302 	umull	r2, r3, r3, r2
 80042d2:	095b      	lsrs	r3, r3, #5
 80042d4:	011c      	lsls	r4, r3, #4
 80042d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042da:	2200      	movs	r2, #0
 80042dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80042e0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80042e4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80042e8:	4642      	mov	r2, r8
 80042ea:	464b      	mov	r3, r9
 80042ec:	1891      	adds	r1, r2, r2
 80042ee:	64b9      	str	r1, [r7, #72]	@ 0x48
 80042f0:	415b      	adcs	r3, r3
 80042f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042f4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80042f8:	4641      	mov	r1, r8
 80042fa:	eb12 0a01 	adds.w	sl, r2, r1
 80042fe:	4649      	mov	r1, r9
 8004300:	eb43 0b01 	adc.w	fp, r3, r1
 8004304:	f04f 0200 	mov.w	r2, #0
 8004308:	f04f 0300 	mov.w	r3, #0
 800430c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004310:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004314:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004318:	4692      	mov	sl, r2
 800431a:	469b      	mov	fp, r3
 800431c:	4643      	mov	r3, r8
 800431e:	eb1a 0303 	adds.w	r3, sl, r3
 8004322:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004326:	464b      	mov	r3, r9
 8004328:	eb4b 0303 	adc.w	r3, fp, r3
 800432c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800433c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004340:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004344:	460b      	mov	r3, r1
 8004346:	18db      	adds	r3, r3, r3
 8004348:	643b      	str	r3, [r7, #64]	@ 0x40
 800434a:	4613      	mov	r3, r2
 800434c:	eb42 0303 	adc.w	r3, r2, r3
 8004350:	647b      	str	r3, [r7, #68]	@ 0x44
 8004352:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004356:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800435a:	f7fc fc95 	bl	8000c88 <__aeabi_uldivmod>
 800435e:	4602      	mov	r2, r0
 8004360:	460b      	mov	r3, r1
 8004362:	4611      	mov	r1, r2
 8004364:	4b3b      	ldr	r3, [pc, #236]	@ (8004454 <UART_SetConfig+0x2d4>)
 8004366:	fba3 2301 	umull	r2, r3, r3, r1
 800436a:	095b      	lsrs	r3, r3, #5
 800436c:	2264      	movs	r2, #100	@ 0x64
 800436e:	fb02 f303 	mul.w	r3, r2, r3
 8004372:	1acb      	subs	r3, r1, r3
 8004374:	00db      	lsls	r3, r3, #3
 8004376:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800437a:	4b36      	ldr	r3, [pc, #216]	@ (8004454 <UART_SetConfig+0x2d4>)
 800437c:	fba3 2302 	umull	r2, r3, r3, r2
 8004380:	095b      	lsrs	r3, r3, #5
 8004382:	005b      	lsls	r3, r3, #1
 8004384:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004388:	441c      	add	r4, r3
 800438a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800438e:	2200      	movs	r2, #0
 8004390:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004394:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004398:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800439c:	4642      	mov	r2, r8
 800439e:	464b      	mov	r3, r9
 80043a0:	1891      	adds	r1, r2, r2
 80043a2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80043a4:	415b      	adcs	r3, r3
 80043a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80043a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80043ac:	4641      	mov	r1, r8
 80043ae:	1851      	adds	r1, r2, r1
 80043b0:	6339      	str	r1, [r7, #48]	@ 0x30
 80043b2:	4649      	mov	r1, r9
 80043b4:	414b      	adcs	r3, r1
 80043b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80043b8:	f04f 0200 	mov.w	r2, #0
 80043bc:	f04f 0300 	mov.w	r3, #0
 80043c0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80043c4:	4659      	mov	r1, fp
 80043c6:	00cb      	lsls	r3, r1, #3
 80043c8:	4651      	mov	r1, sl
 80043ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043ce:	4651      	mov	r1, sl
 80043d0:	00ca      	lsls	r2, r1, #3
 80043d2:	4610      	mov	r0, r2
 80043d4:	4619      	mov	r1, r3
 80043d6:	4603      	mov	r3, r0
 80043d8:	4642      	mov	r2, r8
 80043da:	189b      	adds	r3, r3, r2
 80043dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80043e0:	464b      	mov	r3, r9
 80043e2:	460a      	mov	r2, r1
 80043e4:	eb42 0303 	adc.w	r3, r2, r3
 80043e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80043ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80043f8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80043fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004400:	460b      	mov	r3, r1
 8004402:	18db      	adds	r3, r3, r3
 8004404:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004406:	4613      	mov	r3, r2
 8004408:	eb42 0303 	adc.w	r3, r2, r3
 800440c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800440e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004412:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004416:	f7fc fc37 	bl	8000c88 <__aeabi_uldivmod>
 800441a:	4602      	mov	r2, r0
 800441c:	460b      	mov	r3, r1
 800441e:	4b0d      	ldr	r3, [pc, #52]	@ (8004454 <UART_SetConfig+0x2d4>)
 8004420:	fba3 1302 	umull	r1, r3, r3, r2
 8004424:	095b      	lsrs	r3, r3, #5
 8004426:	2164      	movs	r1, #100	@ 0x64
 8004428:	fb01 f303 	mul.w	r3, r1, r3
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	00db      	lsls	r3, r3, #3
 8004430:	3332      	adds	r3, #50	@ 0x32
 8004432:	4a08      	ldr	r2, [pc, #32]	@ (8004454 <UART_SetConfig+0x2d4>)
 8004434:	fba2 2303 	umull	r2, r3, r2, r3
 8004438:	095b      	lsrs	r3, r3, #5
 800443a:	f003 0207 	and.w	r2, r3, #7
 800443e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4422      	add	r2, r4
 8004446:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004448:	e106      	b.n	8004658 <UART_SetConfig+0x4d8>
 800444a:	bf00      	nop
 800444c:	40011000 	.word	0x40011000
 8004450:	40011400 	.word	0x40011400
 8004454:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004458:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800445c:	2200      	movs	r2, #0
 800445e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004462:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004466:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800446a:	4642      	mov	r2, r8
 800446c:	464b      	mov	r3, r9
 800446e:	1891      	adds	r1, r2, r2
 8004470:	6239      	str	r1, [r7, #32]
 8004472:	415b      	adcs	r3, r3
 8004474:	627b      	str	r3, [r7, #36]	@ 0x24
 8004476:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800447a:	4641      	mov	r1, r8
 800447c:	1854      	adds	r4, r2, r1
 800447e:	4649      	mov	r1, r9
 8004480:	eb43 0501 	adc.w	r5, r3, r1
 8004484:	f04f 0200 	mov.w	r2, #0
 8004488:	f04f 0300 	mov.w	r3, #0
 800448c:	00eb      	lsls	r3, r5, #3
 800448e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004492:	00e2      	lsls	r2, r4, #3
 8004494:	4614      	mov	r4, r2
 8004496:	461d      	mov	r5, r3
 8004498:	4643      	mov	r3, r8
 800449a:	18e3      	adds	r3, r4, r3
 800449c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80044a0:	464b      	mov	r3, r9
 80044a2:	eb45 0303 	adc.w	r3, r5, r3
 80044a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80044aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80044b6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80044ba:	f04f 0200 	mov.w	r2, #0
 80044be:	f04f 0300 	mov.w	r3, #0
 80044c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80044c6:	4629      	mov	r1, r5
 80044c8:	008b      	lsls	r3, r1, #2
 80044ca:	4621      	mov	r1, r4
 80044cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044d0:	4621      	mov	r1, r4
 80044d2:	008a      	lsls	r2, r1, #2
 80044d4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80044d8:	f7fc fbd6 	bl	8000c88 <__aeabi_uldivmod>
 80044dc:	4602      	mov	r2, r0
 80044de:	460b      	mov	r3, r1
 80044e0:	4b60      	ldr	r3, [pc, #384]	@ (8004664 <UART_SetConfig+0x4e4>)
 80044e2:	fba3 2302 	umull	r2, r3, r3, r2
 80044e6:	095b      	lsrs	r3, r3, #5
 80044e8:	011c      	lsls	r4, r3, #4
 80044ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044ee:	2200      	movs	r2, #0
 80044f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80044f4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80044f8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80044fc:	4642      	mov	r2, r8
 80044fe:	464b      	mov	r3, r9
 8004500:	1891      	adds	r1, r2, r2
 8004502:	61b9      	str	r1, [r7, #24]
 8004504:	415b      	adcs	r3, r3
 8004506:	61fb      	str	r3, [r7, #28]
 8004508:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800450c:	4641      	mov	r1, r8
 800450e:	1851      	adds	r1, r2, r1
 8004510:	6139      	str	r1, [r7, #16]
 8004512:	4649      	mov	r1, r9
 8004514:	414b      	adcs	r3, r1
 8004516:	617b      	str	r3, [r7, #20]
 8004518:	f04f 0200 	mov.w	r2, #0
 800451c:	f04f 0300 	mov.w	r3, #0
 8004520:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004524:	4659      	mov	r1, fp
 8004526:	00cb      	lsls	r3, r1, #3
 8004528:	4651      	mov	r1, sl
 800452a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800452e:	4651      	mov	r1, sl
 8004530:	00ca      	lsls	r2, r1, #3
 8004532:	4610      	mov	r0, r2
 8004534:	4619      	mov	r1, r3
 8004536:	4603      	mov	r3, r0
 8004538:	4642      	mov	r2, r8
 800453a:	189b      	adds	r3, r3, r2
 800453c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004540:	464b      	mov	r3, r9
 8004542:	460a      	mov	r2, r1
 8004544:	eb42 0303 	adc.w	r3, r2, r3
 8004548:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800454c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004556:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004558:	f04f 0200 	mov.w	r2, #0
 800455c:	f04f 0300 	mov.w	r3, #0
 8004560:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004564:	4649      	mov	r1, r9
 8004566:	008b      	lsls	r3, r1, #2
 8004568:	4641      	mov	r1, r8
 800456a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800456e:	4641      	mov	r1, r8
 8004570:	008a      	lsls	r2, r1, #2
 8004572:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004576:	f7fc fb87 	bl	8000c88 <__aeabi_uldivmod>
 800457a:	4602      	mov	r2, r0
 800457c:	460b      	mov	r3, r1
 800457e:	4611      	mov	r1, r2
 8004580:	4b38      	ldr	r3, [pc, #224]	@ (8004664 <UART_SetConfig+0x4e4>)
 8004582:	fba3 2301 	umull	r2, r3, r3, r1
 8004586:	095b      	lsrs	r3, r3, #5
 8004588:	2264      	movs	r2, #100	@ 0x64
 800458a:	fb02 f303 	mul.w	r3, r2, r3
 800458e:	1acb      	subs	r3, r1, r3
 8004590:	011b      	lsls	r3, r3, #4
 8004592:	3332      	adds	r3, #50	@ 0x32
 8004594:	4a33      	ldr	r2, [pc, #204]	@ (8004664 <UART_SetConfig+0x4e4>)
 8004596:	fba2 2303 	umull	r2, r3, r2, r3
 800459a:	095b      	lsrs	r3, r3, #5
 800459c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80045a0:	441c      	add	r4, r3
 80045a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045a6:	2200      	movs	r2, #0
 80045a8:	673b      	str	r3, [r7, #112]	@ 0x70
 80045aa:	677a      	str	r2, [r7, #116]	@ 0x74
 80045ac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80045b0:	4642      	mov	r2, r8
 80045b2:	464b      	mov	r3, r9
 80045b4:	1891      	adds	r1, r2, r2
 80045b6:	60b9      	str	r1, [r7, #8]
 80045b8:	415b      	adcs	r3, r3
 80045ba:	60fb      	str	r3, [r7, #12]
 80045bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80045c0:	4641      	mov	r1, r8
 80045c2:	1851      	adds	r1, r2, r1
 80045c4:	6039      	str	r1, [r7, #0]
 80045c6:	4649      	mov	r1, r9
 80045c8:	414b      	adcs	r3, r1
 80045ca:	607b      	str	r3, [r7, #4]
 80045cc:	f04f 0200 	mov.w	r2, #0
 80045d0:	f04f 0300 	mov.w	r3, #0
 80045d4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80045d8:	4659      	mov	r1, fp
 80045da:	00cb      	lsls	r3, r1, #3
 80045dc:	4651      	mov	r1, sl
 80045de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045e2:	4651      	mov	r1, sl
 80045e4:	00ca      	lsls	r2, r1, #3
 80045e6:	4610      	mov	r0, r2
 80045e8:	4619      	mov	r1, r3
 80045ea:	4603      	mov	r3, r0
 80045ec:	4642      	mov	r2, r8
 80045ee:	189b      	adds	r3, r3, r2
 80045f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80045f2:	464b      	mov	r3, r9
 80045f4:	460a      	mov	r2, r1
 80045f6:	eb42 0303 	adc.w	r3, r2, r3
 80045fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80045fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	663b      	str	r3, [r7, #96]	@ 0x60
 8004606:	667a      	str	r2, [r7, #100]	@ 0x64
 8004608:	f04f 0200 	mov.w	r2, #0
 800460c:	f04f 0300 	mov.w	r3, #0
 8004610:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004614:	4649      	mov	r1, r9
 8004616:	008b      	lsls	r3, r1, #2
 8004618:	4641      	mov	r1, r8
 800461a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800461e:	4641      	mov	r1, r8
 8004620:	008a      	lsls	r2, r1, #2
 8004622:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004626:	f7fc fb2f 	bl	8000c88 <__aeabi_uldivmod>
 800462a:	4602      	mov	r2, r0
 800462c:	460b      	mov	r3, r1
 800462e:	4b0d      	ldr	r3, [pc, #52]	@ (8004664 <UART_SetConfig+0x4e4>)
 8004630:	fba3 1302 	umull	r1, r3, r3, r2
 8004634:	095b      	lsrs	r3, r3, #5
 8004636:	2164      	movs	r1, #100	@ 0x64
 8004638:	fb01 f303 	mul.w	r3, r1, r3
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	011b      	lsls	r3, r3, #4
 8004640:	3332      	adds	r3, #50	@ 0x32
 8004642:	4a08      	ldr	r2, [pc, #32]	@ (8004664 <UART_SetConfig+0x4e4>)
 8004644:	fba2 2303 	umull	r2, r3, r2, r3
 8004648:	095b      	lsrs	r3, r3, #5
 800464a:	f003 020f 	and.w	r2, r3, #15
 800464e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4422      	add	r2, r4
 8004656:	609a      	str	r2, [r3, #8]
}
 8004658:	bf00      	nop
 800465a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800465e:	46bd      	mov	sp, r7
 8004660:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004664:	51eb851f 	.word	0x51eb851f

08004668 <__cvt>:
 8004668:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800466c:	ec57 6b10 	vmov	r6, r7, d0
 8004670:	2f00      	cmp	r7, #0
 8004672:	460c      	mov	r4, r1
 8004674:	4619      	mov	r1, r3
 8004676:	463b      	mov	r3, r7
 8004678:	bfbb      	ittet	lt
 800467a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800467e:	461f      	movlt	r7, r3
 8004680:	2300      	movge	r3, #0
 8004682:	232d      	movlt	r3, #45	@ 0x2d
 8004684:	700b      	strb	r3, [r1, #0]
 8004686:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004688:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800468c:	4691      	mov	r9, r2
 800468e:	f023 0820 	bic.w	r8, r3, #32
 8004692:	bfbc      	itt	lt
 8004694:	4632      	movlt	r2, r6
 8004696:	4616      	movlt	r6, r2
 8004698:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800469c:	d005      	beq.n	80046aa <__cvt+0x42>
 800469e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80046a2:	d100      	bne.n	80046a6 <__cvt+0x3e>
 80046a4:	3401      	adds	r4, #1
 80046a6:	2102      	movs	r1, #2
 80046a8:	e000      	b.n	80046ac <__cvt+0x44>
 80046aa:	2103      	movs	r1, #3
 80046ac:	ab03      	add	r3, sp, #12
 80046ae:	9301      	str	r3, [sp, #4]
 80046b0:	ab02      	add	r3, sp, #8
 80046b2:	9300      	str	r3, [sp, #0]
 80046b4:	ec47 6b10 	vmov	d0, r6, r7
 80046b8:	4653      	mov	r3, sl
 80046ba:	4622      	mov	r2, r4
 80046bc:	f000 fe70 	bl	80053a0 <_dtoa_r>
 80046c0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80046c4:	4605      	mov	r5, r0
 80046c6:	d119      	bne.n	80046fc <__cvt+0x94>
 80046c8:	f019 0f01 	tst.w	r9, #1
 80046cc:	d00e      	beq.n	80046ec <__cvt+0x84>
 80046ce:	eb00 0904 	add.w	r9, r0, r4
 80046d2:	2200      	movs	r2, #0
 80046d4:	2300      	movs	r3, #0
 80046d6:	4630      	mov	r0, r6
 80046d8:	4639      	mov	r1, r7
 80046da:	f7fc fa15 	bl	8000b08 <__aeabi_dcmpeq>
 80046de:	b108      	cbz	r0, 80046e4 <__cvt+0x7c>
 80046e0:	f8cd 900c 	str.w	r9, [sp, #12]
 80046e4:	2230      	movs	r2, #48	@ 0x30
 80046e6:	9b03      	ldr	r3, [sp, #12]
 80046e8:	454b      	cmp	r3, r9
 80046ea:	d31e      	bcc.n	800472a <__cvt+0xc2>
 80046ec:	9b03      	ldr	r3, [sp, #12]
 80046ee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80046f0:	1b5b      	subs	r3, r3, r5
 80046f2:	4628      	mov	r0, r5
 80046f4:	6013      	str	r3, [r2, #0]
 80046f6:	b004      	add	sp, #16
 80046f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046fc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004700:	eb00 0904 	add.w	r9, r0, r4
 8004704:	d1e5      	bne.n	80046d2 <__cvt+0x6a>
 8004706:	7803      	ldrb	r3, [r0, #0]
 8004708:	2b30      	cmp	r3, #48	@ 0x30
 800470a:	d10a      	bne.n	8004722 <__cvt+0xba>
 800470c:	2200      	movs	r2, #0
 800470e:	2300      	movs	r3, #0
 8004710:	4630      	mov	r0, r6
 8004712:	4639      	mov	r1, r7
 8004714:	f7fc f9f8 	bl	8000b08 <__aeabi_dcmpeq>
 8004718:	b918      	cbnz	r0, 8004722 <__cvt+0xba>
 800471a:	f1c4 0401 	rsb	r4, r4, #1
 800471e:	f8ca 4000 	str.w	r4, [sl]
 8004722:	f8da 3000 	ldr.w	r3, [sl]
 8004726:	4499      	add	r9, r3
 8004728:	e7d3      	b.n	80046d2 <__cvt+0x6a>
 800472a:	1c59      	adds	r1, r3, #1
 800472c:	9103      	str	r1, [sp, #12]
 800472e:	701a      	strb	r2, [r3, #0]
 8004730:	e7d9      	b.n	80046e6 <__cvt+0x7e>

08004732 <__exponent>:
 8004732:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004734:	2900      	cmp	r1, #0
 8004736:	bfba      	itte	lt
 8004738:	4249      	neglt	r1, r1
 800473a:	232d      	movlt	r3, #45	@ 0x2d
 800473c:	232b      	movge	r3, #43	@ 0x2b
 800473e:	2909      	cmp	r1, #9
 8004740:	7002      	strb	r2, [r0, #0]
 8004742:	7043      	strb	r3, [r0, #1]
 8004744:	dd29      	ble.n	800479a <__exponent+0x68>
 8004746:	f10d 0307 	add.w	r3, sp, #7
 800474a:	461d      	mov	r5, r3
 800474c:	270a      	movs	r7, #10
 800474e:	461a      	mov	r2, r3
 8004750:	fbb1 f6f7 	udiv	r6, r1, r7
 8004754:	fb07 1416 	mls	r4, r7, r6, r1
 8004758:	3430      	adds	r4, #48	@ 0x30
 800475a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800475e:	460c      	mov	r4, r1
 8004760:	2c63      	cmp	r4, #99	@ 0x63
 8004762:	f103 33ff 	add.w	r3, r3, #4294967295
 8004766:	4631      	mov	r1, r6
 8004768:	dcf1      	bgt.n	800474e <__exponent+0x1c>
 800476a:	3130      	adds	r1, #48	@ 0x30
 800476c:	1e94      	subs	r4, r2, #2
 800476e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004772:	1c41      	adds	r1, r0, #1
 8004774:	4623      	mov	r3, r4
 8004776:	42ab      	cmp	r3, r5
 8004778:	d30a      	bcc.n	8004790 <__exponent+0x5e>
 800477a:	f10d 0309 	add.w	r3, sp, #9
 800477e:	1a9b      	subs	r3, r3, r2
 8004780:	42ac      	cmp	r4, r5
 8004782:	bf88      	it	hi
 8004784:	2300      	movhi	r3, #0
 8004786:	3302      	adds	r3, #2
 8004788:	4403      	add	r3, r0
 800478a:	1a18      	subs	r0, r3, r0
 800478c:	b003      	add	sp, #12
 800478e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004790:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004794:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004798:	e7ed      	b.n	8004776 <__exponent+0x44>
 800479a:	2330      	movs	r3, #48	@ 0x30
 800479c:	3130      	adds	r1, #48	@ 0x30
 800479e:	7083      	strb	r3, [r0, #2]
 80047a0:	70c1      	strb	r1, [r0, #3]
 80047a2:	1d03      	adds	r3, r0, #4
 80047a4:	e7f1      	b.n	800478a <__exponent+0x58>
	...

080047a8 <_printf_float>:
 80047a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047ac:	b08d      	sub	sp, #52	@ 0x34
 80047ae:	460c      	mov	r4, r1
 80047b0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80047b4:	4616      	mov	r6, r2
 80047b6:	461f      	mov	r7, r3
 80047b8:	4605      	mov	r5, r0
 80047ba:	f000 fcef 	bl	800519c <_localeconv_r>
 80047be:	6803      	ldr	r3, [r0, #0]
 80047c0:	9304      	str	r3, [sp, #16]
 80047c2:	4618      	mov	r0, r3
 80047c4:	f7fb fd74 	bl	80002b0 <strlen>
 80047c8:	2300      	movs	r3, #0
 80047ca:	930a      	str	r3, [sp, #40]	@ 0x28
 80047cc:	f8d8 3000 	ldr.w	r3, [r8]
 80047d0:	9005      	str	r0, [sp, #20]
 80047d2:	3307      	adds	r3, #7
 80047d4:	f023 0307 	bic.w	r3, r3, #7
 80047d8:	f103 0208 	add.w	r2, r3, #8
 80047dc:	f894 a018 	ldrb.w	sl, [r4, #24]
 80047e0:	f8d4 b000 	ldr.w	fp, [r4]
 80047e4:	f8c8 2000 	str.w	r2, [r8]
 80047e8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80047ec:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80047f0:	9307      	str	r3, [sp, #28]
 80047f2:	f8cd 8018 	str.w	r8, [sp, #24]
 80047f6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80047fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80047fe:	4b9c      	ldr	r3, [pc, #624]	@ (8004a70 <_printf_float+0x2c8>)
 8004800:	f04f 32ff 	mov.w	r2, #4294967295
 8004804:	f7fc f9b2 	bl	8000b6c <__aeabi_dcmpun>
 8004808:	bb70      	cbnz	r0, 8004868 <_printf_float+0xc0>
 800480a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800480e:	4b98      	ldr	r3, [pc, #608]	@ (8004a70 <_printf_float+0x2c8>)
 8004810:	f04f 32ff 	mov.w	r2, #4294967295
 8004814:	f7fc f98c 	bl	8000b30 <__aeabi_dcmple>
 8004818:	bb30      	cbnz	r0, 8004868 <_printf_float+0xc0>
 800481a:	2200      	movs	r2, #0
 800481c:	2300      	movs	r3, #0
 800481e:	4640      	mov	r0, r8
 8004820:	4649      	mov	r1, r9
 8004822:	f7fc f97b 	bl	8000b1c <__aeabi_dcmplt>
 8004826:	b110      	cbz	r0, 800482e <_printf_float+0x86>
 8004828:	232d      	movs	r3, #45	@ 0x2d
 800482a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800482e:	4a91      	ldr	r2, [pc, #580]	@ (8004a74 <_printf_float+0x2cc>)
 8004830:	4b91      	ldr	r3, [pc, #580]	@ (8004a78 <_printf_float+0x2d0>)
 8004832:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004836:	bf94      	ite	ls
 8004838:	4690      	movls	r8, r2
 800483a:	4698      	movhi	r8, r3
 800483c:	2303      	movs	r3, #3
 800483e:	6123      	str	r3, [r4, #16]
 8004840:	f02b 0304 	bic.w	r3, fp, #4
 8004844:	6023      	str	r3, [r4, #0]
 8004846:	f04f 0900 	mov.w	r9, #0
 800484a:	9700      	str	r7, [sp, #0]
 800484c:	4633      	mov	r3, r6
 800484e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004850:	4621      	mov	r1, r4
 8004852:	4628      	mov	r0, r5
 8004854:	f000 f9d2 	bl	8004bfc <_printf_common>
 8004858:	3001      	adds	r0, #1
 800485a:	f040 808d 	bne.w	8004978 <_printf_float+0x1d0>
 800485e:	f04f 30ff 	mov.w	r0, #4294967295
 8004862:	b00d      	add	sp, #52	@ 0x34
 8004864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004868:	4642      	mov	r2, r8
 800486a:	464b      	mov	r3, r9
 800486c:	4640      	mov	r0, r8
 800486e:	4649      	mov	r1, r9
 8004870:	f7fc f97c 	bl	8000b6c <__aeabi_dcmpun>
 8004874:	b140      	cbz	r0, 8004888 <_printf_float+0xe0>
 8004876:	464b      	mov	r3, r9
 8004878:	2b00      	cmp	r3, #0
 800487a:	bfbc      	itt	lt
 800487c:	232d      	movlt	r3, #45	@ 0x2d
 800487e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004882:	4a7e      	ldr	r2, [pc, #504]	@ (8004a7c <_printf_float+0x2d4>)
 8004884:	4b7e      	ldr	r3, [pc, #504]	@ (8004a80 <_printf_float+0x2d8>)
 8004886:	e7d4      	b.n	8004832 <_printf_float+0x8a>
 8004888:	6863      	ldr	r3, [r4, #4]
 800488a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800488e:	9206      	str	r2, [sp, #24]
 8004890:	1c5a      	adds	r2, r3, #1
 8004892:	d13b      	bne.n	800490c <_printf_float+0x164>
 8004894:	2306      	movs	r3, #6
 8004896:	6063      	str	r3, [r4, #4]
 8004898:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800489c:	2300      	movs	r3, #0
 800489e:	6022      	str	r2, [r4, #0]
 80048a0:	9303      	str	r3, [sp, #12]
 80048a2:	ab0a      	add	r3, sp, #40	@ 0x28
 80048a4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80048a8:	ab09      	add	r3, sp, #36	@ 0x24
 80048aa:	9300      	str	r3, [sp, #0]
 80048ac:	6861      	ldr	r1, [r4, #4]
 80048ae:	ec49 8b10 	vmov	d0, r8, r9
 80048b2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80048b6:	4628      	mov	r0, r5
 80048b8:	f7ff fed6 	bl	8004668 <__cvt>
 80048bc:	9b06      	ldr	r3, [sp, #24]
 80048be:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80048c0:	2b47      	cmp	r3, #71	@ 0x47
 80048c2:	4680      	mov	r8, r0
 80048c4:	d129      	bne.n	800491a <_printf_float+0x172>
 80048c6:	1cc8      	adds	r0, r1, #3
 80048c8:	db02      	blt.n	80048d0 <_printf_float+0x128>
 80048ca:	6863      	ldr	r3, [r4, #4]
 80048cc:	4299      	cmp	r1, r3
 80048ce:	dd41      	ble.n	8004954 <_printf_float+0x1ac>
 80048d0:	f1aa 0a02 	sub.w	sl, sl, #2
 80048d4:	fa5f fa8a 	uxtb.w	sl, sl
 80048d8:	3901      	subs	r1, #1
 80048da:	4652      	mov	r2, sl
 80048dc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80048e0:	9109      	str	r1, [sp, #36]	@ 0x24
 80048e2:	f7ff ff26 	bl	8004732 <__exponent>
 80048e6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80048e8:	1813      	adds	r3, r2, r0
 80048ea:	2a01      	cmp	r2, #1
 80048ec:	4681      	mov	r9, r0
 80048ee:	6123      	str	r3, [r4, #16]
 80048f0:	dc02      	bgt.n	80048f8 <_printf_float+0x150>
 80048f2:	6822      	ldr	r2, [r4, #0]
 80048f4:	07d2      	lsls	r2, r2, #31
 80048f6:	d501      	bpl.n	80048fc <_printf_float+0x154>
 80048f8:	3301      	adds	r3, #1
 80048fa:	6123      	str	r3, [r4, #16]
 80048fc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004900:	2b00      	cmp	r3, #0
 8004902:	d0a2      	beq.n	800484a <_printf_float+0xa2>
 8004904:	232d      	movs	r3, #45	@ 0x2d
 8004906:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800490a:	e79e      	b.n	800484a <_printf_float+0xa2>
 800490c:	9a06      	ldr	r2, [sp, #24]
 800490e:	2a47      	cmp	r2, #71	@ 0x47
 8004910:	d1c2      	bne.n	8004898 <_printf_float+0xf0>
 8004912:	2b00      	cmp	r3, #0
 8004914:	d1c0      	bne.n	8004898 <_printf_float+0xf0>
 8004916:	2301      	movs	r3, #1
 8004918:	e7bd      	b.n	8004896 <_printf_float+0xee>
 800491a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800491e:	d9db      	bls.n	80048d8 <_printf_float+0x130>
 8004920:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004924:	d118      	bne.n	8004958 <_printf_float+0x1b0>
 8004926:	2900      	cmp	r1, #0
 8004928:	6863      	ldr	r3, [r4, #4]
 800492a:	dd0b      	ble.n	8004944 <_printf_float+0x19c>
 800492c:	6121      	str	r1, [r4, #16]
 800492e:	b913      	cbnz	r3, 8004936 <_printf_float+0x18e>
 8004930:	6822      	ldr	r2, [r4, #0]
 8004932:	07d0      	lsls	r0, r2, #31
 8004934:	d502      	bpl.n	800493c <_printf_float+0x194>
 8004936:	3301      	adds	r3, #1
 8004938:	440b      	add	r3, r1
 800493a:	6123      	str	r3, [r4, #16]
 800493c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800493e:	f04f 0900 	mov.w	r9, #0
 8004942:	e7db      	b.n	80048fc <_printf_float+0x154>
 8004944:	b913      	cbnz	r3, 800494c <_printf_float+0x1a4>
 8004946:	6822      	ldr	r2, [r4, #0]
 8004948:	07d2      	lsls	r2, r2, #31
 800494a:	d501      	bpl.n	8004950 <_printf_float+0x1a8>
 800494c:	3302      	adds	r3, #2
 800494e:	e7f4      	b.n	800493a <_printf_float+0x192>
 8004950:	2301      	movs	r3, #1
 8004952:	e7f2      	b.n	800493a <_printf_float+0x192>
 8004954:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004958:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800495a:	4299      	cmp	r1, r3
 800495c:	db05      	blt.n	800496a <_printf_float+0x1c2>
 800495e:	6823      	ldr	r3, [r4, #0]
 8004960:	6121      	str	r1, [r4, #16]
 8004962:	07d8      	lsls	r0, r3, #31
 8004964:	d5ea      	bpl.n	800493c <_printf_float+0x194>
 8004966:	1c4b      	adds	r3, r1, #1
 8004968:	e7e7      	b.n	800493a <_printf_float+0x192>
 800496a:	2900      	cmp	r1, #0
 800496c:	bfd4      	ite	le
 800496e:	f1c1 0202 	rsble	r2, r1, #2
 8004972:	2201      	movgt	r2, #1
 8004974:	4413      	add	r3, r2
 8004976:	e7e0      	b.n	800493a <_printf_float+0x192>
 8004978:	6823      	ldr	r3, [r4, #0]
 800497a:	055a      	lsls	r2, r3, #21
 800497c:	d407      	bmi.n	800498e <_printf_float+0x1e6>
 800497e:	6923      	ldr	r3, [r4, #16]
 8004980:	4642      	mov	r2, r8
 8004982:	4631      	mov	r1, r6
 8004984:	4628      	mov	r0, r5
 8004986:	47b8      	blx	r7
 8004988:	3001      	adds	r0, #1
 800498a:	d12b      	bne.n	80049e4 <_printf_float+0x23c>
 800498c:	e767      	b.n	800485e <_printf_float+0xb6>
 800498e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004992:	f240 80dd 	bls.w	8004b50 <_printf_float+0x3a8>
 8004996:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800499a:	2200      	movs	r2, #0
 800499c:	2300      	movs	r3, #0
 800499e:	f7fc f8b3 	bl	8000b08 <__aeabi_dcmpeq>
 80049a2:	2800      	cmp	r0, #0
 80049a4:	d033      	beq.n	8004a0e <_printf_float+0x266>
 80049a6:	4a37      	ldr	r2, [pc, #220]	@ (8004a84 <_printf_float+0x2dc>)
 80049a8:	2301      	movs	r3, #1
 80049aa:	4631      	mov	r1, r6
 80049ac:	4628      	mov	r0, r5
 80049ae:	47b8      	blx	r7
 80049b0:	3001      	adds	r0, #1
 80049b2:	f43f af54 	beq.w	800485e <_printf_float+0xb6>
 80049b6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80049ba:	4543      	cmp	r3, r8
 80049bc:	db02      	blt.n	80049c4 <_printf_float+0x21c>
 80049be:	6823      	ldr	r3, [r4, #0]
 80049c0:	07d8      	lsls	r0, r3, #31
 80049c2:	d50f      	bpl.n	80049e4 <_printf_float+0x23c>
 80049c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80049c8:	4631      	mov	r1, r6
 80049ca:	4628      	mov	r0, r5
 80049cc:	47b8      	blx	r7
 80049ce:	3001      	adds	r0, #1
 80049d0:	f43f af45 	beq.w	800485e <_printf_float+0xb6>
 80049d4:	f04f 0900 	mov.w	r9, #0
 80049d8:	f108 38ff 	add.w	r8, r8, #4294967295
 80049dc:	f104 0a1a 	add.w	sl, r4, #26
 80049e0:	45c8      	cmp	r8, r9
 80049e2:	dc09      	bgt.n	80049f8 <_printf_float+0x250>
 80049e4:	6823      	ldr	r3, [r4, #0]
 80049e6:	079b      	lsls	r3, r3, #30
 80049e8:	f100 8103 	bmi.w	8004bf2 <_printf_float+0x44a>
 80049ec:	68e0      	ldr	r0, [r4, #12]
 80049ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80049f0:	4298      	cmp	r0, r3
 80049f2:	bfb8      	it	lt
 80049f4:	4618      	movlt	r0, r3
 80049f6:	e734      	b.n	8004862 <_printf_float+0xba>
 80049f8:	2301      	movs	r3, #1
 80049fa:	4652      	mov	r2, sl
 80049fc:	4631      	mov	r1, r6
 80049fe:	4628      	mov	r0, r5
 8004a00:	47b8      	blx	r7
 8004a02:	3001      	adds	r0, #1
 8004a04:	f43f af2b 	beq.w	800485e <_printf_float+0xb6>
 8004a08:	f109 0901 	add.w	r9, r9, #1
 8004a0c:	e7e8      	b.n	80049e0 <_printf_float+0x238>
 8004a0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	dc39      	bgt.n	8004a88 <_printf_float+0x2e0>
 8004a14:	4a1b      	ldr	r2, [pc, #108]	@ (8004a84 <_printf_float+0x2dc>)
 8004a16:	2301      	movs	r3, #1
 8004a18:	4631      	mov	r1, r6
 8004a1a:	4628      	mov	r0, r5
 8004a1c:	47b8      	blx	r7
 8004a1e:	3001      	adds	r0, #1
 8004a20:	f43f af1d 	beq.w	800485e <_printf_float+0xb6>
 8004a24:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004a28:	ea59 0303 	orrs.w	r3, r9, r3
 8004a2c:	d102      	bne.n	8004a34 <_printf_float+0x28c>
 8004a2e:	6823      	ldr	r3, [r4, #0]
 8004a30:	07d9      	lsls	r1, r3, #31
 8004a32:	d5d7      	bpl.n	80049e4 <_printf_float+0x23c>
 8004a34:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a38:	4631      	mov	r1, r6
 8004a3a:	4628      	mov	r0, r5
 8004a3c:	47b8      	blx	r7
 8004a3e:	3001      	adds	r0, #1
 8004a40:	f43f af0d 	beq.w	800485e <_printf_float+0xb6>
 8004a44:	f04f 0a00 	mov.w	sl, #0
 8004a48:	f104 0b1a 	add.w	fp, r4, #26
 8004a4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a4e:	425b      	negs	r3, r3
 8004a50:	4553      	cmp	r3, sl
 8004a52:	dc01      	bgt.n	8004a58 <_printf_float+0x2b0>
 8004a54:	464b      	mov	r3, r9
 8004a56:	e793      	b.n	8004980 <_printf_float+0x1d8>
 8004a58:	2301      	movs	r3, #1
 8004a5a:	465a      	mov	r2, fp
 8004a5c:	4631      	mov	r1, r6
 8004a5e:	4628      	mov	r0, r5
 8004a60:	47b8      	blx	r7
 8004a62:	3001      	adds	r0, #1
 8004a64:	f43f aefb 	beq.w	800485e <_printf_float+0xb6>
 8004a68:	f10a 0a01 	add.w	sl, sl, #1
 8004a6c:	e7ee      	b.n	8004a4c <_printf_float+0x2a4>
 8004a6e:	bf00      	nop
 8004a70:	7fefffff 	.word	0x7fefffff
 8004a74:	08007a88 	.word	0x08007a88
 8004a78:	08007a8c 	.word	0x08007a8c
 8004a7c:	08007a90 	.word	0x08007a90
 8004a80:	08007a94 	.word	0x08007a94
 8004a84:	08007a98 	.word	0x08007a98
 8004a88:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004a8a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004a8e:	4553      	cmp	r3, sl
 8004a90:	bfa8      	it	ge
 8004a92:	4653      	movge	r3, sl
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	4699      	mov	r9, r3
 8004a98:	dc36      	bgt.n	8004b08 <_printf_float+0x360>
 8004a9a:	f04f 0b00 	mov.w	fp, #0
 8004a9e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004aa2:	f104 021a 	add.w	r2, r4, #26
 8004aa6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004aa8:	9306      	str	r3, [sp, #24]
 8004aaa:	eba3 0309 	sub.w	r3, r3, r9
 8004aae:	455b      	cmp	r3, fp
 8004ab0:	dc31      	bgt.n	8004b16 <_printf_float+0x36e>
 8004ab2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ab4:	459a      	cmp	sl, r3
 8004ab6:	dc3a      	bgt.n	8004b2e <_printf_float+0x386>
 8004ab8:	6823      	ldr	r3, [r4, #0]
 8004aba:	07da      	lsls	r2, r3, #31
 8004abc:	d437      	bmi.n	8004b2e <_printf_float+0x386>
 8004abe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ac0:	ebaa 0903 	sub.w	r9, sl, r3
 8004ac4:	9b06      	ldr	r3, [sp, #24]
 8004ac6:	ebaa 0303 	sub.w	r3, sl, r3
 8004aca:	4599      	cmp	r9, r3
 8004acc:	bfa8      	it	ge
 8004ace:	4699      	movge	r9, r3
 8004ad0:	f1b9 0f00 	cmp.w	r9, #0
 8004ad4:	dc33      	bgt.n	8004b3e <_printf_float+0x396>
 8004ad6:	f04f 0800 	mov.w	r8, #0
 8004ada:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004ade:	f104 0b1a 	add.w	fp, r4, #26
 8004ae2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ae4:	ebaa 0303 	sub.w	r3, sl, r3
 8004ae8:	eba3 0309 	sub.w	r3, r3, r9
 8004aec:	4543      	cmp	r3, r8
 8004aee:	f77f af79 	ble.w	80049e4 <_printf_float+0x23c>
 8004af2:	2301      	movs	r3, #1
 8004af4:	465a      	mov	r2, fp
 8004af6:	4631      	mov	r1, r6
 8004af8:	4628      	mov	r0, r5
 8004afa:	47b8      	blx	r7
 8004afc:	3001      	adds	r0, #1
 8004afe:	f43f aeae 	beq.w	800485e <_printf_float+0xb6>
 8004b02:	f108 0801 	add.w	r8, r8, #1
 8004b06:	e7ec      	b.n	8004ae2 <_printf_float+0x33a>
 8004b08:	4642      	mov	r2, r8
 8004b0a:	4631      	mov	r1, r6
 8004b0c:	4628      	mov	r0, r5
 8004b0e:	47b8      	blx	r7
 8004b10:	3001      	adds	r0, #1
 8004b12:	d1c2      	bne.n	8004a9a <_printf_float+0x2f2>
 8004b14:	e6a3      	b.n	800485e <_printf_float+0xb6>
 8004b16:	2301      	movs	r3, #1
 8004b18:	4631      	mov	r1, r6
 8004b1a:	4628      	mov	r0, r5
 8004b1c:	9206      	str	r2, [sp, #24]
 8004b1e:	47b8      	blx	r7
 8004b20:	3001      	adds	r0, #1
 8004b22:	f43f ae9c 	beq.w	800485e <_printf_float+0xb6>
 8004b26:	9a06      	ldr	r2, [sp, #24]
 8004b28:	f10b 0b01 	add.w	fp, fp, #1
 8004b2c:	e7bb      	b.n	8004aa6 <_printf_float+0x2fe>
 8004b2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b32:	4631      	mov	r1, r6
 8004b34:	4628      	mov	r0, r5
 8004b36:	47b8      	blx	r7
 8004b38:	3001      	adds	r0, #1
 8004b3a:	d1c0      	bne.n	8004abe <_printf_float+0x316>
 8004b3c:	e68f      	b.n	800485e <_printf_float+0xb6>
 8004b3e:	9a06      	ldr	r2, [sp, #24]
 8004b40:	464b      	mov	r3, r9
 8004b42:	4442      	add	r2, r8
 8004b44:	4631      	mov	r1, r6
 8004b46:	4628      	mov	r0, r5
 8004b48:	47b8      	blx	r7
 8004b4a:	3001      	adds	r0, #1
 8004b4c:	d1c3      	bne.n	8004ad6 <_printf_float+0x32e>
 8004b4e:	e686      	b.n	800485e <_printf_float+0xb6>
 8004b50:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004b54:	f1ba 0f01 	cmp.w	sl, #1
 8004b58:	dc01      	bgt.n	8004b5e <_printf_float+0x3b6>
 8004b5a:	07db      	lsls	r3, r3, #31
 8004b5c:	d536      	bpl.n	8004bcc <_printf_float+0x424>
 8004b5e:	2301      	movs	r3, #1
 8004b60:	4642      	mov	r2, r8
 8004b62:	4631      	mov	r1, r6
 8004b64:	4628      	mov	r0, r5
 8004b66:	47b8      	blx	r7
 8004b68:	3001      	adds	r0, #1
 8004b6a:	f43f ae78 	beq.w	800485e <_printf_float+0xb6>
 8004b6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b72:	4631      	mov	r1, r6
 8004b74:	4628      	mov	r0, r5
 8004b76:	47b8      	blx	r7
 8004b78:	3001      	adds	r0, #1
 8004b7a:	f43f ae70 	beq.w	800485e <_printf_float+0xb6>
 8004b7e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004b82:	2200      	movs	r2, #0
 8004b84:	2300      	movs	r3, #0
 8004b86:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004b8a:	f7fb ffbd 	bl	8000b08 <__aeabi_dcmpeq>
 8004b8e:	b9c0      	cbnz	r0, 8004bc2 <_printf_float+0x41a>
 8004b90:	4653      	mov	r3, sl
 8004b92:	f108 0201 	add.w	r2, r8, #1
 8004b96:	4631      	mov	r1, r6
 8004b98:	4628      	mov	r0, r5
 8004b9a:	47b8      	blx	r7
 8004b9c:	3001      	adds	r0, #1
 8004b9e:	d10c      	bne.n	8004bba <_printf_float+0x412>
 8004ba0:	e65d      	b.n	800485e <_printf_float+0xb6>
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	465a      	mov	r2, fp
 8004ba6:	4631      	mov	r1, r6
 8004ba8:	4628      	mov	r0, r5
 8004baa:	47b8      	blx	r7
 8004bac:	3001      	adds	r0, #1
 8004bae:	f43f ae56 	beq.w	800485e <_printf_float+0xb6>
 8004bb2:	f108 0801 	add.w	r8, r8, #1
 8004bb6:	45d0      	cmp	r8, sl
 8004bb8:	dbf3      	blt.n	8004ba2 <_printf_float+0x3fa>
 8004bba:	464b      	mov	r3, r9
 8004bbc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004bc0:	e6df      	b.n	8004982 <_printf_float+0x1da>
 8004bc2:	f04f 0800 	mov.w	r8, #0
 8004bc6:	f104 0b1a 	add.w	fp, r4, #26
 8004bca:	e7f4      	b.n	8004bb6 <_printf_float+0x40e>
 8004bcc:	2301      	movs	r3, #1
 8004bce:	4642      	mov	r2, r8
 8004bd0:	e7e1      	b.n	8004b96 <_printf_float+0x3ee>
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	464a      	mov	r2, r9
 8004bd6:	4631      	mov	r1, r6
 8004bd8:	4628      	mov	r0, r5
 8004bda:	47b8      	blx	r7
 8004bdc:	3001      	adds	r0, #1
 8004bde:	f43f ae3e 	beq.w	800485e <_printf_float+0xb6>
 8004be2:	f108 0801 	add.w	r8, r8, #1
 8004be6:	68e3      	ldr	r3, [r4, #12]
 8004be8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004bea:	1a5b      	subs	r3, r3, r1
 8004bec:	4543      	cmp	r3, r8
 8004bee:	dcf0      	bgt.n	8004bd2 <_printf_float+0x42a>
 8004bf0:	e6fc      	b.n	80049ec <_printf_float+0x244>
 8004bf2:	f04f 0800 	mov.w	r8, #0
 8004bf6:	f104 0919 	add.w	r9, r4, #25
 8004bfa:	e7f4      	b.n	8004be6 <_printf_float+0x43e>

08004bfc <_printf_common>:
 8004bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c00:	4616      	mov	r6, r2
 8004c02:	4698      	mov	r8, r3
 8004c04:	688a      	ldr	r2, [r1, #8]
 8004c06:	690b      	ldr	r3, [r1, #16]
 8004c08:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	bfb8      	it	lt
 8004c10:	4613      	movlt	r3, r2
 8004c12:	6033      	str	r3, [r6, #0]
 8004c14:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004c18:	4607      	mov	r7, r0
 8004c1a:	460c      	mov	r4, r1
 8004c1c:	b10a      	cbz	r2, 8004c22 <_printf_common+0x26>
 8004c1e:	3301      	adds	r3, #1
 8004c20:	6033      	str	r3, [r6, #0]
 8004c22:	6823      	ldr	r3, [r4, #0]
 8004c24:	0699      	lsls	r1, r3, #26
 8004c26:	bf42      	ittt	mi
 8004c28:	6833      	ldrmi	r3, [r6, #0]
 8004c2a:	3302      	addmi	r3, #2
 8004c2c:	6033      	strmi	r3, [r6, #0]
 8004c2e:	6825      	ldr	r5, [r4, #0]
 8004c30:	f015 0506 	ands.w	r5, r5, #6
 8004c34:	d106      	bne.n	8004c44 <_printf_common+0x48>
 8004c36:	f104 0a19 	add.w	sl, r4, #25
 8004c3a:	68e3      	ldr	r3, [r4, #12]
 8004c3c:	6832      	ldr	r2, [r6, #0]
 8004c3e:	1a9b      	subs	r3, r3, r2
 8004c40:	42ab      	cmp	r3, r5
 8004c42:	dc26      	bgt.n	8004c92 <_printf_common+0x96>
 8004c44:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004c48:	6822      	ldr	r2, [r4, #0]
 8004c4a:	3b00      	subs	r3, #0
 8004c4c:	bf18      	it	ne
 8004c4e:	2301      	movne	r3, #1
 8004c50:	0692      	lsls	r2, r2, #26
 8004c52:	d42b      	bmi.n	8004cac <_printf_common+0xb0>
 8004c54:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004c58:	4641      	mov	r1, r8
 8004c5a:	4638      	mov	r0, r7
 8004c5c:	47c8      	blx	r9
 8004c5e:	3001      	adds	r0, #1
 8004c60:	d01e      	beq.n	8004ca0 <_printf_common+0xa4>
 8004c62:	6823      	ldr	r3, [r4, #0]
 8004c64:	6922      	ldr	r2, [r4, #16]
 8004c66:	f003 0306 	and.w	r3, r3, #6
 8004c6a:	2b04      	cmp	r3, #4
 8004c6c:	bf02      	ittt	eq
 8004c6e:	68e5      	ldreq	r5, [r4, #12]
 8004c70:	6833      	ldreq	r3, [r6, #0]
 8004c72:	1aed      	subeq	r5, r5, r3
 8004c74:	68a3      	ldr	r3, [r4, #8]
 8004c76:	bf0c      	ite	eq
 8004c78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c7c:	2500      	movne	r5, #0
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	bfc4      	itt	gt
 8004c82:	1a9b      	subgt	r3, r3, r2
 8004c84:	18ed      	addgt	r5, r5, r3
 8004c86:	2600      	movs	r6, #0
 8004c88:	341a      	adds	r4, #26
 8004c8a:	42b5      	cmp	r5, r6
 8004c8c:	d11a      	bne.n	8004cc4 <_printf_common+0xc8>
 8004c8e:	2000      	movs	r0, #0
 8004c90:	e008      	b.n	8004ca4 <_printf_common+0xa8>
 8004c92:	2301      	movs	r3, #1
 8004c94:	4652      	mov	r2, sl
 8004c96:	4641      	mov	r1, r8
 8004c98:	4638      	mov	r0, r7
 8004c9a:	47c8      	blx	r9
 8004c9c:	3001      	adds	r0, #1
 8004c9e:	d103      	bne.n	8004ca8 <_printf_common+0xac>
 8004ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ca8:	3501      	adds	r5, #1
 8004caa:	e7c6      	b.n	8004c3a <_printf_common+0x3e>
 8004cac:	18e1      	adds	r1, r4, r3
 8004cae:	1c5a      	adds	r2, r3, #1
 8004cb0:	2030      	movs	r0, #48	@ 0x30
 8004cb2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004cb6:	4422      	add	r2, r4
 8004cb8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004cbc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004cc0:	3302      	adds	r3, #2
 8004cc2:	e7c7      	b.n	8004c54 <_printf_common+0x58>
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	4622      	mov	r2, r4
 8004cc8:	4641      	mov	r1, r8
 8004cca:	4638      	mov	r0, r7
 8004ccc:	47c8      	blx	r9
 8004cce:	3001      	adds	r0, #1
 8004cd0:	d0e6      	beq.n	8004ca0 <_printf_common+0xa4>
 8004cd2:	3601      	adds	r6, #1
 8004cd4:	e7d9      	b.n	8004c8a <_printf_common+0x8e>
	...

08004cd8 <_printf_i>:
 8004cd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004cdc:	7e0f      	ldrb	r7, [r1, #24]
 8004cde:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004ce0:	2f78      	cmp	r7, #120	@ 0x78
 8004ce2:	4691      	mov	r9, r2
 8004ce4:	4680      	mov	r8, r0
 8004ce6:	460c      	mov	r4, r1
 8004ce8:	469a      	mov	sl, r3
 8004cea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004cee:	d807      	bhi.n	8004d00 <_printf_i+0x28>
 8004cf0:	2f62      	cmp	r7, #98	@ 0x62
 8004cf2:	d80a      	bhi.n	8004d0a <_printf_i+0x32>
 8004cf4:	2f00      	cmp	r7, #0
 8004cf6:	f000 80d2 	beq.w	8004e9e <_printf_i+0x1c6>
 8004cfa:	2f58      	cmp	r7, #88	@ 0x58
 8004cfc:	f000 80b9 	beq.w	8004e72 <_printf_i+0x19a>
 8004d00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004d04:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004d08:	e03a      	b.n	8004d80 <_printf_i+0xa8>
 8004d0a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004d0e:	2b15      	cmp	r3, #21
 8004d10:	d8f6      	bhi.n	8004d00 <_printf_i+0x28>
 8004d12:	a101      	add	r1, pc, #4	@ (adr r1, 8004d18 <_printf_i+0x40>)
 8004d14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d18:	08004d71 	.word	0x08004d71
 8004d1c:	08004d85 	.word	0x08004d85
 8004d20:	08004d01 	.word	0x08004d01
 8004d24:	08004d01 	.word	0x08004d01
 8004d28:	08004d01 	.word	0x08004d01
 8004d2c:	08004d01 	.word	0x08004d01
 8004d30:	08004d85 	.word	0x08004d85
 8004d34:	08004d01 	.word	0x08004d01
 8004d38:	08004d01 	.word	0x08004d01
 8004d3c:	08004d01 	.word	0x08004d01
 8004d40:	08004d01 	.word	0x08004d01
 8004d44:	08004e85 	.word	0x08004e85
 8004d48:	08004daf 	.word	0x08004daf
 8004d4c:	08004e3f 	.word	0x08004e3f
 8004d50:	08004d01 	.word	0x08004d01
 8004d54:	08004d01 	.word	0x08004d01
 8004d58:	08004ea7 	.word	0x08004ea7
 8004d5c:	08004d01 	.word	0x08004d01
 8004d60:	08004daf 	.word	0x08004daf
 8004d64:	08004d01 	.word	0x08004d01
 8004d68:	08004d01 	.word	0x08004d01
 8004d6c:	08004e47 	.word	0x08004e47
 8004d70:	6833      	ldr	r3, [r6, #0]
 8004d72:	1d1a      	adds	r2, r3, #4
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	6032      	str	r2, [r6, #0]
 8004d78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004d7c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004d80:	2301      	movs	r3, #1
 8004d82:	e09d      	b.n	8004ec0 <_printf_i+0x1e8>
 8004d84:	6833      	ldr	r3, [r6, #0]
 8004d86:	6820      	ldr	r0, [r4, #0]
 8004d88:	1d19      	adds	r1, r3, #4
 8004d8a:	6031      	str	r1, [r6, #0]
 8004d8c:	0606      	lsls	r6, r0, #24
 8004d8e:	d501      	bpl.n	8004d94 <_printf_i+0xbc>
 8004d90:	681d      	ldr	r5, [r3, #0]
 8004d92:	e003      	b.n	8004d9c <_printf_i+0xc4>
 8004d94:	0645      	lsls	r5, r0, #25
 8004d96:	d5fb      	bpl.n	8004d90 <_printf_i+0xb8>
 8004d98:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004d9c:	2d00      	cmp	r5, #0
 8004d9e:	da03      	bge.n	8004da8 <_printf_i+0xd0>
 8004da0:	232d      	movs	r3, #45	@ 0x2d
 8004da2:	426d      	negs	r5, r5
 8004da4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004da8:	4859      	ldr	r0, [pc, #356]	@ (8004f10 <_printf_i+0x238>)
 8004daa:	230a      	movs	r3, #10
 8004dac:	e011      	b.n	8004dd2 <_printf_i+0xfa>
 8004dae:	6821      	ldr	r1, [r4, #0]
 8004db0:	6833      	ldr	r3, [r6, #0]
 8004db2:	0608      	lsls	r0, r1, #24
 8004db4:	f853 5b04 	ldr.w	r5, [r3], #4
 8004db8:	d402      	bmi.n	8004dc0 <_printf_i+0xe8>
 8004dba:	0649      	lsls	r1, r1, #25
 8004dbc:	bf48      	it	mi
 8004dbe:	b2ad      	uxthmi	r5, r5
 8004dc0:	2f6f      	cmp	r7, #111	@ 0x6f
 8004dc2:	4853      	ldr	r0, [pc, #332]	@ (8004f10 <_printf_i+0x238>)
 8004dc4:	6033      	str	r3, [r6, #0]
 8004dc6:	bf14      	ite	ne
 8004dc8:	230a      	movne	r3, #10
 8004dca:	2308      	moveq	r3, #8
 8004dcc:	2100      	movs	r1, #0
 8004dce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004dd2:	6866      	ldr	r6, [r4, #4]
 8004dd4:	60a6      	str	r6, [r4, #8]
 8004dd6:	2e00      	cmp	r6, #0
 8004dd8:	bfa2      	ittt	ge
 8004dda:	6821      	ldrge	r1, [r4, #0]
 8004ddc:	f021 0104 	bicge.w	r1, r1, #4
 8004de0:	6021      	strge	r1, [r4, #0]
 8004de2:	b90d      	cbnz	r5, 8004de8 <_printf_i+0x110>
 8004de4:	2e00      	cmp	r6, #0
 8004de6:	d04b      	beq.n	8004e80 <_printf_i+0x1a8>
 8004de8:	4616      	mov	r6, r2
 8004dea:	fbb5 f1f3 	udiv	r1, r5, r3
 8004dee:	fb03 5711 	mls	r7, r3, r1, r5
 8004df2:	5dc7      	ldrb	r7, [r0, r7]
 8004df4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004df8:	462f      	mov	r7, r5
 8004dfa:	42bb      	cmp	r3, r7
 8004dfc:	460d      	mov	r5, r1
 8004dfe:	d9f4      	bls.n	8004dea <_printf_i+0x112>
 8004e00:	2b08      	cmp	r3, #8
 8004e02:	d10b      	bne.n	8004e1c <_printf_i+0x144>
 8004e04:	6823      	ldr	r3, [r4, #0]
 8004e06:	07df      	lsls	r7, r3, #31
 8004e08:	d508      	bpl.n	8004e1c <_printf_i+0x144>
 8004e0a:	6923      	ldr	r3, [r4, #16]
 8004e0c:	6861      	ldr	r1, [r4, #4]
 8004e0e:	4299      	cmp	r1, r3
 8004e10:	bfde      	ittt	le
 8004e12:	2330      	movle	r3, #48	@ 0x30
 8004e14:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004e18:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004e1c:	1b92      	subs	r2, r2, r6
 8004e1e:	6122      	str	r2, [r4, #16]
 8004e20:	f8cd a000 	str.w	sl, [sp]
 8004e24:	464b      	mov	r3, r9
 8004e26:	aa03      	add	r2, sp, #12
 8004e28:	4621      	mov	r1, r4
 8004e2a:	4640      	mov	r0, r8
 8004e2c:	f7ff fee6 	bl	8004bfc <_printf_common>
 8004e30:	3001      	adds	r0, #1
 8004e32:	d14a      	bne.n	8004eca <_printf_i+0x1f2>
 8004e34:	f04f 30ff 	mov.w	r0, #4294967295
 8004e38:	b004      	add	sp, #16
 8004e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e3e:	6823      	ldr	r3, [r4, #0]
 8004e40:	f043 0320 	orr.w	r3, r3, #32
 8004e44:	6023      	str	r3, [r4, #0]
 8004e46:	4833      	ldr	r0, [pc, #204]	@ (8004f14 <_printf_i+0x23c>)
 8004e48:	2778      	movs	r7, #120	@ 0x78
 8004e4a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004e4e:	6823      	ldr	r3, [r4, #0]
 8004e50:	6831      	ldr	r1, [r6, #0]
 8004e52:	061f      	lsls	r7, r3, #24
 8004e54:	f851 5b04 	ldr.w	r5, [r1], #4
 8004e58:	d402      	bmi.n	8004e60 <_printf_i+0x188>
 8004e5a:	065f      	lsls	r7, r3, #25
 8004e5c:	bf48      	it	mi
 8004e5e:	b2ad      	uxthmi	r5, r5
 8004e60:	6031      	str	r1, [r6, #0]
 8004e62:	07d9      	lsls	r1, r3, #31
 8004e64:	bf44      	itt	mi
 8004e66:	f043 0320 	orrmi.w	r3, r3, #32
 8004e6a:	6023      	strmi	r3, [r4, #0]
 8004e6c:	b11d      	cbz	r5, 8004e76 <_printf_i+0x19e>
 8004e6e:	2310      	movs	r3, #16
 8004e70:	e7ac      	b.n	8004dcc <_printf_i+0xf4>
 8004e72:	4827      	ldr	r0, [pc, #156]	@ (8004f10 <_printf_i+0x238>)
 8004e74:	e7e9      	b.n	8004e4a <_printf_i+0x172>
 8004e76:	6823      	ldr	r3, [r4, #0]
 8004e78:	f023 0320 	bic.w	r3, r3, #32
 8004e7c:	6023      	str	r3, [r4, #0]
 8004e7e:	e7f6      	b.n	8004e6e <_printf_i+0x196>
 8004e80:	4616      	mov	r6, r2
 8004e82:	e7bd      	b.n	8004e00 <_printf_i+0x128>
 8004e84:	6833      	ldr	r3, [r6, #0]
 8004e86:	6825      	ldr	r5, [r4, #0]
 8004e88:	6961      	ldr	r1, [r4, #20]
 8004e8a:	1d18      	adds	r0, r3, #4
 8004e8c:	6030      	str	r0, [r6, #0]
 8004e8e:	062e      	lsls	r6, r5, #24
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	d501      	bpl.n	8004e98 <_printf_i+0x1c0>
 8004e94:	6019      	str	r1, [r3, #0]
 8004e96:	e002      	b.n	8004e9e <_printf_i+0x1c6>
 8004e98:	0668      	lsls	r0, r5, #25
 8004e9a:	d5fb      	bpl.n	8004e94 <_printf_i+0x1bc>
 8004e9c:	8019      	strh	r1, [r3, #0]
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	6123      	str	r3, [r4, #16]
 8004ea2:	4616      	mov	r6, r2
 8004ea4:	e7bc      	b.n	8004e20 <_printf_i+0x148>
 8004ea6:	6833      	ldr	r3, [r6, #0]
 8004ea8:	1d1a      	adds	r2, r3, #4
 8004eaa:	6032      	str	r2, [r6, #0]
 8004eac:	681e      	ldr	r6, [r3, #0]
 8004eae:	6862      	ldr	r2, [r4, #4]
 8004eb0:	2100      	movs	r1, #0
 8004eb2:	4630      	mov	r0, r6
 8004eb4:	f7fb f9ac 	bl	8000210 <memchr>
 8004eb8:	b108      	cbz	r0, 8004ebe <_printf_i+0x1e6>
 8004eba:	1b80      	subs	r0, r0, r6
 8004ebc:	6060      	str	r0, [r4, #4]
 8004ebe:	6863      	ldr	r3, [r4, #4]
 8004ec0:	6123      	str	r3, [r4, #16]
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ec8:	e7aa      	b.n	8004e20 <_printf_i+0x148>
 8004eca:	6923      	ldr	r3, [r4, #16]
 8004ecc:	4632      	mov	r2, r6
 8004ece:	4649      	mov	r1, r9
 8004ed0:	4640      	mov	r0, r8
 8004ed2:	47d0      	blx	sl
 8004ed4:	3001      	adds	r0, #1
 8004ed6:	d0ad      	beq.n	8004e34 <_printf_i+0x15c>
 8004ed8:	6823      	ldr	r3, [r4, #0]
 8004eda:	079b      	lsls	r3, r3, #30
 8004edc:	d413      	bmi.n	8004f06 <_printf_i+0x22e>
 8004ede:	68e0      	ldr	r0, [r4, #12]
 8004ee0:	9b03      	ldr	r3, [sp, #12]
 8004ee2:	4298      	cmp	r0, r3
 8004ee4:	bfb8      	it	lt
 8004ee6:	4618      	movlt	r0, r3
 8004ee8:	e7a6      	b.n	8004e38 <_printf_i+0x160>
 8004eea:	2301      	movs	r3, #1
 8004eec:	4632      	mov	r2, r6
 8004eee:	4649      	mov	r1, r9
 8004ef0:	4640      	mov	r0, r8
 8004ef2:	47d0      	blx	sl
 8004ef4:	3001      	adds	r0, #1
 8004ef6:	d09d      	beq.n	8004e34 <_printf_i+0x15c>
 8004ef8:	3501      	adds	r5, #1
 8004efa:	68e3      	ldr	r3, [r4, #12]
 8004efc:	9903      	ldr	r1, [sp, #12]
 8004efe:	1a5b      	subs	r3, r3, r1
 8004f00:	42ab      	cmp	r3, r5
 8004f02:	dcf2      	bgt.n	8004eea <_printf_i+0x212>
 8004f04:	e7eb      	b.n	8004ede <_printf_i+0x206>
 8004f06:	2500      	movs	r5, #0
 8004f08:	f104 0619 	add.w	r6, r4, #25
 8004f0c:	e7f5      	b.n	8004efa <_printf_i+0x222>
 8004f0e:	bf00      	nop
 8004f10:	08007a9a 	.word	0x08007a9a
 8004f14:	08007aab 	.word	0x08007aab

08004f18 <std>:
 8004f18:	2300      	movs	r3, #0
 8004f1a:	b510      	push	{r4, lr}
 8004f1c:	4604      	mov	r4, r0
 8004f1e:	e9c0 3300 	strd	r3, r3, [r0]
 8004f22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004f26:	6083      	str	r3, [r0, #8]
 8004f28:	8181      	strh	r1, [r0, #12]
 8004f2a:	6643      	str	r3, [r0, #100]	@ 0x64
 8004f2c:	81c2      	strh	r2, [r0, #14]
 8004f2e:	6183      	str	r3, [r0, #24]
 8004f30:	4619      	mov	r1, r3
 8004f32:	2208      	movs	r2, #8
 8004f34:	305c      	adds	r0, #92	@ 0x5c
 8004f36:	f000 f928 	bl	800518a <memset>
 8004f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8004f70 <std+0x58>)
 8004f3c:	6263      	str	r3, [r4, #36]	@ 0x24
 8004f3e:	4b0d      	ldr	r3, [pc, #52]	@ (8004f74 <std+0x5c>)
 8004f40:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004f42:	4b0d      	ldr	r3, [pc, #52]	@ (8004f78 <std+0x60>)
 8004f44:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004f46:	4b0d      	ldr	r3, [pc, #52]	@ (8004f7c <std+0x64>)
 8004f48:	6323      	str	r3, [r4, #48]	@ 0x30
 8004f4a:	4b0d      	ldr	r3, [pc, #52]	@ (8004f80 <std+0x68>)
 8004f4c:	6224      	str	r4, [r4, #32]
 8004f4e:	429c      	cmp	r4, r3
 8004f50:	d006      	beq.n	8004f60 <std+0x48>
 8004f52:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004f56:	4294      	cmp	r4, r2
 8004f58:	d002      	beq.n	8004f60 <std+0x48>
 8004f5a:	33d0      	adds	r3, #208	@ 0xd0
 8004f5c:	429c      	cmp	r4, r3
 8004f5e:	d105      	bne.n	8004f6c <std+0x54>
 8004f60:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004f64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f68:	f000 b98c 	b.w	8005284 <__retarget_lock_init_recursive>
 8004f6c:	bd10      	pop	{r4, pc}
 8004f6e:	bf00      	nop
 8004f70:	08005105 	.word	0x08005105
 8004f74:	08005127 	.word	0x08005127
 8004f78:	0800515f 	.word	0x0800515f
 8004f7c:	08005183 	.word	0x08005183
 8004f80:	200002b0 	.word	0x200002b0

08004f84 <stdio_exit_handler>:
 8004f84:	4a02      	ldr	r2, [pc, #8]	@ (8004f90 <stdio_exit_handler+0xc>)
 8004f86:	4903      	ldr	r1, [pc, #12]	@ (8004f94 <stdio_exit_handler+0x10>)
 8004f88:	4803      	ldr	r0, [pc, #12]	@ (8004f98 <stdio_exit_handler+0x14>)
 8004f8a:	f000 b869 	b.w	8005060 <_fwalk_sglue>
 8004f8e:	bf00      	nop
 8004f90:	20000010 	.word	0x20000010
 8004f94:	08006be5 	.word	0x08006be5
 8004f98:	20000020 	.word	0x20000020

08004f9c <cleanup_stdio>:
 8004f9c:	6841      	ldr	r1, [r0, #4]
 8004f9e:	4b0c      	ldr	r3, [pc, #48]	@ (8004fd0 <cleanup_stdio+0x34>)
 8004fa0:	4299      	cmp	r1, r3
 8004fa2:	b510      	push	{r4, lr}
 8004fa4:	4604      	mov	r4, r0
 8004fa6:	d001      	beq.n	8004fac <cleanup_stdio+0x10>
 8004fa8:	f001 fe1c 	bl	8006be4 <_fflush_r>
 8004fac:	68a1      	ldr	r1, [r4, #8]
 8004fae:	4b09      	ldr	r3, [pc, #36]	@ (8004fd4 <cleanup_stdio+0x38>)
 8004fb0:	4299      	cmp	r1, r3
 8004fb2:	d002      	beq.n	8004fba <cleanup_stdio+0x1e>
 8004fb4:	4620      	mov	r0, r4
 8004fb6:	f001 fe15 	bl	8006be4 <_fflush_r>
 8004fba:	68e1      	ldr	r1, [r4, #12]
 8004fbc:	4b06      	ldr	r3, [pc, #24]	@ (8004fd8 <cleanup_stdio+0x3c>)
 8004fbe:	4299      	cmp	r1, r3
 8004fc0:	d004      	beq.n	8004fcc <cleanup_stdio+0x30>
 8004fc2:	4620      	mov	r0, r4
 8004fc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fc8:	f001 be0c 	b.w	8006be4 <_fflush_r>
 8004fcc:	bd10      	pop	{r4, pc}
 8004fce:	bf00      	nop
 8004fd0:	200002b0 	.word	0x200002b0
 8004fd4:	20000318 	.word	0x20000318
 8004fd8:	20000380 	.word	0x20000380

08004fdc <global_stdio_init.part.0>:
 8004fdc:	b510      	push	{r4, lr}
 8004fde:	4b0b      	ldr	r3, [pc, #44]	@ (800500c <global_stdio_init.part.0+0x30>)
 8004fe0:	4c0b      	ldr	r4, [pc, #44]	@ (8005010 <global_stdio_init.part.0+0x34>)
 8004fe2:	4a0c      	ldr	r2, [pc, #48]	@ (8005014 <global_stdio_init.part.0+0x38>)
 8004fe4:	601a      	str	r2, [r3, #0]
 8004fe6:	4620      	mov	r0, r4
 8004fe8:	2200      	movs	r2, #0
 8004fea:	2104      	movs	r1, #4
 8004fec:	f7ff ff94 	bl	8004f18 <std>
 8004ff0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	2109      	movs	r1, #9
 8004ff8:	f7ff ff8e 	bl	8004f18 <std>
 8004ffc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005000:	2202      	movs	r2, #2
 8005002:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005006:	2112      	movs	r1, #18
 8005008:	f7ff bf86 	b.w	8004f18 <std>
 800500c:	200003e8 	.word	0x200003e8
 8005010:	200002b0 	.word	0x200002b0
 8005014:	08004f85 	.word	0x08004f85

08005018 <__sfp_lock_acquire>:
 8005018:	4801      	ldr	r0, [pc, #4]	@ (8005020 <__sfp_lock_acquire+0x8>)
 800501a:	f000 b934 	b.w	8005286 <__retarget_lock_acquire_recursive>
 800501e:	bf00      	nop
 8005020:	200003f1 	.word	0x200003f1

08005024 <__sfp_lock_release>:
 8005024:	4801      	ldr	r0, [pc, #4]	@ (800502c <__sfp_lock_release+0x8>)
 8005026:	f000 b92f 	b.w	8005288 <__retarget_lock_release_recursive>
 800502a:	bf00      	nop
 800502c:	200003f1 	.word	0x200003f1

08005030 <__sinit>:
 8005030:	b510      	push	{r4, lr}
 8005032:	4604      	mov	r4, r0
 8005034:	f7ff fff0 	bl	8005018 <__sfp_lock_acquire>
 8005038:	6a23      	ldr	r3, [r4, #32]
 800503a:	b11b      	cbz	r3, 8005044 <__sinit+0x14>
 800503c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005040:	f7ff bff0 	b.w	8005024 <__sfp_lock_release>
 8005044:	4b04      	ldr	r3, [pc, #16]	@ (8005058 <__sinit+0x28>)
 8005046:	6223      	str	r3, [r4, #32]
 8005048:	4b04      	ldr	r3, [pc, #16]	@ (800505c <__sinit+0x2c>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d1f5      	bne.n	800503c <__sinit+0xc>
 8005050:	f7ff ffc4 	bl	8004fdc <global_stdio_init.part.0>
 8005054:	e7f2      	b.n	800503c <__sinit+0xc>
 8005056:	bf00      	nop
 8005058:	08004f9d 	.word	0x08004f9d
 800505c:	200003e8 	.word	0x200003e8

08005060 <_fwalk_sglue>:
 8005060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005064:	4607      	mov	r7, r0
 8005066:	4688      	mov	r8, r1
 8005068:	4614      	mov	r4, r2
 800506a:	2600      	movs	r6, #0
 800506c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005070:	f1b9 0901 	subs.w	r9, r9, #1
 8005074:	d505      	bpl.n	8005082 <_fwalk_sglue+0x22>
 8005076:	6824      	ldr	r4, [r4, #0]
 8005078:	2c00      	cmp	r4, #0
 800507a:	d1f7      	bne.n	800506c <_fwalk_sglue+0xc>
 800507c:	4630      	mov	r0, r6
 800507e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005082:	89ab      	ldrh	r3, [r5, #12]
 8005084:	2b01      	cmp	r3, #1
 8005086:	d907      	bls.n	8005098 <_fwalk_sglue+0x38>
 8005088:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800508c:	3301      	adds	r3, #1
 800508e:	d003      	beq.n	8005098 <_fwalk_sglue+0x38>
 8005090:	4629      	mov	r1, r5
 8005092:	4638      	mov	r0, r7
 8005094:	47c0      	blx	r8
 8005096:	4306      	orrs	r6, r0
 8005098:	3568      	adds	r5, #104	@ 0x68
 800509a:	e7e9      	b.n	8005070 <_fwalk_sglue+0x10>

0800509c <sniprintf>:
 800509c:	b40c      	push	{r2, r3}
 800509e:	b530      	push	{r4, r5, lr}
 80050a0:	4b17      	ldr	r3, [pc, #92]	@ (8005100 <sniprintf+0x64>)
 80050a2:	1e0c      	subs	r4, r1, #0
 80050a4:	681d      	ldr	r5, [r3, #0]
 80050a6:	b09d      	sub	sp, #116	@ 0x74
 80050a8:	da08      	bge.n	80050bc <sniprintf+0x20>
 80050aa:	238b      	movs	r3, #139	@ 0x8b
 80050ac:	602b      	str	r3, [r5, #0]
 80050ae:	f04f 30ff 	mov.w	r0, #4294967295
 80050b2:	b01d      	add	sp, #116	@ 0x74
 80050b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80050b8:	b002      	add	sp, #8
 80050ba:	4770      	bx	lr
 80050bc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80050c0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80050c4:	bf14      	ite	ne
 80050c6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80050ca:	4623      	moveq	r3, r4
 80050cc:	9304      	str	r3, [sp, #16]
 80050ce:	9307      	str	r3, [sp, #28]
 80050d0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80050d4:	9002      	str	r0, [sp, #8]
 80050d6:	9006      	str	r0, [sp, #24]
 80050d8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80050dc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80050de:	ab21      	add	r3, sp, #132	@ 0x84
 80050e0:	a902      	add	r1, sp, #8
 80050e2:	4628      	mov	r0, r5
 80050e4:	9301      	str	r3, [sp, #4]
 80050e6:	f001 fbfd 	bl	80068e4 <_svfiprintf_r>
 80050ea:	1c43      	adds	r3, r0, #1
 80050ec:	bfbc      	itt	lt
 80050ee:	238b      	movlt	r3, #139	@ 0x8b
 80050f0:	602b      	strlt	r3, [r5, #0]
 80050f2:	2c00      	cmp	r4, #0
 80050f4:	d0dd      	beq.n	80050b2 <sniprintf+0x16>
 80050f6:	9b02      	ldr	r3, [sp, #8]
 80050f8:	2200      	movs	r2, #0
 80050fa:	701a      	strb	r2, [r3, #0]
 80050fc:	e7d9      	b.n	80050b2 <sniprintf+0x16>
 80050fe:	bf00      	nop
 8005100:	2000001c 	.word	0x2000001c

08005104 <__sread>:
 8005104:	b510      	push	{r4, lr}
 8005106:	460c      	mov	r4, r1
 8005108:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800510c:	f000 f86c 	bl	80051e8 <_read_r>
 8005110:	2800      	cmp	r0, #0
 8005112:	bfab      	itete	ge
 8005114:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005116:	89a3      	ldrhlt	r3, [r4, #12]
 8005118:	181b      	addge	r3, r3, r0
 800511a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800511e:	bfac      	ite	ge
 8005120:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005122:	81a3      	strhlt	r3, [r4, #12]
 8005124:	bd10      	pop	{r4, pc}

08005126 <__swrite>:
 8005126:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800512a:	461f      	mov	r7, r3
 800512c:	898b      	ldrh	r3, [r1, #12]
 800512e:	05db      	lsls	r3, r3, #23
 8005130:	4605      	mov	r5, r0
 8005132:	460c      	mov	r4, r1
 8005134:	4616      	mov	r6, r2
 8005136:	d505      	bpl.n	8005144 <__swrite+0x1e>
 8005138:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800513c:	2302      	movs	r3, #2
 800513e:	2200      	movs	r2, #0
 8005140:	f000 f840 	bl	80051c4 <_lseek_r>
 8005144:	89a3      	ldrh	r3, [r4, #12]
 8005146:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800514a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800514e:	81a3      	strh	r3, [r4, #12]
 8005150:	4632      	mov	r2, r6
 8005152:	463b      	mov	r3, r7
 8005154:	4628      	mov	r0, r5
 8005156:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800515a:	f000 b857 	b.w	800520c <_write_r>

0800515e <__sseek>:
 800515e:	b510      	push	{r4, lr}
 8005160:	460c      	mov	r4, r1
 8005162:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005166:	f000 f82d 	bl	80051c4 <_lseek_r>
 800516a:	1c43      	adds	r3, r0, #1
 800516c:	89a3      	ldrh	r3, [r4, #12]
 800516e:	bf15      	itete	ne
 8005170:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005172:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005176:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800517a:	81a3      	strheq	r3, [r4, #12]
 800517c:	bf18      	it	ne
 800517e:	81a3      	strhne	r3, [r4, #12]
 8005180:	bd10      	pop	{r4, pc}

08005182 <__sclose>:
 8005182:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005186:	f000 b80d 	b.w	80051a4 <_close_r>

0800518a <memset>:
 800518a:	4402      	add	r2, r0
 800518c:	4603      	mov	r3, r0
 800518e:	4293      	cmp	r3, r2
 8005190:	d100      	bne.n	8005194 <memset+0xa>
 8005192:	4770      	bx	lr
 8005194:	f803 1b01 	strb.w	r1, [r3], #1
 8005198:	e7f9      	b.n	800518e <memset+0x4>
	...

0800519c <_localeconv_r>:
 800519c:	4800      	ldr	r0, [pc, #0]	@ (80051a0 <_localeconv_r+0x4>)
 800519e:	4770      	bx	lr
 80051a0:	2000015c 	.word	0x2000015c

080051a4 <_close_r>:
 80051a4:	b538      	push	{r3, r4, r5, lr}
 80051a6:	4d06      	ldr	r5, [pc, #24]	@ (80051c0 <_close_r+0x1c>)
 80051a8:	2300      	movs	r3, #0
 80051aa:	4604      	mov	r4, r0
 80051ac:	4608      	mov	r0, r1
 80051ae:	602b      	str	r3, [r5, #0]
 80051b0:	f7fc fb87 	bl	80018c2 <_close>
 80051b4:	1c43      	adds	r3, r0, #1
 80051b6:	d102      	bne.n	80051be <_close_r+0x1a>
 80051b8:	682b      	ldr	r3, [r5, #0]
 80051ba:	b103      	cbz	r3, 80051be <_close_r+0x1a>
 80051bc:	6023      	str	r3, [r4, #0]
 80051be:	bd38      	pop	{r3, r4, r5, pc}
 80051c0:	200003ec 	.word	0x200003ec

080051c4 <_lseek_r>:
 80051c4:	b538      	push	{r3, r4, r5, lr}
 80051c6:	4d07      	ldr	r5, [pc, #28]	@ (80051e4 <_lseek_r+0x20>)
 80051c8:	4604      	mov	r4, r0
 80051ca:	4608      	mov	r0, r1
 80051cc:	4611      	mov	r1, r2
 80051ce:	2200      	movs	r2, #0
 80051d0:	602a      	str	r2, [r5, #0]
 80051d2:	461a      	mov	r2, r3
 80051d4:	f7fc fb9c 	bl	8001910 <_lseek>
 80051d8:	1c43      	adds	r3, r0, #1
 80051da:	d102      	bne.n	80051e2 <_lseek_r+0x1e>
 80051dc:	682b      	ldr	r3, [r5, #0]
 80051de:	b103      	cbz	r3, 80051e2 <_lseek_r+0x1e>
 80051e0:	6023      	str	r3, [r4, #0]
 80051e2:	bd38      	pop	{r3, r4, r5, pc}
 80051e4:	200003ec 	.word	0x200003ec

080051e8 <_read_r>:
 80051e8:	b538      	push	{r3, r4, r5, lr}
 80051ea:	4d07      	ldr	r5, [pc, #28]	@ (8005208 <_read_r+0x20>)
 80051ec:	4604      	mov	r4, r0
 80051ee:	4608      	mov	r0, r1
 80051f0:	4611      	mov	r1, r2
 80051f2:	2200      	movs	r2, #0
 80051f4:	602a      	str	r2, [r5, #0]
 80051f6:	461a      	mov	r2, r3
 80051f8:	f7fc fb2a 	bl	8001850 <_read>
 80051fc:	1c43      	adds	r3, r0, #1
 80051fe:	d102      	bne.n	8005206 <_read_r+0x1e>
 8005200:	682b      	ldr	r3, [r5, #0]
 8005202:	b103      	cbz	r3, 8005206 <_read_r+0x1e>
 8005204:	6023      	str	r3, [r4, #0]
 8005206:	bd38      	pop	{r3, r4, r5, pc}
 8005208:	200003ec 	.word	0x200003ec

0800520c <_write_r>:
 800520c:	b538      	push	{r3, r4, r5, lr}
 800520e:	4d07      	ldr	r5, [pc, #28]	@ (800522c <_write_r+0x20>)
 8005210:	4604      	mov	r4, r0
 8005212:	4608      	mov	r0, r1
 8005214:	4611      	mov	r1, r2
 8005216:	2200      	movs	r2, #0
 8005218:	602a      	str	r2, [r5, #0]
 800521a:	461a      	mov	r2, r3
 800521c:	f7fc fb35 	bl	800188a <_write>
 8005220:	1c43      	adds	r3, r0, #1
 8005222:	d102      	bne.n	800522a <_write_r+0x1e>
 8005224:	682b      	ldr	r3, [r5, #0]
 8005226:	b103      	cbz	r3, 800522a <_write_r+0x1e>
 8005228:	6023      	str	r3, [r4, #0]
 800522a:	bd38      	pop	{r3, r4, r5, pc}
 800522c:	200003ec 	.word	0x200003ec

08005230 <__errno>:
 8005230:	4b01      	ldr	r3, [pc, #4]	@ (8005238 <__errno+0x8>)
 8005232:	6818      	ldr	r0, [r3, #0]
 8005234:	4770      	bx	lr
 8005236:	bf00      	nop
 8005238:	2000001c 	.word	0x2000001c

0800523c <__libc_init_array>:
 800523c:	b570      	push	{r4, r5, r6, lr}
 800523e:	4d0d      	ldr	r5, [pc, #52]	@ (8005274 <__libc_init_array+0x38>)
 8005240:	4c0d      	ldr	r4, [pc, #52]	@ (8005278 <__libc_init_array+0x3c>)
 8005242:	1b64      	subs	r4, r4, r5
 8005244:	10a4      	asrs	r4, r4, #2
 8005246:	2600      	movs	r6, #0
 8005248:	42a6      	cmp	r6, r4
 800524a:	d109      	bne.n	8005260 <__libc_init_array+0x24>
 800524c:	4d0b      	ldr	r5, [pc, #44]	@ (800527c <__libc_init_array+0x40>)
 800524e:	4c0c      	ldr	r4, [pc, #48]	@ (8005280 <__libc_init_array+0x44>)
 8005250:	f002 fb0c 	bl	800786c <_init>
 8005254:	1b64      	subs	r4, r4, r5
 8005256:	10a4      	asrs	r4, r4, #2
 8005258:	2600      	movs	r6, #0
 800525a:	42a6      	cmp	r6, r4
 800525c:	d105      	bne.n	800526a <__libc_init_array+0x2e>
 800525e:	bd70      	pop	{r4, r5, r6, pc}
 8005260:	f855 3b04 	ldr.w	r3, [r5], #4
 8005264:	4798      	blx	r3
 8005266:	3601      	adds	r6, #1
 8005268:	e7ee      	b.n	8005248 <__libc_init_array+0xc>
 800526a:	f855 3b04 	ldr.w	r3, [r5], #4
 800526e:	4798      	blx	r3
 8005270:	3601      	adds	r6, #1
 8005272:	e7f2      	b.n	800525a <__libc_init_array+0x1e>
 8005274:	08007e40 	.word	0x08007e40
 8005278:	08007e40 	.word	0x08007e40
 800527c:	08007e40 	.word	0x08007e40
 8005280:	08007e44 	.word	0x08007e44

08005284 <__retarget_lock_init_recursive>:
 8005284:	4770      	bx	lr

08005286 <__retarget_lock_acquire_recursive>:
 8005286:	4770      	bx	lr

08005288 <__retarget_lock_release_recursive>:
 8005288:	4770      	bx	lr

0800528a <quorem>:
 800528a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800528e:	6903      	ldr	r3, [r0, #16]
 8005290:	690c      	ldr	r4, [r1, #16]
 8005292:	42a3      	cmp	r3, r4
 8005294:	4607      	mov	r7, r0
 8005296:	db7e      	blt.n	8005396 <quorem+0x10c>
 8005298:	3c01      	subs	r4, #1
 800529a:	f101 0814 	add.w	r8, r1, #20
 800529e:	00a3      	lsls	r3, r4, #2
 80052a0:	f100 0514 	add.w	r5, r0, #20
 80052a4:	9300      	str	r3, [sp, #0]
 80052a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80052aa:	9301      	str	r3, [sp, #4]
 80052ac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80052b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80052b4:	3301      	adds	r3, #1
 80052b6:	429a      	cmp	r2, r3
 80052b8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80052bc:	fbb2 f6f3 	udiv	r6, r2, r3
 80052c0:	d32e      	bcc.n	8005320 <quorem+0x96>
 80052c2:	f04f 0a00 	mov.w	sl, #0
 80052c6:	46c4      	mov	ip, r8
 80052c8:	46ae      	mov	lr, r5
 80052ca:	46d3      	mov	fp, sl
 80052cc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80052d0:	b298      	uxth	r0, r3
 80052d2:	fb06 a000 	mla	r0, r6, r0, sl
 80052d6:	0c02      	lsrs	r2, r0, #16
 80052d8:	0c1b      	lsrs	r3, r3, #16
 80052da:	fb06 2303 	mla	r3, r6, r3, r2
 80052de:	f8de 2000 	ldr.w	r2, [lr]
 80052e2:	b280      	uxth	r0, r0
 80052e4:	b292      	uxth	r2, r2
 80052e6:	1a12      	subs	r2, r2, r0
 80052e8:	445a      	add	r2, fp
 80052ea:	f8de 0000 	ldr.w	r0, [lr]
 80052ee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80052f8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80052fc:	b292      	uxth	r2, r2
 80052fe:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005302:	45e1      	cmp	r9, ip
 8005304:	f84e 2b04 	str.w	r2, [lr], #4
 8005308:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800530c:	d2de      	bcs.n	80052cc <quorem+0x42>
 800530e:	9b00      	ldr	r3, [sp, #0]
 8005310:	58eb      	ldr	r3, [r5, r3]
 8005312:	b92b      	cbnz	r3, 8005320 <quorem+0x96>
 8005314:	9b01      	ldr	r3, [sp, #4]
 8005316:	3b04      	subs	r3, #4
 8005318:	429d      	cmp	r5, r3
 800531a:	461a      	mov	r2, r3
 800531c:	d32f      	bcc.n	800537e <quorem+0xf4>
 800531e:	613c      	str	r4, [r7, #16]
 8005320:	4638      	mov	r0, r7
 8005322:	f001 f97b 	bl	800661c <__mcmp>
 8005326:	2800      	cmp	r0, #0
 8005328:	db25      	blt.n	8005376 <quorem+0xec>
 800532a:	4629      	mov	r1, r5
 800532c:	2000      	movs	r0, #0
 800532e:	f858 2b04 	ldr.w	r2, [r8], #4
 8005332:	f8d1 c000 	ldr.w	ip, [r1]
 8005336:	fa1f fe82 	uxth.w	lr, r2
 800533a:	fa1f f38c 	uxth.w	r3, ip
 800533e:	eba3 030e 	sub.w	r3, r3, lr
 8005342:	4403      	add	r3, r0
 8005344:	0c12      	lsrs	r2, r2, #16
 8005346:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800534a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800534e:	b29b      	uxth	r3, r3
 8005350:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005354:	45c1      	cmp	r9, r8
 8005356:	f841 3b04 	str.w	r3, [r1], #4
 800535a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800535e:	d2e6      	bcs.n	800532e <quorem+0xa4>
 8005360:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005364:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005368:	b922      	cbnz	r2, 8005374 <quorem+0xea>
 800536a:	3b04      	subs	r3, #4
 800536c:	429d      	cmp	r5, r3
 800536e:	461a      	mov	r2, r3
 8005370:	d30b      	bcc.n	800538a <quorem+0x100>
 8005372:	613c      	str	r4, [r7, #16]
 8005374:	3601      	adds	r6, #1
 8005376:	4630      	mov	r0, r6
 8005378:	b003      	add	sp, #12
 800537a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800537e:	6812      	ldr	r2, [r2, #0]
 8005380:	3b04      	subs	r3, #4
 8005382:	2a00      	cmp	r2, #0
 8005384:	d1cb      	bne.n	800531e <quorem+0x94>
 8005386:	3c01      	subs	r4, #1
 8005388:	e7c6      	b.n	8005318 <quorem+0x8e>
 800538a:	6812      	ldr	r2, [r2, #0]
 800538c:	3b04      	subs	r3, #4
 800538e:	2a00      	cmp	r2, #0
 8005390:	d1ef      	bne.n	8005372 <quorem+0xe8>
 8005392:	3c01      	subs	r4, #1
 8005394:	e7ea      	b.n	800536c <quorem+0xe2>
 8005396:	2000      	movs	r0, #0
 8005398:	e7ee      	b.n	8005378 <quorem+0xee>
 800539a:	0000      	movs	r0, r0
 800539c:	0000      	movs	r0, r0
	...

080053a0 <_dtoa_r>:
 80053a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053a4:	69c7      	ldr	r7, [r0, #28]
 80053a6:	b099      	sub	sp, #100	@ 0x64
 80053a8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80053ac:	ec55 4b10 	vmov	r4, r5, d0
 80053b0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80053b2:	9109      	str	r1, [sp, #36]	@ 0x24
 80053b4:	4683      	mov	fp, r0
 80053b6:	920e      	str	r2, [sp, #56]	@ 0x38
 80053b8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80053ba:	b97f      	cbnz	r7, 80053dc <_dtoa_r+0x3c>
 80053bc:	2010      	movs	r0, #16
 80053be:	f000 fdfd 	bl	8005fbc <malloc>
 80053c2:	4602      	mov	r2, r0
 80053c4:	f8cb 001c 	str.w	r0, [fp, #28]
 80053c8:	b920      	cbnz	r0, 80053d4 <_dtoa_r+0x34>
 80053ca:	4ba7      	ldr	r3, [pc, #668]	@ (8005668 <_dtoa_r+0x2c8>)
 80053cc:	21ef      	movs	r1, #239	@ 0xef
 80053ce:	48a7      	ldr	r0, [pc, #668]	@ (800566c <_dtoa_r+0x2cc>)
 80053d0:	f001 fc68 	bl	8006ca4 <__assert_func>
 80053d4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80053d8:	6007      	str	r7, [r0, #0]
 80053da:	60c7      	str	r7, [r0, #12]
 80053dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80053e0:	6819      	ldr	r1, [r3, #0]
 80053e2:	b159      	cbz	r1, 80053fc <_dtoa_r+0x5c>
 80053e4:	685a      	ldr	r2, [r3, #4]
 80053e6:	604a      	str	r2, [r1, #4]
 80053e8:	2301      	movs	r3, #1
 80053ea:	4093      	lsls	r3, r2
 80053ec:	608b      	str	r3, [r1, #8]
 80053ee:	4658      	mov	r0, fp
 80053f0:	f000 feda 	bl	80061a8 <_Bfree>
 80053f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80053f8:	2200      	movs	r2, #0
 80053fa:	601a      	str	r2, [r3, #0]
 80053fc:	1e2b      	subs	r3, r5, #0
 80053fe:	bfb9      	ittee	lt
 8005400:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005404:	9303      	strlt	r3, [sp, #12]
 8005406:	2300      	movge	r3, #0
 8005408:	6033      	strge	r3, [r6, #0]
 800540a:	9f03      	ldr	r7, [sp, #12]
 800540c:	4b98      	ldr	r3, [pc, #608]	@ (8005670 <_dtoa_r+0x2d0>)
 800540e:	bfbc      	itt	lt
 8005410:	2201      	movlt	r2, #1
 8005412:	6032      	strlt	r2, [r6, #0]
 8005414:	43bb      	bics	r3, r7
 8005416:	d112      	bne.n	800543e <_dtoa_r+0x9e>
 8005418:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800541a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800541e:	6013      	str	r3, [r2, #0]
 8005420:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005424:	4323      	orrs	r3, r4
 8005426:	f000 854d 	beq.w	8005ec4 <_dtoa_r+0xb24>
 800542a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800542c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8005684 <_dtoa_r+0x2e4>
 8005430:	2b00      	cmp	r3, #0
 8005432:	f000 854f 	beq.w	8005ed4 <_dtoa_r+0xb34>
 8005436:	f10a 0303 	add.w	r3, sl, #3
 800543a:	f000 bd49 	b.w	8005ed0 <_dtoa_r+0xb30>
 800543e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005442:	2200      	movs	r2, #0
 8005444:	ec51 0b17 	vmov	r0, r1, d7
 8005448:	2300      	movs	r3, #0
 800544a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800544e:	f7fb fb5b 	bl	8000b08 <__aeabi_dcmpeq>
 8005452:	4680      	mov	r8, r0
 8005454:	b158      	cbz	r0, 800546e <_dtoa_r+0xce>
 8005456:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005458:	2301      	movs	r3, #1
 800545a:	6013      	str	r3, [r2, #0]
 800545c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800545e:	b113      	cbz	r3, 8005466 <_dtoa_r+0xc6>
 8005460:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005462:	4b84      	ldr	r3, [pc, #528]	@ (8005674 <_dtoa_r+0x2d4>)
 8005464:	6013      	str	r3, [r2, #0]
 8005466:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8005688 <_dtoa_r+0x2e8>
 800546a:	f000 bd33 	b.w	8005ed4 <_dtoa_r+0xb34>
 800546e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005472:	aa16      	add	r2, sp, #88	@ 0x58
 8005474:	a917      	add	r1, sp, #92	@ 0x5c
 8005476:	4658      	mov	r0, fp
 8005478:	f001 f980 	bl	800677c <__d2b>
 800547c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005480:	4681      	mov	r9, r0
 8005482:	2e00      	cmp	r6, #0
 8005484:	d077      	beq.n	8005576 <_dtoa_r+0x1d6>
 8005486:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005488:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800548c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005490:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005494:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005498:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800549c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80054a0:	4619      	mov	r1, r3
 80054a2:	2200      	movs	r2, #0
 80054a4:	4b74      	ldr	r3, [pc, #464]	@ (8005678 <_dtoa_r+0x2d8>)
 80054a6:	f7fa ff0f 	bl	80002c8 <__aeabi_dsub>
 80054aa:	a369      	add	r3, pc, #420	@ (adr r3, 8005650 <_dtoa_r+0x2b0>)
 80054ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054b0:	f7fb f8c2 	bl	8000638 <__aeabi_dmul>
 80054b4:	a368      	add	r3, pc, #416	@ (adr r3, 8005658 <_dtoa_r+0x2b8>)
 80054b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ba:	f7fa ff07 	bl	80002cc <__adddf3>
 80054be:	4604      	mov	r4, r0
 80054c0:	4630      	mov	r0, r6
 80054c2:	460d      	mov	r5, r1
 80054c4:	f7fb f84e 	bl	8000564 <__aeabi_i2d>
 80054c8:	a365      	add	r3, pc, #404	@ (adr r3, 8005660 <_dtoa_r+0x2c0>)
 80054ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ce:	f7fb f8b3 	bl	8000638 <__aeabi_dmul>
 80054d2:	4602      	mov	r2, r0
 80054d4:	460b      	mov	r3, r1
 80054d6:	4620      	mov	r0, r4
 80054d8:	4629      	mov	r1, r5
 80054da:	f7fa fef7 	bl	80002cc <__adddf3>
 80054de:	4604      	mov	r4, r0
 80054e0:	460d      	mov	r5, r1
 80054e2:	f7fb fb59 	bl	8000b98 <__aeabi_d2iz>
 80054e6:	2200      	movs	r2, #0
 80054e8:	4607      	mov	r7, r0
 80054ea:	2300      	movs	r3, #0
 80054ec:	4620      	mov	r0, r4
 80054ee:	4629      	mov	r1, r5
 80054f0:	f7fb fb14 	bl	8000b1c <__aeabi_dcmplt>
 80054f4:	b140      	cbz	r0, 8005508 <_dtoa_r+0x168>
 80054f6:	4638      	mov	r0, r7
 80054f8:	f7fb f834 	bl	8000564 <__aeabi_i2d>
 80054fc:	4622      	mov	r2, r4
 80054fe:	462b      	mov	r3, r5
 8005500:	f7fb fb02 	bl	8000b08 <__aeabi_dcmpeq>
 8005504:	b900      	cbnz	r0, 8005508 <_dtoa_r+0x168>
 8005506:	3f01      	subs	r7, #1
 8005508:	2f16      	cmp	r7, #22
 800550a:	d851      	bhi.n	80055b0 <_dtoa_r+0x210>
 800550c:	4b5b      	ldr	r3, [pc, #364]	@ (800567c <_dtoa_r+0x2dc>)
 800550e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005516:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800551a:	f7fb faff 	bl	8000b1c <__aeabi_dcmplt>
 800551e:	2800      	cmp	r0, #0
 8005520:	d048      	beq.n	80055b4 <_dtoa_r+0x214>
 8005522:	3f01      	subs	r7, #1
 8005524:	2300      	movs	r3, #0
 8005526:	9312      	str	r3, [sp, #72]	@ 0x48
 8005528:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800552a:	1b9b      	subs	r3, r3, r6
 800552c:	1e5a      	subs	r2, r3, #1
 800552e:	bf44      	itt	mi
 8005530:	f1c3 0801 	rsbmi	r8, r3, #1
 8005534:	2300      	movmi	r3, #0
 8005536:	9208      	str	r2, [sp, #32]
 8005538:	bf54      	ite	pl
 800553a:	f04f 0800 	movpl.w	r8, #0
 800553e:	9308      	strmi	r3, [sp, #32]
 8005540:	2f00      	cmp	r7, #0
 8005542:	db39      	blt.n	80055b8 <_dtoa_r+0x218>
 8005544:	9b08      	ldr	r3, [sp, #32]
 8005546:	970f      	str	r7, [sp, #60]	@ 0x3c
 8005548:	443b      	add	r3, r7
 800554a:	9308      	str	r3, [sp, #32]
 800554c:	2300      	movs	r3, #0
 800554e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005550:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005552:	2b09      	cmp	r3, #9
 8005554:	d864      	bhi.n	8005620 <_dtoa_r+0x280>
 8005556:	2b05      	cmp	r3, #5
 8005558:	bfc4      	itt	gt
 800555a:	3b04      	subgt	r3, #4
 800555c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800555e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005560:	f1a3 0302 	sub.w	r3, r3, #2
 8005564:	bfcc      	ite	gt
 8005566:	2400      	movgt	r4, #0
 8005568:	2401      	movle	r4, #1
 800556a:	2b03      	cmp	r3, #3
 800556c:	d863      	bhi.n	8005636 <_dtoa_r+0x296>
 800556e:	e8df f003 	tbb	[pc, r3]
 8005572:	372a      	.short	0x372a
 8005574:	5535      	.short	0x5535
 8005576:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800557a:	441e      	add	r6, r3
 800557c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005580:	2b20      	cmp	r3, #32
 8005582:	bfc1      	itttt	gt
 8005584:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005588:	409f      	lslgt	r7, r3
 800558a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800558e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005592:	bfd6      	itet	le
 8005594:	f1c3 0320 	rsble	r3, r3, #32
 8005598:	ea47 0003 	orrgt.w	r0, r7, r3
 800559c:	fa04 f003 	lslle.w	r0, r4, r3
 80055a0:	f7fa ffd0 	bl	8000544 <__aeabi_ui2d>
 80055a4:	2201      	movs	r2, #1
 80055a6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80055aa:	3e01      	subs	r6, #1
 80055ac:	9214      	str	r2, [sp, #80]	@ 0x50
 80055ae:	e777      	b.n	80054a0 <_dtoa_r+0x100>
 80055b0:	2301      	movs	r3, #1
 80055b2:	e7b8      	b.n	8005526 <_dtoa_r+0x186>
 80055b4:	9012      	str	r0, [sp, #72]	@ 0x48
 80055b6:	e7b7      	b.n	8005528 <_dtoa_r+0x188>
 80055b8:	427b      	negs	r3, r7
 80055ba:	930a      	str	r3, [sp, #40]	@ 0x28
 80055bc:	2300      	movs	r3, #0
 80055be:	eba8 0807 	sub.w	r8, r8, r7
 80055c2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80055c4:	e7c4      	b.n	8005550 <_dtoa_r+0x1b0>
 80055c6:	2300      	movs	r3, #0
 80055c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80055ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	dc35      	bgt.n	800563c <_dtoa_r+0x29c>
 80055d0:	2301      	movs	r3, #1
 80055d2:	9300      	str	r3, [sp, #0]
 80055d4:	9307      	str	r3, [sp, #28]
 80055d6:	461a      	mov	r2, r3
 80055d8:	920e      	str	r2, [sp, #56]	@ 0x38
 80055da:	e00b      	b.n	80055f4 <_dtoa_r+0x254>
 80055dc:	2301      	movs	r3, #1
 80055de:	e7f3      	b.n	80055c8 <_dtoa_r+0x228>
 80055e0:	2300      	movs	r3, #0
 80055e2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80055e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80055e6:	18fb      	adds	r3, r7, r3
 80055e8:	9300      	str	r3, [sp, #0]
 80055ea:	3301      	adds	r3, #1
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	9307      	str	r3, [sp, #28]
 80055f0:	bfb8      	it	lt
 80055f2:	2301      	movlt	r3, #1
 80055f4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80055f8:	2100      	movs	r1, #0
 80055fa:	2204      	movs	r2, #4
 80055fc:	f102 0514 	add.w	r5, r2, #20
 8005600:	429d      	cmp	r5, r3
 8005602:	d91f      	bls.n	8005644 <_dtoa_r+0x2a4>
 8005604:	6041      	str	r1, [r0, #4]
 8005606:	4658      	mov	r0, fp
 8005608:	f000 fd8e 	bl	8006128 <_Balloc>
 800560c:	4682      	mov	sl, r0
 800560e:	2800      	cmp	r0, #0
 8005610:	d13c      	bne.n	800568c <_dtoa_r+0x2ec>
 8005612:	4b1b      	ldr	r3, [pc, #108]	@ (8005680 <_dtoa_r+0x2e0>)
 8005614:	4602      	mov	r2, r0
 8005616:	f240 11af 	movw	r1, #431	@ 0x1af
 800561a:	e6d8      	b.n	80053ce <_dtoa_r+0x2e>
 800561c:	2301      	movs	r3, #1
 800561e:	e7e0      	b.n	80055e2 <_dtoa_r+0x242>
 8005620:	2401      	movs	r4, #1
 8005622:	2300      	movs	r3, #0
 8005624:	9309      	str	r3, [sp, #36]	@ 0x24
 8005626:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005628:	f04f 33ff 	mov.w	r3, #4294967295
 800562c:	9300      	str	r3, [sp, #0]
 800562e:	9307      	str	r3, [sp, #28]
 8005630:	2200      	movs	r2, #0
 8005632:	2312      	movs	r3, #18
 8005634:	e7d0      	b.n	80055d8 <_dtoa_r+0x238>
 8005636:	2301      	movs	r3, #1
 8005638:	930b      	str	r3, [sp, #44]	@ 0x2c
 800563a:	e7f5      	b.n	8005628 <_dtoa_r+0x288>
 800563c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800563e:	9300      	str	r3, [sp, #0]
 8005640:	9307      	str	r3, [sp, #28]
 8005642:	e7d7      	b.n	80055f4 <_dtoa_r+0x254>
 8005644:	3101      	adds	r1, #1
 8005646:	0052      	lsls	r2, r2, #1
 8005648:	e7d8      	b.n	80055fc <_dtoa_r+0x25c>
 800564a:	bf00      	nop
 800564c:	f3af 8000 	nop.w
 8005650:	636f4361 	.word	0x636f4361
 8005654:	3fd287a7 	.word	0x3fd287a7
 8005658:	8b60c8b3 	.word	0x8b60c8b3
 800565c:	3fc68a28 	.word	0x3fc68a28
 8005660:	509f79fb 	.word	0x509f79fb
 8005664:	3fd34413 	.word	0x3fd34413
 8005668:	08007ac9 	.word	0x08007ac9
 800566c:	08007ae0 	.word	0x08007ae0
 8005670:	7ff00000 	.word	0x7ff00000
 8005674:	08007a99 	.word	0x08007a99
 8005678:	3ff80000 	.word	0x3ff80000
 800567c:	08007bd8 	.word	0x08007bd8
 8005680:	08007b38 	.word	0x08007b38
 8005684:	08007ac5 	.word	0x08007ac5
 8005688:	08007a98 	.word	0x08007a98
 800568c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005690:	6018      	str	r0, [r3, #0]
 8005692:	9b07      	ldr	r3, [sp, #28]
 8005694:	2b0e      	cmp	r3, #14
 8005696:	f200 80a4 	bhi.w	80057e2 <_dtoa_r+0x442>
 800569a:	2c00      	cmp	r4, #0
 800569c:	f000 80a1 	beq.w	80057e2 <_dtoa_r+0x442>
 80056a0:	2f00      	cmp	r7, #0
 80056a2:	dd33      	ble.n	800570c <_dtoa_r+0x36c>
 80056a4:	4bad      	ldr	r3, [pc, #692]	@ (800595c <_dtoa_r+0x5bc>)
 80056a6:	f007 020f 	and.w	r2, r7, #15
 80056aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80056ae:	ed93 7b00 	vldr	d7, [r3]
 80056b2:	05f8      	lsls	r0, r7, #23
 80056b4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80056b8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80056bc:	d516      	bpl.n	80056ec <_dtoa_r+0x34c>
 80056be:	4ba8      	ldr	r3, [pc, #672]	@ (8005960 <_dtoa_r+0x5c0>)
 80056c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80056c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80056c8:	f7fb f8e0 	bl	800088c <__aeabi_ddiv>
 80056cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80056d0:	f004 040f 	and.w	r4, r4, #15
 80056d4:	2603      	movs	r6, #3
 80056d6:	4da2      	ldr	r5, [pc, #648]	@ (8005960 <_dtoa_r+0x5c0>)
 80056d8:	b954      	cbnz	r4, 80056f0 <_dtoa_r+0x350>
 80056da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80056de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80056e2:	f7fb f8d3 	bl	800088c <__aeabi_ddiv>
 80056e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80056ea:	e028      	b.n	800573e <_dtoa_r+0x39e>
 80056ec:	2602      	movs	r6, #2
 80056ee:	e7f2      	b.n	80056d6 <_dtoa_r+0x336>
 80056f0:	07e1      	lsls	r1, r4, #31
 80056f2:	d508      	bpl.n	8005706 <_dtoa_r+0x366>
 80056f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80056f8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80056fc:	f7fa ff9c 	bl	8000638 <__aeabi_dmul>
 8005700:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005704:	3601      	adds	r6, #1
 8005706:	1064      	asrs	r4, r4, #1
 8005708:	3508      	adds	r5, #8
 800570a:	e7e5      	b.n	80056d8 <_dtoa_r+0x338>
 800570c:	f000 80d2 	beq.w	80058b4 <_dtoa_r+0x514>
 8005710:	427c      	negs	r4, r7
 8005712:	4b92      	ldr	r3, [pc, #584]	@ (800595c <_dtoa_r+0x5bc>)
 8005714:	4d92      	ldr	r5, [pc, #584]	@ (8005960 <_dtoa_r+0x5c0>)
 8005716:	f004 020f 	and.w	r2, r4, #15
 800571a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800571e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005722:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005726:	f7fa ff87 	bl	8000638 <__aeabi_dmul>
 800572a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800572e:	1124      	asrs	r4, r4, #4
 8005730:	2300      	movs	r3, #0
 8005732:	2602      	movs	r6, #2
 8005734:	2c00      	cmp	r4, #0
 8005736:	f040 80b2 	bne.w	800589e <_dtoa_r+0x4fe>
 800573a:	2b00      	cmp	r3, #0
 800573c:	d1d3      	bne.n	80056e6 <_dtoa_r+0x346>
 800573e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005740:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005744:	2b00      	cmp	r3, #0
 8005746:	f000 80b7 	beq.w	80058b8 <_dtoa_r+0x518>
 800574a:	4b86      	ldr	r3, [pc, #536]	@ (8005964 <_dtoa_r+0x5c4>)
 800574c:	2200      	movs	r2, #0
 800574e:	4620      	mov	r0, r4
 8005750:	4629      	mov	r1, r5
 8005752:	f7fb f9e3 	bl	8000b1c <__aeabi_dcmplt>
 8005756:	2800      	cmp	r0, #0
 8005758:	f000 80ae 	beq.w	80058b8 <_dtoa_r+0x518>
 800575c:	9b07      	ldr	r3, [sp, #28]
 800575e:	2b00      	cmp	r3, #0
 8005760:	f000 80aa 	beq.w	80058b8 <_dtoa_r+0x518>
 8005764:	9b00      	ldr	r3, [sp, #0]
 8005766:	2b00      	cmp	r3, #0
 8005768:	dd37      	ble.n	80057da <_dtoa_r+0x43a>
 800576a:	1e7b      	subs	r3, r7, #1
 800576c:	9304      	str	r3, [sp, #16]
 800576e:	4620      	mov	r0, r4
 8005770:	4b7d      	ldr	r3, [pc, #500]	@ (8005968 <_dtoa_r+0x5c8>)
 8005772:	2200      	movs	r2, #0
 8005774:	4629      	mov	r1, r5
 8005776:	f7fa ff5f 	bl	8000638 <__aeabi_dmul>
 800577a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800577e:	9c00      	ldr	r4, [sp, #0]
 8005780:	3601      	adds	r6, #1
 8005782:	4630      	mov	r0, r6
 8005784:	f7fa feee 	bl	8000564 <__aeabi_i2d>
 8005788:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800578c:	f7fa ff54 	bl	8000638 <__aeabi_dmul>
 8005790:	4b76      	ldr	r3, [pc, #472]	@ (800596c <_dtoa_r+0x5cc>)
 8005792:	2200      	movs	r2, #0
 8005794:	f7fa fd9a 	bl	80002cc <__adddf3>
 8005798:	4605      	mov	r5, r0
 800579a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800579e:	2c00      	cmp	r4, #0
 80057a0:	f040 808d 	bne.w	80058be <_dtoa_r+0x51e>
 80057a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80057a8:	4b71      	ldr	r3, [pc, #452]	@ (8005970 <_dtoa_r+0x5d0>)
 80057aa:	2200      	movs	r2, #0
 80057ac:	f7fa fd8c 	bl	80002c8 <__aeabi_dsub>
 80057b0:	4602      	mov	r2, r0
 80057b2:	460b      	mov	r3, r1
 80057b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80057b8:	462a      	mov	r2, r5
 80057ba:	4633      	mov	r3, r6
 80057bc:	f7fb f9cc 	bl	8000b58 <__aeabi_dcmpgt>
 80057c0:	2800      	cmp	r0, #0
 80057c2:	f040 828b 	bne.w	8005cdc <_dtoa_r+0x93c>
 80057c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80057ca:	462a      	mov	r2, r5
 80057cc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80057d0:	f7fb f9a4 	bl	8000b1c <__aeabi_dcmplt>
 80057d4:	2800      	cmp	r0, #0
 80057d6:	f040 8128 	bne.w	8005a2a <_dtoa_r+0x68a>
 80057da:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80057de:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80057e2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	f2c0 815a 	blt.w	8005a9e <_dtoa_r+0x6fe>
 80057ea:	2f0e      	cmp	r7, #14
 80057ec:	f300 8157 	bgt.w	8005a9e <_dtoa_r+0x6fe>
 80057f0:	4b5a      	ldr	r3, [pc, #360]	@ (800595c <_dtoa_r+0x5bc>)
 80057f2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80057f6:	ed93 7b00 	vldr	d7, [r3]
 80057fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	ed8d 7b00 	vstr	d7, [sp]
 8005802:	da03      	bge.n	800580c <_dtoa_r+0x46c>
 8005804:	9b07      	ldr	r3, [sp, #28]
 8005806:	2b00      	cmp	r3, #0
 8005808:	f340 8101 	ble.w	8005a0e <_dtoa_r+0x66e>
 800580c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005810:	4656      	mov	r6, sl
 8005812:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005816:	4620      	mov	r0, r4
 8005818:	4629      	mov	r1, r5
 800581a:	f7fb f837 	bl	800088c <__aeabi_ddiv>
 800581e:	f7fb f9bb 	bl	8000b98 <__aeabi_d2iz>
 8005822:	4680      	mov	r8, r0
 8005824:	f7fa fe9e 	bl	8000564 <__aeabi_i2d>
 8005828:	e9dd 2300 	ldrd	r2, r3, [sp]
 800582c:	f7fa ff04 	bl	8000638 <__aeabi_dmul>
 8005830:	4602      	mov	r2, r0
 8005832:	460b      	mov	r3, r1
 8005834:	4620      	mov	r0, r4
 8005836:	4629      	mov	r1, r5
 8005838:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800583c:	f7fa fd44 	bl	80002c8 <__aeabi_dsub>
 8005840:	f806 4b01 	strb.w	r4, [r6], #1
 8005844:	9d07      	ldr	r5, [sp, #28]
 8005846:	eba6 040a 	sub.w	r4, r6, sl
 800584a:	42a5      	cmp	r5, r4
 800584c:	4602      	mov	r2, r0
 800584e:	460b      	mov	r3, r1
 8005850:	f040 8117 	bne.w	8005a82 <_dtoa_r+0x6e2>
 8005854:	f7fa fd3a 	bl	80002cc <__adddf3>
 8005858:	e9dd 2300 	ldrd	r2, r3, [sp]
 800585c:	4604      	mov	r4, r0
 800585e:	460d      	mov	r5, r1
 8005860:	f7fb f97a 	bl	8000b58 <__aeabi_dcmpgt>
 8005864:	2800      	cmp	r0, #0
 8005866:	f040 80f9 	bne.w	8005a5c <_dtoa_r+0x6bc>
 800586a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800586e:	4620      	mov	r0, r4
 8005870:	4629      	mov	r1, r5
 8005872:	f7fb f949 	bl	8000b08 <__aeabi_dcmpeq>
 8005876:	b118      	cbz	r0, 8005880 <_dtoa_r+0x4e0>
 8005878:	f018 0f01 	tst.w	r8, #1
 800587c:	f040 80ee 	bne.w	8005a5c <_dtoa_r+0x6bc>
 8005880:	4649      	mov	r1, r9
 8005882:	4658      	mov	r0, fp
 8005884:	f000 fc90 	bl	80061a8 <_Bfree>
 8005888:	2300      	movs	r3, #0
 800588a:	7033      	strb	r3, [r6, #0]
 800588c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800588e:	3701      	adds	r7, #1
 8005890:	601f      	str	r7, [r3, #0]
 8005892:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005894:	2b00      	cmp	r3, #0
 8005896:	f000 831d 	beq.w	8005ed4 <_dtoa_r+0xb34>
 800589a:	601e      	str	r6, [r3, #0]
 800589c:	e31a      	b.n	8005ed4 <_dtoa_r+0xb34>
 800589e:	07e2      	lsls	r2, r4, #31
 80058a0:	d505      	bpl.n	80058ae <_dtoa_r+0x50e>
 80058a2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80058a6:	f7fa fec7 	bl	8000638 <__aeabi_dmul>
 80058aa:	3601      	adds	r6, #1
 80058ac:	2301      	movs	r3, #1
 80058ae:	1064      	asrs	r4, r4, #1
 80058b0:	3508      	adds	r5, #8
 80058b2:	e73f      	b.n	8005734 <_dtoa_r+0x394>
 80058b4:	2602      	movs	r6, #2
 80058b6:	e742      	b.n	800573e <_dtoa_r+0x39e>
 80058b8:	9c07      	ldr	r4, [sp, #28]
 80058ba:	9704      	str	r7, [sp, #16]
 80058bc:	e761      	b.n	8005782 <_dtoa_r+0x3e2>
 80058be:	4b27      	ldr	r3, [pc, #156]	@ (800595c <_dtoa_r+0x5bc>)
 80058c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80058c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80058c6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80058ca:	4454      	add	r4, sl
 80058cc:	2900      	cmp	r1, #0
 80058ce:	d053      	beq.n	8005978 <_dtoa_r+0x5d8>
 80058d0:	4928      	ldr	r1, [pc, #160]	@ (8005974 <_dtoa_r+0x5d4>)
 80058d2:	2000      	movs	r0, #0
 80058d4:	f7fa ffda 	bl	800088c <__aeabi_ddiv>
 80058d8:	4633      	mov	r3, r6
 80058da:	462a      	mov	r2, r5
 80058dc:	f7fa fcf4 	bl	80002c8 <__aeabi_dsub>
 80058e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80058e4:	4656      	mov	r6, sl
 80058e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80058ea:	f7fb f955 	bl	8000b98 <__aeabi_d2iz>
 80058ee:	4605      	mov	r5, r0
 80058f0:	f7fa fe38 	bl	8000564 <__aeabi_i2d>
 80058f4:	4602      	mov	r2, r0
 80058f6:	460b      	mov	r3, r1
 80058f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80058fc:	f7fa fce4 	bl	80002c8 <__aeabi_dsub>
 8005900:	3530      	adds	r5, #48	@ 0x30
 8005902:	4602      	mov	r2, r0
 8005904:	460b      	mov	r3, r1
 8005906:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800590a:	f806 5b01 	strb.w	r5, [r6], #1
 800590e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005912:	f7fb f903 	bl	8000b1c <__aeabi_dcmplt>
 8005916:	2800      	cmp	r0, #0
 8005918:	d171      	bne.n	80059fe <_dtoa_r+0x65e>
 800591a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800591e:	4911      	ldr	r1, [pc, #68]	@ (8005964 <_dtoa_r+0x5c4>)
 8005920:	2000      	movs	r0, #0
 8005922:	f7fa fcd1 	bl	80002c8 <__aeabi_dsub>
 8005926:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800592a:	f7fb f8f7 	bl	8000b1c <__aeabi_dcmplt>
 800592e:	2800      	cmp	r0, #0
 8005930:	f040 8095 	bne.w	8005a5e <_dtoa_r+0x6be>
 8005934:	42a6      	cmp	r6, r4
 8005936:	f43f af50 	beq.w	80057da <_dtoa_r+0x43a>
 800593a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800593e:	4b0a      	ldr	r3, [pc, #40]	@ (8005968 <_dtoa_r+0x5c8>)
 8005940:	2200      	movs	r2, #0
 8005942:	f7fa fe79 	bl	8000638 <__aeabi_dmul>
 8005946:	4b08      	ldr	r3, [pc, #32]	@ (8005968 <_dtoa_r+0x5c8>)
 8005948:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800594c:	2200      	movs	r2, #0
 800594e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005952:	f7fa fe71 	bl	8000638 <__aeabi_dmul>
 8005956:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800595a:	e7c4      	b.n	80058e6 <_dtoa_r+0x546>
 800595c:	08007bd8 	.word	0x08007bd8
 8005960:	08007bb0 	.word	0x08007bb0
 8005964:	3ff00000 	.word	0x3ff00000
 8005968:	40240000 	.word	0x40240000
 800596c:	401c0000 	.word	0x401c0000
 8005970:	40140000 	.word	0x40140000
 8005974:	3fe00000 	.word	0x3fe00000
 8005978:	4631      	mov	r1, r6
 800597a:	4628      	mov	r0, r5
 800597c:	f7fa fe5c 	bl	8000638 <__aeabi_dmul>
 8005980:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005984:	9415      	str	r4, [sp, #84]	@ 0x54
 8005986:	4656      	mov	r6, sl
 8005988:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800598c:	f7fb f904 	bl	8000b98 <__aeabi_d2iz>
 8005990:	4605      	mov	r5, r0
 8005992:	f7fa fde7 	bl	8000564 <__aeabi_i2d>
 8005996:	4602      	mov	r2, r0
 8005998:	460b      	mov	r3, r1
 800599a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800599e:	f7fa fc93 	bl	80002c8 <__aeabi_dsub>
 80059a2:	3530      	adds	r5, #48	@ 0x30
 80059a4:	f806 5b01 	strb.w	r5, [r6], #1
 80059a8:	4602      	mov	r2, r0
 80059aa:	460b      	mov	r3, r1
 80059ac:	42a6      	cmp	r6, r4
 80059ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80059b2:	f04f 0200 	mov.w	r2, #0
 80059b6:	d124      	bne.n	8005a02 <_dtoa_r+0x662>
 80059b8:	4bac      	ldr	r3, [pc, #688]	@ (8005c6c <_dtoa_r+0x8cc>)
 80059ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80059be:	f7fa fc85 	bl	80002cc <__adddf3>
 80059c2:	4602      	mov	r2, r0
 80059c4:	460b      	mov	r3, r1
 80059c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80059ca:	f7fb f8c5 	bl	8000b58 <__aeabi_dcmpgt>
 80059ce:	2800      	cmp	r0, #0
 80059d0:	d145      	bne.n	8005a5e <_dtoa_r+0x6be>
 80059d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80059d6:	49a5      	ldr	r1, [pc, #660]	@ (8005c6c <_dtoa_r+0x8cc>)
 80059d8:	2000      	movs	r0, #0
 80059da:	f7fa fc75 	bl	80002c8 <__aeabi_dsub>
 80059de:	4602      	mov	r2, r0
 80059e0:	460b      	mov	r3, r1
 80059e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80059e6:	f7fb f899 	bl	8000b1c <__aeabi_dcmplt>
 80059ea:	2800      	cmp	r0, #0
 80059ec:	f43f aef5 	beq.w	80057da <_dtoa_r+0x43a>
 80059f0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80059f2:	1e73      	subs	r3, r6, #1
 80059f4:	9315      	str	r3, [sp, #84]	@ 0x54
 80059f6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80059fa:	2b30      	cmp	r3, #48	@ 0x30
 80059fc:	d0f8      	beq.n	80059f0 <_dtoa_r+0x650>
 80059fe:	9f04      	ldr	r7, [sp, #16]
 8005a00:	e73e      	b.n	8005880 <_dtoa_r+0x4e0>
 8005a02:	4b9b      	ldr	r3, [pc, #620]	@ (8005c70 <_dtoa_r+0x8d0>)
 8005a04:	f7fa fe18 	bl	8000638 <__aeabi_dmul>
 8005a08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a0c:	e7bc      	b.n	8005988 <_dtoa_r+0x5e8>
 8005a0e:	d10c      	bne.n	8005a2a <_dtoa_r+0x68a>
 8005a10:	4b98      	ldr	r3, [pc, #608]	@ (8005c74 <_dtoa_r+0x8d4>)
 8005a12:	2200      	movs	r2, #0
 8005a14:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005a18:	f7fa fe0e 	bl	8000638 <__aeabi_dmul>
 8005a1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005a20:	f7fb f890 	bl	8000b44 <__aeabi_dcmpge>
 8005a24:	2800      	cmp	r0, #0
 8005a26:	f000 8157 	beq.w	8005cd8 <_dtoa_r+0x938>
 8005a2a:	2400      	movs	r4, #0
 8005a2c:	4625      	mov	r5, r4
 8005a2e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005a30:	43db      	mvns	r3, r3
 8005a32:	9304      	str	r3, [sp, #16]
 8005a34:	4656      	mov	r6, sl
 8005a36:	2700      	movs	r7, #0
 8005a38:	4621      	mov	r1, r4
 8005a3a:	4658      	mov	r0, fp
 8005a3c:	f000 fbb4 	bl	80061a8 <_Bfree>
 8005a40:	2d00      	cmp	r5, #0
 8005a42:	d0dc      	beq.n	80059fe <_dtoa_r+0x65e>
 8005a44:	b12f      	cbz	r7, 8005a52 <_dtoa_r+0x6b2>
 8005a46:	42af      	cmp	r7, r5
 8005a48:	d003      	beq.n	8005a52 <_dtoa_r+0x6b2>
 8005a4a:	4639      	mov	r1, r7
 8005a4c:	4658      	mov	r0, fp
 8005a4e:	f000 fbab 	bl	80061a8 <_Bfree>
 8005a52:	4629      	mov	r1, r5
 8005a54:	4658      	mov	r0, fp
 8005a56:	f000 fba7 	bl	80061a8 <_Bfree>
 8005a5a:	e7d0      	b.n	80059fe <_dtoa_r+0x65e>
 8005a5c:	9704      	str	r7, [sp, #16]
 8005a5e:	4633      	mov	r3, r6
 8005a60:	461e      	mov	r6, r3
 8005a62:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005a66:	2a39      	cmp	r2, #57	@ 0x39
 8005a68:	d107      	bne.n	8005a7a <_dtoa_r+0x6da>
 8005a6a:	459a      	cmp	sl, r3
 8005a6c:	d1f8      	bne.n	8005a60 <_dtoa_r+0x6c0>
 8005a6e:	9a04      	ldr	r2, [sp, #16]
 8005a70:	3201      	adds	r2, #1
 8005a72:	9204      	str	r2, [sp, #16]
 8005a74:	2230      	movs	r2, #48	@ 0x30
 8005a76:	f88a 2000 	strb.w	r2, [sl]
 8005a7a:	781a      	ldrb	r2, [r3, #0]
 8005a7c:	3201      	adds	r2, #1
 8005a7e:	701a      	strb	r2, [r3, #0]
 8005a80:	e7bd      	b.n	80059fe <_dtoa_r+0x65e>
 8005a82:	4b7b      	ldr	r3, [pc, #492]	@ (8005c70 <_dtoa_r+0x8d0>)
 8005a84:	2200      	movs	r2, #0
 8005a86:	f7fa fdd7 	bl	8000638 <__aeabi_dmul>
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	4604      	mov	r4, r0
 8005a90:	460d      	mov	r5, r1
 8005a92:	f7fb f839 	bl	8000b08 <__aeabi_dcmpeq>
 8005a96:	2800      	cmp	r0, #0
 8005a98:	f43f aebb 	beq.w	8005812 <_dtoa_r+0x472>
 8005a9c:	e6f0      	b.n	8005880 <_dtoa_r+0x4e0>
 8005a9e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005aa0:	2a00      	cmp	r2, #0
 8005aa2:	f000 80db 	beq.w	8005c5c <_dtoa_r+0x8bc>
 8005aa6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005aa8:	2a01      	cmp	r2, #1
 8005aaa:	f300 80bf 	bgt.w	8005c2c <_dtoa_r+0x88c>
 8005aae:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8005ab0:	2a00      	cmp	r2, #0
 8005ab2:	f000 80b7 	beq.w	8005c24 <_dtoa_r+0x884>
 8005ab6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005aba:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005abc:	4646      	mov	r6, r8
 8005abe:	9a08      	ldr	r2, [sp, #32]
 8005ac0:	2101      	movs	r1, #1
 8005ac2:	441a      	add	r2, r3
 8005ac4:	4658      	mov	r0, fp
 8005ac6:	4498      	add	r8, r3
 8005ac8:	9208      	str	r2, [sp, #32]
 8005aca:	f000 fc21 	bl	8006310 <__i2b>
 8005ace:	4605      	mov	r5, r0
 8005ad0:	b15e      	cbz	r6, 8005aea <_dtoa_r+0x74a>
 8005ad2:	9b08      	ldr	r3, [sp, #32]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	dd08      	ble.n	8005aea <_dtoa_r+0x74a>
 8005ad8:	42b3      	cmp	r3, r6
 8005ada:	9a08      	ldr	r2, [sp, #32]
 8005adc:	bfa8      	it	ge
 8005ade:	4633      	movge	r3, r6
 8005ae0:	eba8 0803 	sub.w	r8, r8, r3
 8005ae4:	1af6      	subs	r6, r6, r3
 8005ae6:	1ad3      	subs	r3, r2, r3
 8005ae8:	9308      	str	r3, [sp, #32]
 8005aea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005aec:	b1f3      	cbz	r3, 8005b2c <_dtoa_r+0x78c>
 8005aee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	f000 80b7 	beq.w	8005c64 <_dtoa_r+0x8c4>
 8005af6:	b18c      	cbz	r4, 8005b1c <_dtoa_r+0x77c>
 8005af8:	4629      	mov	r1, r5
 8005afa:	4622      	mov	r2, r4
 8005afc:	4658      	mov	r0, fp
 8005afe:	f000 fcc7 	bl	8006490 <__pow5mult>
 8005b02:	464a      	mov	r2, r9
 8005b04:	4601      	mov	r1, r0
 8005b06:	4605      	mov	r5, r0
 8005b08:	4658      	mov	r0, fp
 8005b0a:	f000 fc17 	bl	800633c <__multiply>
 8005b0e:	4649      	mov	r1, r9
 8005b10:	9004      	str	r0, [sp, #16]
 8005b12:	4658      	mov	r0, fp
 8005b14:	f000 fb48 	bl	80061a8 <_Bfree>
 8005b18:	9b04      	ldr	r3, [sp, #16]
 8005b1a:	4699      	mov	r9, r3
 8005b1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005b1e:	1b1a      	subs	r2, r3, r4
 8005b20:	d004      	beq.n	8005b2c <_dtoa_r+0x78c>
 8005b22:	4649      	mov	r1, r9
 8005b24:	4658      	mov	r0, fp
 8005b26:	f000 fcb3 	bl	8006490 <__pow5mult>
 8005b2a:	4681      	mov	r9, r0
 8005b2c:	2101      	movs	r1, #1
 8005b2e:	4658      	mov	r0, fp
 8005b30:	f000 fbee 	bl	8006310 <__i2b>
 8005b34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005b36:	4604      	mov	r4, r0
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	f000 81cf 	beq.w	8005edc <_dtoa_r+0xb3c>
 8005b3e:	461a      	mov	r2, r3
 8005b40:	4601      	mov	r1, r0
 8005b42:	4658      	mov	r0, fp
 8005b44:	f000 fca4 	bl	8006490 <__pow5mult>
 8005b48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	4604      	mov	r4, r0
 8005b4e:	f300 8095 	bgt.w	8005c7c <_dtoa_r+0x8dc>
 8005b52:	9b02      	ldr	r3, [sp, #8]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	f040 8087 	bne.w	8005c68 <_dtoa_r+0x8c8>
 8005b5a:	9b03      	ldr	r3, [sp, #12]
 8005b5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	f040 8089 	bne.w	8005c78 <_dtoa_r+0x8d8>
 8005b66:	9b03      	ldr	r3, [sp, #12]
 8005b68:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005b6c:	0d1b      	lsrs	r3, r3, #20
 8005b6e:	051b      	lsls	r3, r3, #20
 8005b70:	b12b      	cbz	r3, 8005b7e <_dtoa_r+0x7de>
 8005b72:	9b08      	ldr	r3, [sp, #32]
 8005b74:	3301      	adds	r3, #1
 8005b76:	9308      	str	r3, [sp, #32]
 8005b78:	f108 0801 	add.w	r8, r8, #1
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005b80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	f000 81b0 	beq.w	8005ee8 <_dtoa_r+0xb48>
 8005b88:	6923      	ldr	r3, [r4, #16]
 8005b8a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005b8e:	6918      	ldr	r0, [r3, #16]
 8005b90:	f000 fb72 	bl	8006278 <__hi0bits>
 8005b94:	f1c0 0020 	rsb	r0, r0, #32
 8005b98:	9b08      	ldr	r3, [sp, #32]
 8005b9a:	4418      	add	r0, r3
 8005b9c:	f010 001f 	ands.w	r0, r0, #31
 8005ba0:	d077      	beq.n	8005c92 <_dtoa_r+0x8f2>
 8005ba2:	f1c0 0320 	rsb	r3, r0, #32
 8005ba6:	2b04      	cmp	r3, #4
 8005ba8:	dd6b      	ble.n	8005c82 <_dtoa_r+0x8e2>
 8005baa:	9b08      	ldr	r3, [sp, #32]
 8005bac:	f1c0 001c 	rsb	r0, r0, #28
 8005bb0:	4403      	add	r3, r0
 8005bb2:	4480      	add	r8, r0
 8005bb4:	4406      	add	r6, r0
 8005bb6:	9308      	str	r3, [sp, #32]
 8005bb8:	f1b8 0f00 	cmp.w	r8, #0
 8005bbc:	dd05      	ble.n	8005bca <_dtoa_r+0x82a>
 8005bbe:	4649      	mov	r1, r9
 8005bc0:	4642      	mov	r2, r8
 8005bc2:	4658      	mov	r0, fp
 8005bc4:	f000 fcbe 	bl	8006544 <__lshift>
 8005bc8:	4681      	mov	r9, r0
 8005bca:	9b08      	ldr	r3, [sp, #32]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	dd05      	ble.n	8005bdc <_dtoa_r+0x83c>
 8005bd0:	4621      	mov	r1, r4
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	4658      	mov	r0, fp
 8005bd6:	f000 fcb5 	bl	8006544 <__lshift>
 8005bda:	4604      	mov	r4, r0
 8005bdc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d059      	beq.n	8005c96 <_dtoa_r+0x8f6>
 8005be2:	4621      	mov	r1, r4
 8005be4:	4648      	mov	r0, r9
 8005be6:	f000 fd19 	bl	800661c <__mcmp>
 8005bea:	2800      	cmp	r0, #0
 8005bec:	da53      	bge.n	8005c96 <_dtoa_r+0x8f6>
 8005bee:	1e7b      	subs	r3, r7, #1
 8005bf0:	9304      	str	r3, [sp, #16]
 8005bf2:	4649      	mov	r1, r9
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	220a      	movs	r2, #10
 8005bf8:	4658      	mov	r0, fp
 8005bfa:	f000 faf7 	bl	80061ec <__multadd>
 8005bfe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005c00:	4681      	mov	r9, r0
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	f000 8172 	beq.w	8005eec <_dtoa_r+0xb4c>
 8005c08:	2300      	movs	r3, #0
 8005c0a:	4629      	mov	r1, r5
 8005c0c:	220a      	movs	r2, #10
 8005c0e:	4658      	mov	r0, fp
 8005c10:	f000 faec 	bl	80061ec <__multadd>
 8005c14:	9b00      	ldr	r3, [sp, #0]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	4605      	mov	r5, r0
 8005c1a:	dc67      	bgt.n	8005cec <_dtoa_r+0x94c>
 8005c1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c1e:	2b02      	cmp	r3, #2
 8005c20:	dc41      	bgt.n	8005ca6 <_dtoa_r+0x906>
 8005c22:	e063      	b.n	8005cec <_dtoa_r+0x94c>
 8005c24:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005c26:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005c2a:	e746      	b.n	8005aba <_dtoa_r+0x71a>
 8005c2c:	9b07      	ldr	r3, [sp, #28]
 8005c2e:	1e5c      	subs	r4, r3, #1
 8005c30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005c32:	42a3      	cmp	r3, r4
 8005c34:	bfbf      	itttt	lt
 8005c36:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005c38:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8005c3a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8005c3c:	1ae3      	sublt	r3, r4, r3
 8005c3e:	bfb4      	ite	lt
 8005c40:	18d2      	addlt	r2, r2, r3
 8005c42:	1b1c      	subge	r4, r3, r4
 8005c44:	9b07      	ldr	r3, [sp, #28]
 8005c46:	bfbc      	itt	lt
 8005c48:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8005c4a:	2400      	movlt	r4, #0
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	bfb5      	itete	lt
 8005c50:	eba8 0603 	sublt.w	r6, r8, r3
 8005c54:	9b07      	ldrge	r3, [sp, #28]
 8005c56:	2300      	movlt	r3, #0
 8005c58:	4646      	movge	r6, r8
 8005c5a:	e730      	b.n	8005abe <_dtoa_r+0x71e>
 8005c5c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005c5e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005c60:	4646      	mov	r6, r8
 8005c62:	e735      	b.n	8005ad0 <_dtoa_r+0x730>
 8005c64:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005c66:	e75c      	b.n	8005b22 <_dtoa_r+0x782>
 8005c68:	2300      	movs	r3, #0
 8005c6a:	e788      	b.n	8005b7e <_dtoa_r+0x7de>
 8005c6c:	3fe00000 	.word	0x3fe00000
 8005c70:	40240000 	.word	0x40240000
 8005c74:	40140000 	.word	0x40140000
 8005c78:	9b02      	ldr	r3, [sp, #8]
 8005c7a:	e780      	b.n	8005b7e <_dtoa_r+0x7de>
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005c80:	e782      	b.n	8005b88 <_dtoa_r+0x7e8>
 8005c82:	d099      	beq.n	8005bb8 <_dtoa_r+0x818>
 8005c84:	9a08      	ldr	r2, [sp, #32]
 8005c86:	331c      	adds	r3, #28
 8005c88:	441a      	add	r2, r3
 8005c8a:	4498      	add	r8, r3
 8005c8c:	441e      	add	r6, r3
 8005c8e:	9208      	str	r2, [sp, #32]
 8005c90:	e792      	b.n	8005bb8 <_dtoa_r+0x818>
 8005c92:	4603      	mov	r3, r0
 8005c94:	e7f6      	b.n	8005c84 <_dtoa_r+0x8e4>
 8005c96:	9b07      	ldr	r3, [sp, #28]
 8005c98:	9704      	str	r7, [sp, #16]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	dc20      	bgt.n	8005ce0 <_dtoa_r+0x940>
 8005c9e:	9300      	str	r3, [sp, #0]
 8005ca0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ca2:	2b02      	cmp	r3, #2
 8005ca4:	dd1e      	ble.n	8005ce4 <_dtoa_r+0x944>
 8005ca6:	9b00      	ldr	r3, [sp, #0]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	f47f aec0 	bne.w	8005a2e <_dtoa_r+0x68e>
 8005cae:	4621      	mov	r1, r4
 8005cb0:	2205      	movs	r2, #5
 8005cb2:	4658      	mov	r0, fp
 8005cb4:	f000 fa9a 	bl	80061ec <__multadd>
 8005cb8:	4601      	mov	r1, r0
 8005cba:	4604      	mov	r4, r0
 8005cbc:	4648      	mov	r0, r9
 8005cbe:	f000 fcad 	bl	800661c <__mcmp>
 8005cc2:	2800      	cmp	r0, #0
 8005cc4:	f77f aeb3 	ble.w	8005a2e <_dtoa_r+0x68e>
 8005cc8:	4656      	mov	r6, sl
 8005cca:	2331      	movs	r3, #49	@ 0x31
 8005ccc:	f806 3b01 	strb.w	r3, [r6], #1
 8005cd0:	9b04      	ldr	r3, [sp, #16]
 8005cd2:	3301      	adds	r3, #1
 8005cd4:	9304      	str	r3, [sp, #16]
 8005cd6:	e6ae      	b.n	8005a36 <_dtoa_r+0x696>
 8005cd8:	9c07      	ldr	r4, [sp, #28]
 8005cda:	9704      	str	r7, [sp, #16]
 8005cdc:	4625      	mov	r5, r4
 8005cde:	e7f3      	b.n	8005cc8 <_dtoa_r+0x928>
 8005ce0:	9b07      	ldr	r3, [sp, #28]
 8005ce2:	9300      	str	r3, [sp, #0]
 8005ce4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	f000 8104 	beq.w	8005ef4 <_dtoa_r+0xb54>
 8005cec:	2e00      	cmp	r6, #0
 8005cee:	dd05      	ble.n	8005cfc <_dtoa_r+0x95c>
 8005cf0:	4629      	mov	r1, r5
 8005cf2:	4632      	mov	r2, r6
 8005cf4:	4658      	mov	r0, fp
 8005cf6:	f000 fc25 	bl	8006544 <__lshift>
 8005cfa:	4605      	mov	r5, r0
 8005cfc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d05a      	beq.n	8005db8 <_dtoa_r+0xa18>
 8005d02:	6869      	ldr	r1, [r5, #4]
 8005d04:	4658      	mov	r0, fp
 8005d06:	f000 fa0f 	bl	8006128 <_Balloc>
 8005d0a:	4606      	mov	r6, r0
 8005d0c:	b928      	cbnz	r0, 8005d1a <_dtoa_r+0x97a>
 8005d0e:	4b84      	ldr	r3, [pc, #528]	@ (8005f20 <_dtoa_r+0xb80>)
 8005d10:	4602      	mov	r2, r0
 8005d12:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005d16:	f7ff bb5a 	b.w	80053ce <_dtoa_r+0x2e>
 8005d1a:	692a      	ldr	r2, [r5, #16]
 8005d1c:	3202      	adds	r2, #2
 8005d1e:	0092      	lsls	r2, r2, #2
 8005d20:	f105 010c 	add.w	r1, r5, #12
 8005d24:	300c      	adds	r0, #12
 8005d26:	f000 ffaf 	bl	8006c88 <memcpy>
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	4631      	mov	r1, r6
 8005d2e:	4658      	mov	r0, fp
 8005d30:	f000 fc08 	bl	8006544 <__lshift>
 8005d34:	f10a 0301 	add.w	r3, sl, #1
 8005d38:	9307      	str	r3, [sp, #28]
 8005d3a:	9b00      	ldr	r3, [sp, #0]
 8005d3c:	4453      	add	r3, sl
 8005d3e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005d40:	9b02      	ldr	r3, [sp, #8]
 8005d42:	f003 0301 	and.w	r3, r3, #1
 8005d46:	462f      	mov	r7, r5
 8005d48:	930a      	str	r3, [sp, #40]	@ 0x28
 8005d4a:	4605      	mov	r5, r0
 8005d4c:	9b07      	ldr	r3, [sp, #28]
 8005d4e:	4621      	mov	r1, r4
 8005d50:	3b01      	subs	r3, #1
 8005d52:	4648      	mov	r0, r9
 8005d54:	9300      	str	r3, [sp, #0]
 8005d56:	f7ff fa98 	bl	800528a <quorem>
 8005d5a:	4639      	mov	r1, r7
 8005d5c:	9002      	str	r0, [sp, #8]
 8005d5e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005d62:	4648      	mov	r0, r9
 8005d64:	f000 fc5a 	bl	800661c <__mcmp>
 8005d68:	462a      	mov	r2, r5
 8005d6a:	9008      	str	r0, [sp, #32]
 8005d6c:	4621      	mov	r1, r4
 8005d6e:	4658      	mov	r0, fp
 8005d70:	f000 fc70 	bl	8006654 <__mdiff>
 8005d74:	68c2      	ldr	r2, [r0, #12]
 8005d76:	4606      	mov	r6, r0
 8005d78:	bb02      	cbnz	r2, 8005dbc <_dtoa_r+0xa1c>
 8005d7a:	4601      	mov	r1, r0
 8005d7c:	4648      	mov	r0, r9
 8005d7e:	f000 fc4d 	bl	800661c <__mcmp>
 8005d82:	4602      	mov	r2, r0
 8005d84:	4631      	mov	r1, r6
 8005d86:	4658      	mov	r0, fp
 8005d88:	920e      	str	r2, [sp, #56]	@ 0x38
 8005d8a:	f000 fa0d 	bl	80061a8 <_Bfree>
 8005d8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d90:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005d92:	9e07      	ldr	r6, [sp, #28]
 8005d94:	ea43 0102 	orr.w	r1, r3, r2
 8005d98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005d9a:	4319      	orrs	r1, r3
 8005d9c:	d110      	bne.n	8005dc0 <_dtoa_r+0xa20>
 8005d9e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005da2:	d029      	beq.n	8005df8 <_dtoa_r+0xa58>
 8005da4:	9b08      	ldr	r3, [sp, #32]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	dd02      	ble.n	8005db0 <_dtoa_r+0xa10>
 8005daa:	9b02      	ldr	r3, [sp, #8]
 8005dac:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8005db0:	9b00      	ldr	r3, [sp, #0]
 8005db2:	f883 8000 	strb.w	r8, [r3]
 8005db6:	e63f      	b.n	8005a38 <_dtoa_r+0x698>
 8005db8:	4628      	mov	r0, r5
 8005dba:	e7bb      	b.n	8005d34 <_dtoa_r+0x994>
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	e7e1      	b.n	8005d84 <_dtoa_r+0x9e4>
 8005dc0:	9b08      	ldr	r3, [sp, #32]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	db04      	blt.n	8005dd0 <_dtoa_r+0xa30>
 8005dc6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005dc8:	430b      	orrs	r3, r1
 8005dca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005dcc:	430b      	orrs	r3, r1
 8005dce:	d120      	bne.n	8005e12 <_dtoa_r+0xa72>
 8005dd0:	2a00      	cmp	r2, #0
 8005dd2:	dded      	ble.n	8005db0 <_dtoa_r+0xa10>
 8005dd4:	4649      	mov	r1, r9
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	4658      	mov	r0, fp
 8005dda:	f000 fbb3 	bl	8006544 <__lshift>
 8005dde:	4621      	mov	r1, r4
 8005de0:	4681      	mov	r9, r0
 8005de2:	f000 fc1b 	bl	800661c <__mcmp>
 8005de6:	2800      	cmp	r0, #0
 8005de8:	dc03      	bgt.n	8005df2 <_dtoa_r+0xa52>
 8005dea:	d1e1      	bne.n	8005db0 <_dtoa_r+0xa10>
 8005dec:	f018 0f01 	tst.w	r8, #1
 8005df0:	d0de      	beq.n	8005db0 <_dtoa_r+0xa10>
 8005df2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005df6:	d1d8      	bne.n	8005daa <_dtoa_r+0xa0a>
 8005df8:	9a00      	ldr	r2, [sp, #0]
 8005dfa:	2339      	movs	r3, #57	@ 0x39
 8005dfc:	7013      	strb	r3, [r2, #0]
 8005dfe:	4633      	mov	r3, r6
 8005e00:	461e      	mov	r6, r3
 8005e02:	3b01      	subs	r3, #1
 8005e04:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005e08:	2a39      	cmp	r2, #57	@ 0x39
 8005e0a:	d052      	beq.n	8005eb2 <_dtoa_r+0xb12>
 8005e0c:	3201      	adds	r2, #1
 8005e0e:	701a      	strb	r2, [r3, #0]
 8005e10:	e612      	b.n	8005a38 <_dtoa_r+0x698>
 8005e12:	2a00      	cmp	r2, #0
 8005e14:	dd07      	ble.n	8005e26 <_dtoa_r+0xa86>
 8005e16:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005e1a:	d0ed      	beq.n	8005df8 <_dtoa_r+0xa58>
 8005e1c:	9a00      	ldr	r2, [sp, #0]
 8005e1e:	f108 0301 	add.w	r3, r8, #1
 8005e22:	7013      	strb	r3, [r2, #0]
 8005e24:	e608      	b.n	8005a38 <_dtoa_r+0x698>
 8005e26:	9b07      	ldr	r3, [sp, #28]
 8005e28:	9a07      	ldr	r2, [sp, #28]
 8005e2a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8005e2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d028      	beq.n	8005e86 <_dtoa_r+0xae6>
 8005e34:	4649      	mov	r1, r9
 8005e36:	2300      	movs	r3, #0
 8005e38:	220a      	movs	r2, #10
 8005e3a:	4658      	mov	r0, fp
 8005e3c:	f000 f9d6 	bl	80061ec <__multadd>
 8005e40:	42af      	cmp	r7, r5
 8005e42:	4681      	mov	r9, r0
 8005e44:	f04f 0300 	mov.w	r3, #0
 8005e48:	f04f 020a 	mov.w	r2, #10
 8005e4c:	4639      	mov	r1, r7
 8005e4e:	4658      	mov	r0, fp
 8005e50:	d107      	bne.n	8005e62 <_dtoa_r+0xac2>
 8005e52:	f000 f9cb 	bl	80061ec <__multadd>
 8005e56:	4607      	mov	r7, r0
 8005e58:	4605      	mov	r5, r0
 8005e5a:	9b07      	ldr	r3, [sp, #28]
 8005e5c:	3301      	adds	r3, #1
 8005e5e:	9307      	str	r3, [sp, #28]
 8005e60:	e774      	b.n	8005d4c <_dtoa_r+0x9ac>
 8005e62:	f000 f9c3 	bl	80061ec <__multadd>
 8005e66:	4629      	mov	r1, r5
 8005e68:	4607      	mov	r7, r0
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	220a      	movs	r2, #10
 8005e6e:	4658      	mov	r0, fp
 8005e70:	f000 f9bc 	bl	80061ec <__multadd>
 8005e74:	4605      	mov	r5, r0
 8005e76:	e7f0      	b.n	8005e5a <_dtoa_r+0xaba>
 8005e78:	9b00      	ldr	r3, [sp, #0]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	bfcc      	ite	gt
 8005e7e:	461e      	movgt	r6, r3
 8005e80:	2601      	movle	r6, #1
 8005e82:	4456      	add	r6, sl
 8005e84:	2700      	movs	r7, #0
 8005e86:	4649      	mov	r1, r9
 8005e88:	2201      	movs	r2, #1
 8005e8a:	4658      	mov	r0, fp
 8005e8c:	f000 fb5a 	bl	8006544 <__lshift>
 8005e90:	4621      	mov	r1, r4
 8005e92:	4681      	mov	r9, r0
 8005e94:	f000 fbc2 	bl	800661c <__mcmp>
 8005e98:	2800      	cmp	r0, #0
 8005e9a:	dcb0      	bgt.n	8005dfe <_dtoa_r+0xa5e>
 8005e9c:	d102      	bne.n	8005ea4 <_dtoa_r+0xb04>
 8005e9e:	f018 0f01 	tst.w	r8, #1
 8005ea2:	d1ac      	bne.n	8005dfe <_dtoa_r+0xa5e>
 8005ea4:	4633      	mov	r3, r6
 8005ea6:	461e      	mov	r6, r3
 8005ea8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005eac:	2a30      	cmp	r2, #48	@ 0x30
 8005eae:	d0fa      	beq.n	8005ea6 <_dtoa_r+0xb06>
 8005eb0:	e5c2      	b.n	8005a38 <_dtoa_r+0x698>
 8005eb2:	459a      	cmp	sl, r3
 8005eb4:	d1a4      	bne.n	8005e00 <_dtoa_r+0xa60>
 8005eb6:	9b04      	ldr	r3, [sp, #16]
 8005eb8:	3301      	adds	r3, #1
 8005eba:	9304      	str	r3, [sp, #16]
 8005ebc:	2331      	movs	r3, #49	@ 0x31
 8005ebe:	f88a 3000 	strb.w	r3, [sl]
 8005ec2:	e5b9      	b.n	8005a38 <_dtoa_r+0x698>
 8005ec4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005ec6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8005f24 <_dtoa_r+0xb84>
 8005eca:	b11b      	cbz	r3, 8005ed4 <_dtoa_r+0xb34>
 8005ecc:	f10a 0308 	add.w	r3, sl, #8
 8005ed0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005ed2:	6013      	str	r3, [r2, #0]
 8005ed4:	4650      	mov	r0, sl
 8005ed6:	b019      	add	sp, #100	@ 0x64
 8005ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005edc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	f77f ae37 	ble.w	8005b52 <_dtoa_r+0x7b2>
 8005ee4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005ee6:	930a      	str	r3, [sp, #40]	@ 0x28
 8005ee8:	2001      	movs	r0, #1
 8005eea:	e655      	b.n	8005b98 <_dtoa_r+0x7f8>
 8005eec:	9b00      	ldr	r3, [sp, #0]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	f77f aed6 	ble.w	8005ca0 <_dtoa_r+0x900>
 8005ef4:	4656      	mov	r6, sl
 8005ef6:	4621      	mov	r1, r4
 8005ef8:	4648      	mov	r0, r9
 8005efa:	f7ff f9c6 	bl	800528a <quorem>
 8005efe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005f02:	f806 8b01 	strb.w	r8, [r6], #1
 8005f06:	9b00      	ldr	r3, [sp, #0]
 8005f08:	eba6 020a 	sub.w	r2, r6, sl
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	ddb3      	ble.n	8005e78 <_dtoa_r+0xad8>
 8005f10:	4649      	mov	r1, r9
 8005f12:	2300      	movs	r3, #0
 8005f14:	220a      	movs	r2, #10
 8005f16:	4658      	mov	r0, fp
 8005f18:	f000 f968 	bl	80061ec <__multadd>
 8005f1c:	4681      	mov	r9, r0
 8005f1e:	e7ea      	b.n	8005ef6 <_dtoa_r+0xb56>
 8005f20:	08007b38 	.word	0x08007b38
 8005f24:	08007abc 	.word	0x08007abc

08005f28 <_free_r>:
 8005f28:	b538      	push	{r3, r4, r5, lr}
 8005f2a:	4605      	mov	r5, r0
 8005f2c:	2900      	cmp	r1, #0
 8005f2e:	d041      	beq.n	8005fb4 <_free_r+0x8c>
 8005f30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f34:	1f0c      	subs	r4, r1, #4
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	bfb8      	it	lt
 8005f3a:	18e4      	addlt	r4, r4, r3
 8005f3c:	f000 f8e8 	bl	8006110 <__malloc_lock>
 8005f40:	4a1d      	ldr	r2, [pc, #116]	@ (8005fb8 <_free_r+0x90>)
 8005f42:	6813      	ldr	r3, [r2, #0]
 8005f44:	b933      	cbnz	r3, 8005f54 <_free_r+0x2c>
 8005f46:	6063      	str	r3, [r4, #4]
 8005f48:	6014      	str	r4, [r2, #0]
 8005f4a:	4628      	mov	r0, r5
 8005f4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f50:	f000 b8e4 	b.w	800611c <__malloc_unlock>
 8005f54:	42a3      	cmp	r3, r4
 8005f56:	d908      	bls.n	8005f6a <_free_r+0x42>
 8005f58:	6820      	ldr	r0, [r4, #0]
 8005f5a:	1821      	adds	r1, r4, r0
 8005f5c:	428b      	cmp	r3, r1
 8005f5e:	bf01      	itttt	eq
 8005f60:	6819      	ldreq	r1, [r3, #0]
 8005f62:	685b      	ldreq	r3, [r3, #4]
 8005f64:	1809      	addeq	r1, r1, r0
 8005f66:	6021      	streq	r1, [r4, #0]
 8005f68:	e7ed      	b.n	8005f46 <_free_r+0x1e>
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	b10b      	cbz	r3, 8005f74 <_free_r+0x4c>
 8005f70:	42a3      	cmp	r3, r4
 8005f72:	d9fa      	bls.n	8005f6a <_free_r+0x42>
 8005f74:	6811      	ldr	r1, [r2, #0]
 8005f76:	1850      	adds	r0, r2, r1
 8005f78:	42a0      	cmp	r0, r4
 8005f7a:	d10b      	bne.n	8005f94 <_free_r+0x6c>
 8005f7c:	6820      	ldr	r0, [r4, #0]
 8005f7e:	4401      	add	r1, r0
 8005f80:	1850      	adds	r0, r2, r1
 8005f82:	4283      	cmp	r3, r0
 8005f84:	6011      	str	r1, [r2, #0]
 8005f86:	d1e0      	bne.n	8005f4a <_free_r+0x22>
 8005f88:	6818      	ldr	r0, [r3, #0]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	6053      	str	r3, [r2, #4]
 8005f8e:	4408      	add	r0, r1
 8005f90:	6010      	str	r0, [r2, #0]
 8005f92:	e7da      	b.n	8005f4a <_free_r+0x22>
 8005f94:	d902      	bls.n	8005f9c <_free_r+0x74>
 8005f96:	230c      	movs	r3, #12
 8005f98:	602b      	str	r3, [r5, #0]
 8005f9a:	e7d6      	b.n	8005f4a <_free_r+0x22>
 8005f9c:	6820      	ldr	r0, [r4, #0]
 8005f9e:	1821      	adds	r1, r4, r0
 8005fa0:	428b      	cmp	r3, r1
 8005fa2:	bf04      	itt	eq
 8005fa4:	6819      	ldreq	r1, [r3, #0]
 8005fa6:	685b      	ldreq	r3, [r3, #4]
 8005fa8:	6063      	str	r3, [r4, #4]
 8005faa:	bf04      	itt	eq
 8005fac:	1809      	addeq	r1, r1, r0
 8005fae:	6021      	streq	r1, [r4, #0]
 8005fb0:	6054      	str	r4, [r2, #4]
 8005fb2:	e7ca      	b.n	8005f4a <_free_r+0x22>
 8005fb4:	bd38      	pop	{r3, r4, r5, pc}
 8005fb6:	bf00      	nop
 8005fb8:	200003f8 	.word	0x200003f8

08005fbc <malloc>:
 8005fbc:	4b02      	ldr	r3, [pc, #8]	@ (8005fc8 <malloc+0xc>)
 8005fbe:	4601      	mov	r1, r0
 8005fc0:	6818      	ldr	r0, [r3, #0]
 8005fc2:	f000 b825 	b.w	8006010 <_malloc_r>
 8005fc6:	bf00      	nop
 8005fc8:	2000001c 	.word	0x2000001c

08005fcc <sbrk_aligned>:
 8005fcc:	b570      	push	{r4, r5, r6, lr}
 8005fce:	4e0f      	ldr	r6, [pc, #60]	@ (800600c <sbrk_aligned+0x40>)
 8005fd0:	460c      	mov	r4, r1
 8005fd2:	6831      	ldr	r1, [r6, #0]
 8005fd4:	4605      	mov	r5, r0
 8005fd6:	b911      	cbnz	r1, 8005fde <sbrk_aligned+0x12>
 8005fd8:	f000 fe46 	bl	8006c68 <_sbrk_r>
 8005fdc:	6030      	str	r0, [r6, #0]
 8005fde:	4621      	mov	r1, r4
 8005fe0:	4628      	mov	r0, r5
 8005fe2:	f000 fe41 	bl	8006c68 <_sbrk_r>
 8005fe6:	1c43      	adds	r3, r0, #1
 8005fe8:	d103      	bne.n	8005ff2 <sbrk_aligned+0x26>
 8005fea:	f04f 34ff 	mov.w	r4, #4294967295
 8005fee:	4620      	mov	r0, r4
 8005ff0:	bd70      	pop	{r4, r5, r6, pc}
 8005ff2:	1cc4      	adds	r4, r0, #3
 8005ff4:	f024 0403 	bic.w	r4, r4, #3
 8005ff8:	42a0      	cmp	r0, r4
 8005ffa:	d0f8      	beq.n	8005fee <sbrk_aligned+0x22>
 8005ffc:	1a21      	subs	r1, r4, r0
 8005ffe:	4628      	mov	r0, r5
 8006000:	f000 fe32 	bl	8006c68 <_sbrk_r>
 8006004:	3001      	adds	r0, #1
 8006006:	d1f2      	bne.n	8005fee <sbrk_aligned+0x22>
 8006008:	e7ef      	b.n	8005fea <sbrk_aligned+0x1e>
 800600a:	bf00      	nop
 800600c:	200003f4 	.word	0x200003f4

08006010 <_malloc_r>:
 8006010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006014:	1ccd      	adds	r5, r1, #3
 8006016:	f025 0503 	bic.w	r5, r5, #3
 800601a:	3508      	adds	r5, #8
 800601c:	2d0c      	cmp	r5, #12
 800601e:	bf38      	it	cc
 8006020:	250c      	movcc	r5, #12
 8006022:	2d00      	cmp	r5, #0
 8006024:	4606      	mov	r6, r0
 8006026:	db01      	blt.n	800602c <_malloc_r+0x1c>
 8006028:	42a9      	cmp	r1, r5
 800602a:	d904      	bls.n	8006036 <_malloc_r+0x26>
 800602c:	230c      	movs	r3, #12
 800602e:	6033      	str	r3, [r6, #0]
 8006030:	2000      	movs	r0, #0
 8006032:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006036:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800610c <_malloc_r+0xfc>
 800603a:	f000 f869 	bl	8006110 <__malloc_lock>
 800603e:	f8d8 3000 	ldr.w	r3, [r8]
 8006042:	461c      	mov	r4, r3
 8006044:	bb44      	cbnz	r4, 8006098 <_malloc_r+0x88>
 8006046:	4629      	mov	r1, r5
 8006048:	4630      	mov	r0, r6
 800604a:	f7ff ffbf 	bl	8005fcc <sbrk_aligned>
 800604e:	1c43      	adds	r3, r0, #1
 8006050:	4604      	mov	r4, r0
 8006052:	d158      	bne.n	8006106 <_malloc_r+0xf6>
 8006054:	f8d8 4000 	ldr.w	r4, [r8]
 8006058:	4627      	mov	r7, r4
 800605a:	2f00      	cmp	r7, #0
 800605c:	d143      	bne.n	80060e6 <_malloc_r+0xd6>
 800605e:	2c00      	cmp	r4, #0
 8006060:	d04b      	beq.n	80060fa <_malloc_r+0xea>
 8006062:	6823      	ldr	r3, [r4, #0]
 8006064:	4639      	mov	r1, r7
 8006066:	4630      	mov	r0, r6
 8006068:	eb04 0903 	add.w	r9, r4, r3
 800606c:	f000 fdfc 	bl	8006c68 <_sbrk_r>
 8006070:	4581      	cmp	r9, r0
 8006072:	d142      	bne.n	80060fa <_malloc_r+0xea>
 8006074:	6821      	ldr	r1, [r4, #0]
 8006076:	1a6d      	subs	r5, r5, r1
 8006078:	4629      	mov	r1, r5
 800607a:	4630      	mov	r0, r6
 800607c:	f7ff ffa6 	bl	8005fcc <sbrk_aligned>
 8006080:	3001      	adds	r0, #1
 8006082:	d03a      	beq.n	80060fa <_malloc_r+0xea>
 8006084:	6823      	ldr	r3, [r4, #0]
 8006086:	442b      	add	r3, r5
 8006088:	6023      	str	r3, [r4, #0]
 800608a:	f8d8 3000 	ldr.w	r3, [r8]
 800608e:	685a      	ldr	r2, [r3, #4]
 8006090:	bb62      	cbnz	r2, 80060ec <_malloc_r+0xdc>
 8006092:	f8c8 7000 	str.w	r7, [r8]
 8006096:	e00f      	b.n	80060b8 <_malloc_r+0xa8>
 8006098:	6822      	ldr	r2, [r4, #0]
 800609a:	1b52      	subs	r2, r2, r5
 800609c:	d420      	bmi.n	80060e0 <_malloc_r+0xd0>
 800609e:	2a0b      	cmp	r2, #11
 80060a0:	d917      	bls.n	80060d2 <_malloc_r+0xc2>
 80060a2:	1961      	adds	r1, r4, r5
 80060a4:	42a3      	cmp	r3, r4
 80060a6:	6025      	str	r5, [r4, #0]
 80060a8:	bf18      	it	ne
 80060aa:	6059      	strne	r1, [r3, #4]
 80060ac:	6863      	ldr	r3, [r4, #4]
 80060ae:	bf08      	it	eq
 80060b0:	f8c8 1000 	streq.w	r1, [r8]
 80060b4:	5162      	str	r2, [r4, r5]
 80060b6:	604b      	str	r3, [r1, #4]
 80060b8:	4630      	mov	r0, r6
 80060ba:	f000 f82f 	bl	800611c <__malloc_unlock>
 80060be:	f104 000b 	add.w	r0, r4, #11
 80060c2:	1d23      	adds	r3, r4, #4
 80060c4:	f020 0007 	bic.w	r0, r0, #7
 80060c8:	1ac2      	subs	r2, r0, r3
 80060ca:	bf1c      	itt	ne
 80060cc:	1a1b      	subne	r3, r3, r0
 80060ce:	50a3      	strne	r3, [r4, r2]
 80060d0:	e7af      	b.n	8006032 <_malloc_r+0x22>
 80060d2:	6862      	ldr	r2, [r4, #4]
 80060d4:	42a3      	cmp	r3, r4
 80060d6:	bf0c      	ite	eq
 80060d8:	f8c8 2000 	streq.w	r2, [r8]
 80060dc:	605a      	strne	r2, [r3, #4]
 80060de:	e7eb      	b.n	80060b8 <_malloc_r+0xa8>
 80060e0:	4623      	mov	r3, r4
 80060e2:	6864      	ldr	r4, [r4, #4]
 80060e4:	e7ae      	b.n	8006044 <_malloc_r+0x34>
 80060e6:	463c      	mov	r4, r7
 80060e8:	687f      	ldr	r7, [r7, #4]
 80060ea:	e7b6      	b.n	800605a <_malloc_r+0x4a>
 80060ec:	461a      	mov	r2, r3
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	42a3      	cmp	r3, r4
 80060f2:	d1fb      	bne.n	80060ec <_malloc_r+0xdc>
 80060f4:	2300      	movs	r3, #0
 80060f6:	6053      	str	r3, [r2, #4]
 80060f8:	e7de      	b.n	80060b8 <_malloc_r+0xa8>
 80060fa:	230c      	movs	r3, #12
 80060fc:	6033      	str	r3, [r6, #0]
 80060fe:	4630      	mov	r0, r6
 8006100:	f000 f80c 	bl	800611c <__malloc_unlock>
 8006104:	e794      	b.n	8006030 <_malloc_r+0x20>
 8006106:	6005      	str	r5, [r0, #0]
 8006108:	e7d6      	b.n	80060b8 <_malloc_r+0xa8>
 800610a:	bf00      	nop
 800610c:	200003f8 	.word	0x200003f8

08006110 <__malloc_lock>:
 8006110:	4801      	ldr	r0, [pc, #4]	@ (8006118 <__malloc_lock+0x8>)
 8006112:	f7ff b8b8 	b.w	8005286 <__retarget_lock_acquire_recursive>
 8006116:	bf00      	nop
 8006118:	200003f0 	.word	0x200003f0

0800611c <__malloc_unlock>:
 800611c:	4801      	ldr	r0, [pc, #4]	@ (8006124 <__malloc_unlock+0x8>)
 800611e:	f7ff b8b3 	b.w	8005288 <__retarget_lock_release_recursive>
 8006122:	bf00      	nop
 8006124:	200003f0 	.word	0x200003f0

08006128 <_Balloc>:
 8006128:	b570      	push	{r4, r5, r6, lr}
 800612a:	69c6      	ldr	r6, [r0, #28]
 800612c:	4604      	mov	r4, r0
 800612e:	460d      	mov	r5, r1
 8006130:	b976      	cbnz	r6, 8006150 <_Balloc+0x28>
 8006132:	2010      	movs	r0, #16
 8006134:	f7ff ff42 	bl	8005fbc <malloc>
 8006138:	4602      	mov	r2, r0
 800613a:	61e0      	str	r0, [r4, #28]
 800613c:	b920      	cbnz	r0, 8006148 <_Balloc+0x20>
 800613e:	4b18      	ldr	r3, [pc, #96]	@ (80061a0 <_Balloc+0x78>)
 8006140:	4818      	ldr	r0, [pc, #96]	@ (80061a4 <_Balloc+0x7c>)
 8006142:	216b      	movs	r1, #107	@ 0x6b
 8006144:	f000 fdae 	bl	8006ca4 <__assert_func>
 8006148:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800614c:	6006      	str	r6, [r0, #0]
 800614e:	60c6      	str	r6, [r0, #12]
 8006150:	69e6      	ldr	r6, [r4, #28]
 8006152:	68f3      	ldr	r3, [r6, #12]
 8006154:	b183      	cbz	r3, 8006178 <_Balloc+0x50>
 8006156:	69e3      	ldr	r3, [r4, #28]
 8006158:	68db      	ldr	r3, [r3, #12]
 800615a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800615e:	b9b8      	cbnz	r0, 8006190 <_Balloc+0x68>
 8006160:	2101      	movs	r1, #1
 8006162:	fa01 f605 	lsl.w	r6, r1, r5
 8006166:	1d72      	adds	r2, r6, #5
 8006168:	0092      	lsls	r2, r2, #2
 800616a:	4620      	mov	r0, r4
 800616c:	f000 fdb8 	bl	8006ce0 <_calloc_r>
 8006170:	b160      	cbz	r0, 800618c <_Balloc+0x64>
 8006172:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006176:	e00e      	b.n	8006196 <_Balloc+0x6e>
 8006178:	2221      	movs	r2, #33	@ 0x21
 800617a:	2104      	movs	r1, #4
 800617c:	4620      	mov	r0, r4
 800617e:	f000 fdaf 	bl	8006ce0 <_calloc_r>
 8006182:	69e3      	ldr	r3, [r4, #28]
 8006184:	60f0      	str	r0, [r6, #12]
 8006186:	68db      	ldr	r3, [r3, #12]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d1e4      	bne.n	8006156 <_Balloc+0x2e>
 800618c:	2000      	movs	r0, #0
 800618e:	bd70      	pop	{r4, r5, r6, pc}
 8006190:	6802      	ldr	r2, [r0, #0]
 8006192:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006196:	2300      	movs	r3, #0
 8006198:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800619c:	e7f7      	b.n	800618e <_Balloc+0x66>
 800619e:	bf00      	nop
 80061a0:	08007ac9 	.word	0x08007ac9
 80061a4:	08007b49 	.word	0x08007b49

080061a8 <_Bfree>:
 80061a8:	b570      	push	{r4, r5, r6, lr}
 80061aa:	69c6      	ldr	r6, [r0, #28]
 80061ac:	4605      	mov	r5, r0
 80061ae:	460c      	mov	r4, r1
 80061b0:	b976      	cbnz	r6, 80061d0 <_Bfree+0x28>
 80061b2:	2010      	movs	r0, #16
 80061b4:	f7ff ff02 	bl	8005fbc <malloc>
 80061b8:	4602      	mov	r2, r0
 80061ba:	61e8      	str	r0, [r5, #28]
 80061bc:	b920      	cbnz	r0, 80061c8 <_Bfree+0x20>
 80061be:	4b09      	ldr	r3, [pc, #36]	@ (80061e4 <_Bfree+0x3c>)
 80061c0:	4809      	ldr	r0, [pc, #36]	@ (80061e8 <_Bfree+0x40>)
 80061c2:	218f      	movs	r1, #143	@ 0x8f
 80061c4:	f000 fd6e 	bl	8006ca4 <__assert_func>
 80061c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80061cc:	6006      	str	r6, [r0, #0]
 80061ce:	60c6      	str	r6, [r0, #12]
 80061d0:	b13c      	cbz	r4, 80061e2 <_Bfree+0x3a>
 80061d2:	69eb      	ldr	r3, [r5, #28]
 80061d4:	6862      	ldr	r2, [r4, #4]
 80061d6:	68db      	ldr	r3, [r3, #12]
 80061d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80061dc:	6021      	str	r1, [r4, #0]
 80061de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80061e2:	bd70      	pop	{r4, r5, r6, pc}
 80061e4:	08007ac9 	.word	0x08007ac9
 80061e8:	08007b49 	.word	0x08007b49

080061ec <__multadd>:
 80061ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061f0:	690d      	ldr	r5, [r1, #16]
 80061f2:	4607      	mov	r7, r0
 80061f4:	460c      	mov	r4, r1
 80061f6:	461e      	mov	r6, r3
 80061f8:	f101 0c14 	add.w	ip, r1, #20
 80061fc:	2000      	movs	r0, #0
 80061fe:	f8dc 3000 	ldr.w	r3, [ip]
 8006202:	b299      	uxth	r1, r3
 8006204:	fb02 6101 	mla	r1, r2, r1, r6
 8006208:	0c1e      	lsrs	r6, r3, #16
 800620a:	0c0b      	lsrs	r3, r1, #16
 800620c:	fb02 3306 	mla	r3, r2, r6, r3
 8006210:	b289      	uxth	r1, r1
 8006212:	3001      	adds	r0, #1
 8006214:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006218:	4285      	cmp	r5, r0
 800621a:	f84c 1b04 	str.w	r1, [ip], #4
 800621e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006222:	dcec      	bgt.n	80061fe <__multadd+0x12>
 8006224:	b30e      	cbz	r6, 800626a <__multadd+0x7e>
 8006226:	68a3      	ldr	r3, [r4, #8]
 8006228:	42ab      	cmp	r3, r5
 800622a:	dc19      	bgt.n	8006260 <__multadd+0x74>
 800622c:	6861      	ldr	r1, [r4, #4]
 800622e:	4638      	mov	r0, r7
 8006230:	3101      	adds	r1, #1
 8006232:	f7ff ff79 	bl	8006128 <_Balloc>
 8006236:	4680      	mov	r8, r0
 8006238:	b928      	cbnz	r0, 8006246 <__multadd+0x5a>
 800623a:	4602      	mov	r2, r0
 800623c:	4b0c      	ldr	r3, [pc, #48]	@ (8006270 <__multadd+0x84>)
 800623e:	480d      	ldr	r0, [pc, #52]	@ (8006274 <__multadd+0x88>)
 8006240:	21ba      	movs	r1, #186	@ 0xba
 8006242:	f000 fd2f 	bl	8006ca4 <__assert_func>
 8006246:	6922      	ldr	r2, [r4, #16]
 8006248:	3202      	adds	r2, #2
 800624a:	f104 010c 	add.w	r1, r4, #12
 800624e:	0092      	lsls	r2, r2, #2
 8006250:	300c      	adds	r0, #12
 8006252:	f000 fd19 	bl	8006c88 <memcpy>
 8006256:	4621      	mov	r1, r4
 8006258:	4638      	mov	r0, r7
 800625a:	f7ff ffa5 	bl	80061a8 <_Bfree>
 800625e:	4644      	mov	r4, r8
 8006260:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006264:	3501      	adds	r5, #1
 8006266:	615e      	str	r6, [r3, #20]
 8006268:	6125      	str	r5, [r4, #16]
 800626a:	4620      	mov	r0, r4
 800626c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006270:	08007b38 	.word	0x08007b38
 8006274:	08007b49 	.word	0x08007b49

08006278 <__hi0bits>:
 8006278:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800627c:	4603      	mov	r3, r0
 800627e:	bf36      	itet	cc
 8006280:	0403      	lslcc	r3, r0, #16
 8006282:	2000      	movcs	r0, #0
 8006284:	2010      	movcc	r0, #16
 8006286:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800628a:	bf3c      	itt	cc
 800628c:	021b      	lslcc	r3, r3, #8
 800628e:	3008      	addcc	r0, #8
 8006290:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006294:	bf3c      	itt	cc
 8006296:	011b      	lslcc	r3, r3, #4
 8006298:	3004      	addcc	r0, #4
 800629a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800629e:	bf3c      	itt	cc
 80062a0:	009b      	lslcc	r3, r3, #2
 80062a2:	3002      	addcc	r0, #2
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	db05      	blt.n	80062b4 <__hi0bits+0x3c>
 80062a8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80062ac:	f100 0001 	add.w	r0, r0, #1
 80062b0:	bf08      	it	eq
 80062b2:	2020      	moveq	r0, #32
 80062b4:	4770      	bx	lr

080062b6 <__lo0bits>:
 80062b6:	6803      	ldr	r3, [r0, #0]
 80062b8:	4602      	mov	r2, r0
 80062ba:	f013 0007 	ands.w	r0, r3, #7
 80062be:	d00b      	beq.n	80062d8 <__lo0bits+0x22>
 80062c0:	07d9      	lsls	r1, r3, #31
 80062c2:	d421      	bmi.n	8006308 <__lo0bits+0x52>
 80062c4:	0798      	lsls	r0, r3, #30
 80062c6:	bf49      	itett	mi
 80062c8:	085b      	lsrmi	r3, r3, #1
 80062ca:	089b      	lsrpl	r3, r3, #2
 80062cc:	2001      	movmi	r0, #1
 80062ce:	6013      	strmi	r3, [r2, #0]
 80062d0:	bf5c      	itt	pl
 80062d2:	6013      	strpl	r3, [r2, #0]
 80062d4:	2002      	movpl	r0, #2
 80062d6:	4770      	bx	lr
 80062d8:	b299      	uxth	r1, r3
 80062da:	b909      	cbnz	r1, 80062e0 <__lo0bits+0x2a>
 80062dc:	0c1b      	lsrs	r3, r3, #16
 80062de:	2010      	movs	r0, #16
 80062e0:	b2d9      	uxtb	r1, r3
 80062e2:	b909      	cbnz	r1, 80062e8 <__lo0bits+0x32>
 80062e4:	3008      	adds	r0, #8
 80062e6:	0a1b      	lsrs	r3, r3, #8
 80062e8:	0719      	lsls	r1, r3, #28
 80062ea:	bf04      	itt	eq
 80062ec:	091b      	lsreq	r3, r3, #4
 80062ee:	3004      	addeq	r0, #4
 80062f0:	0799      	lsls	r1, r3, #30
 80062f2:	bf04      	itt	eq
 80062f4:	089b      	lsreq	r3, r3, #2
 80062f6:	3002      	addeq	r0, #2
 80062f8:	07d9      	lsls	r1, r3, #31
 80062fa:	d403      	bmi.n	8006304 <__lo0bits+0x4e>
 80062fc:	085b      	lsrs	r3, r3, #1
 80062fe:	f100 0001 	add.w	r0, r0, #1
 8006302:	d003      	beq.n	800630c <__lo0bits+0x56>
 8006304:	6013      	str	r3, [r2, #0]
 8006306:	4770      	bx	lr
 8006308:	2000      	movs	r0, #0
 800630a:	4770      	bx	lr
 800630c:	2020      	movs	r0, #32
 800630e:	4770      	bx	lr

08006310 <__i2b>:
 8006310:	b510      	push	{r4, lr}
 8006312:	460c      	mov	r4, r1
 8006314:	2101      	movs	r1, #1
 8006316:	f7ff ff07 	bl	8006128 <_Balloc>
 800631a:	4602      	mov	r2, r0
 800631c:	b928      	cbnz	r0, 800632a <__i2b+0x1a>
 800631e:	4b05      	ldr	r3, [pc, #20]	@ (8006334 <__i2b+0x24>)
 8006320:	4805      	ldr	r0, [pc, #20]	@ (8006338 <__i2b+0x28>)
 8006322:	f240 1145 	movw	r1, #325	@ 0x145
 8006326:	f000 fcbd 	bl	8006ca4 <__assert_func>
 800632a:	2301      	movs	r3, #1
 800632c:	6144      	str	r4, [r0, #20]
 800632e:	6103      	str	r3, [r0, #16]
 8006330:	bd10      	pop	{r4, pc}
 8006332:	bf00      	nop
 8006334:	08007b38 	.word	0x08007b38
 8006338:	08007b49 	.word	0x08007b49

0800633c <__multiply>:
 800633c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006340:	4614      	mov	r4, r2
 8006342:	690a      	ldr	r2, [r1, #16]
 8006344:	6923      	ldr	r3, [r4, #16]
 8006346:	429a      	cmp	r2, r3
 8006348:	bfa8      	it	ge
 800634a:	4623      	movge	r3, r4
 800634c:	460f      	mov	r7, r1
 800634e:	bfa4      	itt	ge
 8006350:	460c      	movge	r4, r1
 8006352:	461f      	movge	r7, r3
 8006354:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006358:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800635c:	68a3      	ldr	r3, [r4, #8]
 800635e:	6861      	ldr	r1, [r4, #4]
 8006360:	eb0a 0609 	add.w	r6, sl, r9
 8006364:	42b3      	cmp	r3, r6
 8006366:	b085      	sub	sp, #20
 8006368:	bfb8      	it	lt
 800636a:	3101      	addlt	r1, #1
 800636c:	f7ff fedc 	bl	8006128 <_Balloc>
 8006370:	b930      	cbnz	r0, 8006380 <__multiply+0x44>
 8006372:	4602      	mov	r2, r0
 8006374:	4b44      	ldr	r3, [pc, #272]	@ (8006488 <__multiply+0x14c>)
 8006376:	4845      	ldr	r0, [pc, #276]	@ (800648c <__multiply+0x150>)
 8006378:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800637c:	f000 fc92 	bl	8006ca4 <__assert_func>
 8006380:	f100 0514 	add.w	r5, r0, #20
 8006384:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006388:	462b      	mov	r3, r5
 800638a:	2200      	movs	r2, #0
 800638c:	4543      	cmp	r3, r8
 800638e:	d321      	bcc.n	80063d4 <__multiply+0x98>
 8006390:	f107 0114 	add.w	r1, r7, #20
 8006394:	f104 0214 	add.w	r2, r4, #20
 8006398:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800639c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80063a0:	9302      	str	r3, [sp, #8]
 80063a2:	1b13      	subs	r3, r2, r4
 80063a4:	3b15      	subs	r3, #21
 80063a6:	f023 0303 	bic.w	r3, r3, #3
 80063aa:	3304      	adds	r3, #4
 80063ac:	f104 0715 	add.w	r7, r4, #21
 80063b0:	42ba      	cmp	r2, r7
 80063b2:	bf38      	it	cc
 80063b4:	2304      	movcc	r3, #4
 80063b6:	9301      	str	r3, [sp, #4]
 80063b8:	9b02      	ldr	r3, [sp, #8]
 80063ba:	9103      	str	r1, [sp, #12]
 80063bc:	428b      	cmp	r3, r1
 80063be:	d80c      	bhi.n	80063da <__multiply+0x9e>
 80063c0:	2e00      	cmp	r6, #0
 80063c2:	dd03      	ble.n	80063cc <__multiply+0x90>
 80063c4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d05b      	beq.n	8006484 <__multiply+0x148>
 80063cc:	6106      	str	r6, [r0, #16]
 80063ce:	b005      	add	sp, #20
 80063d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063d4:	f843 2b04 	str.w	r2, [r3], #4
 80063d8:	e7d8      	b.n	800638c <__multiply+0x50>
 80063da:	f8b1 a000 	ldrh.w	sl, [r1]
 80063de:	f1ba 0f00 	cmp.w	sl, #0
 80063e2:	d024      	beq.n	800642e <__multiply+0xf2>
 80063e4:	f104 0e14 	add.w	lr, r4, #20
 80063e8:	46a9      	mov	r9, r5
 80063ea:	f04f 0c00 	mov.w	ip, #0
 80063ee:	f85e 7b04 	ldr.w	r7, [lr], #4
 80063f2:	f8d9 3000 	ldr.w	r3, [r9]
 80063f6:	fa1f fb87 	uxth.w	fp, r7
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	fb0a 330b 	mla	r3, sl, fp, r3
 8006400:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006404:	f8d9 7000 	ldr.w	r7, [r9]
 8006408:	4463      	add	r3, ip
 800640a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800640e:	fb0a c70b 	mla	r7, sl, fp, ip
 8006412:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006416:	b29b      	uxth	r3, r3
 8006418:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800641c:	4572      	cmp	r2, lr
 800641e:	f849 3b04 	str.w	r3, [r9], #4
 8006422:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006426:	d8e2      	bhi.n	80063ee <__multiply+0xb2>
 8006428:	9b01      	ldr	r3, [sp, #4]
 800642a:	f845 c003 	str.w	ip, [r5, r3]
 800642e:	9b03      	ldr	r3, [sp, #12]
 8006430:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006434:	3104      	adds	r1, #4
 8006436:	f1b9 0f00 	cmp.w	r9, #0
 800643a:	d021      	beq.n	8006480 <__multiply+0x144>
 800643c:	682b      	ldr	r3, [r5, #0]
 800643e:	f104 0c14 	add.w	ip, r4, #20
 8006442:	46ae      	mov	lr, r5
 8006444:	f04f 0a00 	mov.w	sl, #0
 8006448:	f8bc b000 	ldrh.w	fp, [ip]
 800644c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006450:	fb09 770b 	mla	r7, r9, fp, r7
 8006454:	4457      	add	r7, sl
 8006456:	b29b      	uxth	r3, r3
 8006458:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800645c:	f84e 3b04 	str.w	r3, [lr], #4
 8006460:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006464:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006468:	f8be 3000 	ldrh.w	r3, [lr]
 800646c:	fb09 330a 	mla	r3, r9, sl, r3
 8006470:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006474:	4562      	cmp	r2, ip
 8006476:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800647a:	d8e5      	bhi.n	8006448 <__multiply+0x10c>
 800647c:	9f01      	ldr	r7, [sp, #4]
 800647e:	51eb      	str	r3, [r5, r7]
 8006480:	3504      	adds	r5, #4
 8006482:	e799      	b.n	80063b8 <__multiply+0x7c>
 8006484:	3e01      	subs	r6, #1
 8006486:	e79b      	b.n	80063c0 <__multiply+0x84>
 8006488:	08007b38 	.word	0x08007b38
 800648c:	08007b49 	.word	0x08007b49

08006490 <__pow5mult>:
 8006490:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006494:	4615      	mov	r5, r2
 8006496:	f012 0203 	ands.w	r2, r2, #3
 800649a:	4607      	mov	r7, r0
 800649c:	460e      	mov	r6, r1
 800649e:	d007      	beq.n	80064b0 <__pow5mult+0x20>
 80064a0:	4c25      	ldr	r4, [pc, #148]	@ (8006538 <__pow5mult+0xa8>)
 80064a2:	3a01      	subs	r2, #1
 80064a4:	2300      	movs	r3, #0
 80064a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80064aa:	f7ff fe9f 	bl	80061ec <__multadd>
 80064ae:	4606      	mov	r6, r0
 80064b0:	10ad      	asrs	r5, r5, #2
 80064b2:	d03d      	beq.n	8006530 <__pow5mult+0xa0>
 80064b4:	69fc      	ldr	r4, [r7, #28]
 80064b6:	b97c      	cbnz	r4, 80064d8 <__pow5mult+0x48>
 80064b8:	2010      	movs	r0, #16
 80064ba:	f7ff fd7f 	bl	8005fbc <malloc>
 80064be:	4602      	mov	r2, r0
 80064c0:	61f8      	str	r0, [r7, #28]
 80064c2:	b928      	cbnz	r0, 80064d0 <__pow5mult+0x40>
 80064c4:	4b1d      	ldr	r3, [pc, #116]	@ (800653c <__pow5mult+0xac>)
 80064c6:	481e      	ldr	r0, [pc, #120]	@ (8006540 <__pow5mult+0xb0>)
 80064c8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80064cc:	f000 fbea 	bl	8006ca4 <__assert_func>
 80064d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80064d4:	6004      	str	r4, [r0, #0]
 80064d6:	60c4      	str	r4, [r0, #12]
 80064d8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80064dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80064e0:	b94c      	cbnz	r4, 80064f6 <__pow5mult+0x66>
 80064e2:	f240 2171 	movw	r1, #625	@ 0x271
 80064e6:	4638      	mov	r0, r7
 80064e8:	f7ff ff12 	bl	8006310 <__i2b>
 80064ec:	2300      	movs	r3, #0
 80064ee:	f8c8 0008 	str.w	r0, [r8, #8]
 80064f2:	4604      	mov	r4, r0
 80064f4:	6003      	str	r3, [r0, #0]
 80064f6:	f04f 0900 	mov.w	r9, #0
 80064fa:	07eb      	lsls	r3, r5, #31
 80064fc:	d50a      	bpl.n	8006514 <__pow5mult+0x84>
 80064fe:	4631      	mov	r1, r6
 8006500:	4622      	mov	r2, r4
 8006502:	4638      	mov	r0, r7
 8006504:	f7ff ff1a 	bl	800633c <__multiply>
 8006508:	4631      	mov	r1, r6
 800650a:	4680      	mov	r8, r0
 800650c:	4638      	mov	r0, r7
 800650e:	f7ff fe4b 	bl	80061a8 <_Bfree>
 8006512:	4646      	mov	r6, r8
 8006514:	106d      	asrs	r5, r5, #1
 8006516:	d00b      	beq.n	8006530 <__pow5mult+0xa0>
 8006518:	6820      	ldr	r0, [r4, #0]
 800651a:	b938      	cbnz	r0, 800652c <__pow5mult+0x9c>
 800651c:	4622      	mov	r2, r4
 800651e:	4621      	mov	r1, r4
 8006520:	4638      	mov	r0, r7
 8006522:	f7ff ff0b 	bl	800633c <__multiply>
 8006526:	6020      	str	r0, [r4, #0]
 8006528:	f8c0 9000 	str.w	r9, [r0]
 800652c:	4604      	mov	r4, r0
 800652e:	e7e4      	b.n	80064fa <__pow5mult+0x6a>
 8006530:	4630      	mov	r0, r6
 8006532:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006536:	bf00      	nop
 8006538:	08007ba4 	.word	0x08007ba4
 800653c:	08007ac9 	.word	0x08007ac9
 8006540:	08007b49 	.word	0x08007b49

08006544 <__lshift>:
 8006544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006548:	460c      	mov	r4, r1
 800654a:	6849      	ldr	r1, [r1, #4]
 800654c:	6923      	ldr	r3, [r4, #16]
 800654e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006552:	68a3      	ldr	r3, [r4, #8]
 8006554:	4607      	mov	r7, r0
 8006556:	4691      	mov	r9, r2
 8006558:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800655c:	f108 0601 	add.w	r6, r8, #1
 8006560:	42b3      	cmp	r3, r6
 8006562:	db0b      	blt.n	800657c <__lshift+0x38>
 8006564:	4638      	mov	r0, r7
 8006566:	f7ff fddf 	bl	8006128 <_Balloc>
 800656a:	4605      	mov	r5, r0
 800656c:	b948      	cbnz	r0, 8006582 <__lshift+0x3e>
 800656e:	4602      	mov	r2, r0
 8006570:	4b28      	ldr	r3, [pc, #160]	@ (8006614 <__lshift+0xd0>)
 8006572:	4829      	ldr	r0, [pc, #164]	@ (8006618 <__lshift+0xd4>)
 8006574:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006578:	f000 fb94 	bl	8006ca4 <__assert_func>
 800657c:	3101      	adds	r1, #1
 800657e:	005b      	lsls	r3, r3, #1
 8006580:	e7ee      	b.n	8006560 <__lshift+0x1c>
 8006582:	2300      	movs	r3, #0
 8006584:	f100 0114 	add.w	r1, r0, #20
 8006588:	f100 0210 	add.w	r2, r0, #16
 800658c:	4618      	mov	r0, r3
 800658e:	4553      	cmp	r3, sl
 8006590:	db33      	blt.n	80065fa <__lshift+0xb6>
 8006592:	6920      	ldr	r0, [r4, #16]
 8006594:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006598:	f104 0314 	add.w	r3, r4, #20
 800659c:	f019 091f 	ands.w	r9, r9, #31
 80065a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80065a4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80065a8:	d02b      	beq.n	8006602 <__lshift+0xbe>
 80065aa:	f1c9 0e20 	rsb	lr, r9, #32
 80065ae:	468a      	mov	sl, r1
 80065b0:	2200      	movs	r2, #0
 80065b2:	6818      	ldr	r0, [r3, #0]
 80065b4:	fa00 f009 	lsl.w	r0, r0, r9
 80065b8:	4310      	orrs	r0, r2
 80065ba:	f84a 0b04 	str.w	r0, [sl], #4
 80065be:	f853 2b04 	ldr.w	r2, [r3], #4
 80065c2:	459c      	cmp	ip, r3
 80065c4:	fa22 f20e 	lsr.w	r2, r2, lr
 80065c8:	d8f3      	bhi.n	80065b2 <__lshift+0x6e>
 80065ca:	ebac 0304 	sub.w	r3, ip, r4
 80065ce:	3b15      	subs	r3, #21
 80065d0:	f023 0303 	bic.w	r3, r3, #3
 80065d4:	3304      	adds	r3, #4
 80065d6:	f104 0015 	add.w	r0, r4, #21
 80065da:	4584      	cmp	ip, r0
 80065dc:	bf38      	it	cc
 80065de:	2304      	movcc	r3, #4
 80065e0:	50ca      	str	r2, [r1, r3]
 80065e2:	b10a      	cbz	r2, 80065e8 <__lshift+0xa4>
 80065e4:	f108 0602 	add.w	r6, r8, #2
 80065e8:	3e01      	subs	r6, #1
 80065ea:	4638      	mov	r0, r7
 80065ec:	612e      	str	r6, [r5, #16]
 80065ee:	4621      	mov	r1, r4
 80065f0:	f7ff fdda 	bl	80061a8 <_Bfree>
 80065f4:	4628      	mov	r0, r5
 80065f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065fa:	f842 0f04 	str.w	r0, [r2, #4]!
 80065fe:	3301      	adds	r3, #1
 8006600:	e7c5      	b.n	800658e <__lshift+0x4a>
 8006602:	3904      	subs	r1, #4
 8006604:	f853 2b04 	ldr.w	r2, [r3], #4
 8006608:	f841 2f04 	str.w	r2, [r1, #4]!
 800660c:	459c      	cmp	ip, r3
 800660e:	d8f9      	bhi.n	8006604 <__lshift+0xc0>
 8006610:	e7ea      	b.n	80065e8 <__lshift+0xa4>
 8006612:	bf00      	nop
 8006614:	08007b38 	.word	0x08007b38
 8006618:	08007b49 	.word	0x08007b49

0800661c <__mcmp>:
 800661c:	690a      	ldr	r2, [r1, #16]
 800661e:	4603      	mov	r3, r0
 8006620:	6900      	ldr	r0, [r0, #16]
 8006622:	1a80      	subs	r0, r0, r2
 8006624:	b530      	push	{r4, r5, lr}
 8006626:	d10e      	bne.n	8006646 <__mcmp+0x2a>
 8006628:	3314      	adds	r3, #20
 800662a:	3114      	adds	r1, #20
 800662c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006630:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006634:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006638:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800663c:	4295      	cmp	r5, r2
 800663e:	d003      	beq.n	8006648 <__mcmp+0x2c>
 8006640:	d205      	bcs.n	800664e <__mcmp+0x32>
 8006642:	f04f 30ff 	mov.w	r0, #4294967295
 8006646:	bd30      	pop	{r4, r5, pc}
 8006648:	42a3      	cmp	r3, r4
 800664a:	d3f3      	bcc.n	8006634 <__mcmp+0x18>
 800664c:	e7fb      	b.n	8006646 <__mcmp+0x2a>
 800664e:	2001      	movs	r0, #1
 8006650:	e7f9      	b.n	8006646 <__mcmp+0x2a>
	...

08006654 <__mdiff>:
 8006654:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006658:	4689      	mov	r9, r1
 800665a:	4606      	mov	r6, r0
 800665c:	4611      	mov	r1, r2
 800665e:	4648      	mov	r0, r9
 8006660:	4614      	mov	r4, r2
 8006662:	f7ff ffdb 	bl	800661c <__mcmp>
 8006666:	1e05      	subs	r5, r0, #0
 8006668:	d112      	bne.n	8006690 <__mdiff+0x3c>
 800666a:	4629      	mov	r1, r5
 800666c:	4630      	mov	r0, r6
 800666e:	f7ff fd5b 	bl	8006128 <_Balloc>
 8006672:	4602      	mov	r2, r0
 8006674:	b928      	cbnz	r0, 8006682 <__mdiff+0x2e>
 8006676:	4b3f      	ldr	r3, [pc, #252]	@ (8006774 <__mdiff+0x120>)
 8006678:	f240 2137 	movw	r1, #567	@ 0x237
 800667c:	483e      	ldr	r0, [pc, #248]	@ (8006778 <__mdiff+0x124>)
 800667e:	f000 fb11 	bl	8006ca4 <__assert_func>
 8006682:	2301      	movs	r3, #1
 8006684:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006688:	4610      	mov	r0, r2
 800668a:	b003      	add	sp, #12
 800668c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006690:	bfbc      	itt	lt
 8006692:	464b      	movlt	r3, r9
 8006694:	46a1      	movlt	r9, r4
 8006696:	4630      	mov	r0, r6
 8006698:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800669c:	bfba      	itte	lt
 800669e:	461c      	movlt	r4, r3
 80066a0:	2501      	movlt	r5, #1
 80066a2:	2500      	movge	r5, #0
 80066a4:	f7ff fd40 	bl	8006128 <_Balloc>
 80066a8:	4602      	mov	r2, r0
 80066aa:	b918      	cbnz	r0, 80066b4 <__mdiff+0x60>
 80066ac:	4b31      	ldr	r3, [pc, #196]	@ (8006774 <__mdiff+0x120>)
 80066ae:	f240 2145 	movw	r1, #581	@ 0x245
 80066b2:	e7e3      	b.n	800667c <__mdiff+0x28>
 80066b4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80066b8:	6926      	ldr	r6, [r4, #16]
 80066ba:	60c5      	str	r5, [r0, #12]
 80066bc:	f109 0310 	add.w	r3, r9, #16
 80066c0:	f109 0514 	add.w	r5, r9, #20
 80066c4:	f104 0e14 	add.w	lr, r4, #20
 80066c8:	f100 0b14 	add.w	fp, r0, #20
 80066cc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80066d0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80066d4:	9301      	str	r3, [sp, #4]
 80066d6:	46d9      	mov	r9, fp
 80066d8:	f04f 0c00 	mov.w	ip, #0
 80066dc:	9b01      	ldr	r3, [sp, #4]
 80066de:	f85e 0b04 	ldr.w	r0, [lr], #4
 80066e2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80066e6:	9301      	str	r3, [sp, #4]
 80066e8:	fa1f f38a 	uxth.w	r3, sl
 80066ec:	4619      	mov	r1, r3
 80066ee:	b283      	uxth	r3, r0
 80066f0:	1acb      	subs	r3, r1, r3
 80066f2:	0c00      	lsrs	r0, r0, #16
 80066f4:	4463      	add	r3, ip
 80066f6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80066fa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80066fe:	b29b      	uxth	r3, r3
 8006700:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006704:	4576      	cmp	r6, lr
 8006706:	f849 3b04 	str.w	r3, [r9], #4
 800670a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800670e:	d8e5      	bhi.n	80066dc <__mdiff+0x88>
 8006710:	1b33      	subs	r3, r6, r4
 8006712:	3b15      	subs	r3, #21
 8006714:	f023 0303 	bic.w	r3, r3, #3
 8006718:	3415      	adds	r4, #21
 800671a:	3304      	adds	r3, #4
 800671c:	42a6      	cmp	r6, r4
 800671e:	bf38      	it	cc
 8006720:	2304      	movcc	r3, #4
 8006722:	441d      	add	r5, r3
 8006724:	445b      	add	r3, fp
 8006726:	461e      	mov	r6, r3
 8006728:	462c      	mov	r4, r5
 800672a:	4544      	cmp	r4, r8
 800672c:	d30e      	bcc.n	800674c <__mdiff+0xf8>
 800672e:	f108 0103 	add.w	r1, r8, #3
 8006732:	1b49      	subs	r1, r1, r5
 8006734:	f021 0103 	bic.w	r1, r1, #3
 8006738:	3d03      	subs	r5, #3
 800673a:	45a8      	cmp	r8, r5
 800673c:	bf38      	it	cc
 800673e:	2100      	movcc	r1, #0
 8006740:	440b      	add	r3, r1
 8006742:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006746:	b191      	cbz	r1, 800676e <__mdiff+0x11a>
 8006748:	6117      	str	r7, [r2, #16]
 800674a:	e79d      	b.n	8006688 <__mdiff+0x34>
 800674c:	f854 1b04 	ldr.w	r1, [r4], #4
 8006750:	46e6      	mov	lr, ip
 8006752:	0c08      	lsrs	r0, r1, #16
 8006754:	fa1c fc81 	uxtah	ip, ip, r1
 8006758:	4471      	add	r1, lr
 800675a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800675e:	b289      	uxth	r1, r1
 8006760:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006764:	f846 1b04 	str.w	r1, [r6], #4
 8006768:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800676c:	e7dd      	b.n	800672a <__mdiff+0xd6>
 800676e:	3f01      	subs	r7, #1
 8006770:	e7e7      	b.n	8006742 <__mdiff+0xee>
 8006772:	bf00      	nop
 8006774:	08007b38 	.word	0x08007b38
 8006778:	08007b49 	.word	0x08007b49

0800677c <__d2b>:
 800677c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006780:	460f      	mov	r7, r1
 8006782:	2101      	movs	r1, #1
 8006784:	ec59 8b10 	vmov	r8, r9, d0
 8006788:	4616      	mov	r6, r2
 800678a:	f7ff fccd 	bl	8006128 <_Balloc>
 800678e:	4604      	mov	r4, r0
 8006790:	b930      	cbnz	r0, 80067a0 <__d2b+0x24>
 8006792:	4602      	mov	r2, r0
 8006794:	4b23      	ldr	r3, [pc, #140]	@ (8006824 <__d2b+0xa8>)
 8006796:	4824      	ldr	r0, [pc, #144]	@ (8006828 <__d2b+0xac>)
 8006798:	f240 310f 	movw	r1, #783	@ 0x30f
 800679c:	f000 fa82 	bl	8006ca4 <__assert_func>
 80067a0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80067a4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80067a8:	b10d      	cbz	r5, 80067ae <__d2b+0x32>
 80067aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80067ae:	9301      	str	r3, [sp, #4]
 80067b0:	f1b8 0300 	subs.w	r3, r8, #0
 80067b4:	d023      	beq.n	80067fe <__d2b+0x82>
 80067b6:	4668      	mov	r0, sp
 80067b8:	9300      	str	r3, [sp, #0]
 80067ba:	f7ff fd7c 	bl	80062b6 <__lo0bits>
 80067be:	e9dd 1200 	ldrd	r1, r2, [sp]
 80067c2:	b1d0      	cbz	r0, 80067fa <__d2b+0x7e>
 80067c4:	f1c0 0320 	rsb	r3, r0, #32
 80067c8:	fa02 f303 	lsl.w	r3, r2, r3
 80067cc:	430b      	orrs	r3, r1
 80067ce:	40c2      	lsrs	r2, r0
 80067d0:	6163      	str	r3, [r4, #20]
 80067d2:	9201      	str	r2, [sp, #4]
 80067d4:	9b01      	ldr	r3, [sp, #4]
 80067d6:	61a3      	str	r3, [r4, #24]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	bf0c      	ite	eq
 80067dc:	2201      	moveq	r2, #1
 80067de:	2202      	movne	r2, #2
 80067e0:	6122      	str	r2, [r4, #16]
 80067e2:	b1a5      	cbz	r5, 800680e <__d2b+0x92>
 80067e4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80067e8:	4405      	add	r5, r0
 80067ea:	603d      	str	r5, [r7, #0]
 80067ec:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80067f0:	6030      	str	r0, [r6, #0]
 80067f2:	4620      	mov	r0, r4
 80067f4:	b003      	add	sp, #12
 80067f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80067fa:	6161      	str	r1, [r4, #20]
 80067fc:	e7ea      	b.n	80067d4 <__d2b+0x58>
 80067fe:	a801      	add	r0, sp, #4
 8006800:	f7ff fd59 	bl	80062b6 <__lo0bits>
 8006804:	9b01      	ldr	r3, [sp, #4]
 8006806:	6163      	str	r3, [r4, #20]
 8006808:	3020      	adds	r0, #32
 800680a:	2201      	movs	r2, #1
 800680c:	e7e8      	b.n	80067e0 <__d2b+0x64>
 800680e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006812:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006816:	6038      	str	r0, [r7, #0]
 8006818:	6918      	ldr	r0, [r3, #16]
 800681a:	f7ff fd2d 	bl	8006278 <__hi0bits>
 800681e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006822:	e7e5      	b.n	80067f0 <__d2b+0x74>
 8006824:	08007b38 	.word	0x08007b38
 8006828:	08007b49 	.word	0x08007b49

0800682c <__ssputs_r>:
 800682c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006830:	688e      	ldr	r6, [r1, #8]
 8006832:	461f      	mov	r7, r3
 8006834:	42be      	cmp	r6, r7
 8006836:	680b      	ldr	r3, [r1, #0]
 8006838:	4682      	mov	sl, r0
 800683a:	460c      	mov	r4, r1
 800683c:	4690      	mov	r8, r2
 800683e:	d82d      	bhi.n	800689c <__ssputs_r+0x70>
 8006840:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006844:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006848:	d026      	beq.n	8006898 <__ssputs_r+0x6c>
 800684a:	6965      	ldr	r5, [r4, #20]
 800684c:	6909      	ldr	r1, [r1, #16]
 800684e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006852:	eba3 0901 	sub.w	r9, r3, r1
 8006856:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800685a:	1c7b      	adds	r3, r7, #1
 800685c:	444b      	add	r3, r9
 800685e:	106d      	asrs	r5, r5, #1
 8006860:	429d      	cmp	r5, r3
 8006862:	bf38      	it	cc
 8006864:	461d      	movcc	r5, r3
 8006866:	0553      	lsls	r3, r2, #21
 8006868:	d527      	bpl.n	80068ba <__ssputs_r+0x8e>
 800686a:	4629      	mov	r1, r5
 800686c:	f7ff fbd0 	bl	8006010 <_malloc_r>
 8006870:	4606      	mov	r6, r0
 8006872:	b360      	cbz	r0, 80068ce <__ssputs_r+0xa2>
 8006874:	6921      	ldr	r1, [r4, #16]
 8006876:	464a      	mov	r2, r9
 8006878:	f000 fa06 	bl	8006c88 <memcpy>
 800687c:	89a3      	ldrh	r3, [r4, #12]
 800687e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006882:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006886:	81a3      	strh	r3, [r4, #12]
 8006888:	6126      	str	r6, [r4, #16]
 800688a:	6165      	str	r5, [r4, #20]
 800688c:	444e      	add	r6, r9
 800688e:	eba5 0509 	sub.w	r5, r5, r9
 8006892:	6026      	str	r6, [r4, #0]
 8006894:	60a5      	str	r5, [r4, #8]
 8006896:	463e      	mov	r6, r7
 8006898:	42be      	cmp	r6, r7
 800689a:	d900      	bls.n	800689e <__ssputs_r+0x72>
 800689c:	463e      	mov	r6, r7
 800689e:	6820      	ldr	r0, [r4, #0]
 80068a0:	4632      	mov	r2, r6
 80068a2:	4641      	mov	r1, r8
 80068a4:	f000 f9c6 	bl	8006c34 <memmove>
 80068a8:	68a3      	ldr	r3, [r4, #8]
 80068aa:	1b9b      	subs	r3, r3, r6
 80068ac:	60a3      	str	r3, [r4, #8]
 80068ae:	6823      	ldr	r3, [r4, #0]
 80068b0:	4433      	add	r3, r6
 80068b2:	6023      	str	r3, [r4, #0]
 80068b4:	2000      	movs	r0, #0
 80068b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068ba:	462a      	mov	r2, r5
 80068bc:	f000 fa36 	bl	8006d2c <_realloc_r>
 80068c0:	4606      	mov	r6, r0
 80068c2:	2800      	cmp	r0, #0
 80068c4:	d1e0      	bne.n	8006888 <__ssputs_r+0x5c>
 80068c6:	6921      	ldr	r1, [r4, #16]
 80068c8:	4650      	mov	r0, sl
 80068ca:	f7ff fb2d 	bl	8005f28 <_free_r>
 80068ce:	230c      	movs	r3, #12
 80068d0:	f8ca 3000 	str.w	r3, [sl]
 80068d4:	89a3      	ldrh	r3, [r4, #12]
 80068d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80068da:	81a3      	strh	r3, [r4, #12]
 80068dc:	f04f 30ff 	mov.w	r0, #4294967295
 80068e0:	e7e9      	b.n	80068b6 <__ssputs_r+0x8a>
	...

080068e4 <_svfiprintf_r>:
 80068e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068e8:	4698      	mov	r8, r3
 80068ea:	898b      	ldrh	r3, [r1, #12]
 80068ec:	061b      	lsls	r3, r3, #24
 80068ee:	b09d      	sub	sp, #116	@ 0x74
 80068f0:	4607      	mov	r7, r0
 80068f2:	460d      	mov	r5, r1
 80068f4:	4614      	mov	r4, r2
 80068f6:	d510      	bpl.n	800691a <_svfiprintf_r+0x36>
 80068f8:	690b      	ldr	r3, [r1, #16]
 80068fa:	b973      	cbnz	r3, 800691a <_svfiprintf_r+0x36>
 80068fc:	2140      	movs	r1, #64	@ 0x40
 80068fe:	f7ff fb87 	bl	8006010 <_malloc_r>
 8006902:	6028      	str	r0, [r5, #0]
 8006904:	6128      	str	r0, [r5, #16]
 8006906:	b930      	cbnz	r0, 8006916 <_svfiprintf_r+0x32>
 8006908:	230c      	movs	r3, #12
 800690a:	603b      	str	r3, [r7, #0]
 800690c:	f04f 30ff 	mov.w	r0, #4294967295
 8006910:	b01d      	add	sp, #116	@ 0x74
 8006912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006916:	2340      	movs	r3, #64	@ 0x40
 8006918:	616b      	str	r3, [r5, #20]
 800691a:	2300      	movs	r3, #0
 800691c:	9309      	str	r3, [sp, #36]	@ 0x24
 800691e:	2320      	movs	r3, #32
 8006920:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006924:	f8cd 800c 	str.w	r8, [sp, #12]
 8006928:	2330      	movs	r3, #48	@ 0x30
 800692a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006ac8 <_svfiprintf_r+0x1e4>
 800692e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006932:	f04f 0901 	mov.w	r9, #1
 8006936:	4623      	mov	r3, r4
 8006938:	469a      	mov	sl, r3
 800693a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800693e:	b10a      	cbz	r2, 8006944 <_svfiprintf_r+0x60>
 8006940:	2a25      	cmp	r2, #37	@ 0x25
 8006942:	d1f9      	bne.n	8006938 <_svfiprintf_r+0x54>
 8006944:	ebba 0b04 	subs.w	fp, sl, r4
 8006948:	d00b      	beq.n	8006962 <_svfiprintf_r+0x7e>
 800694a:	465b      	mov	r3, fp
 800694c:	4622      	mov	r2, r4
 800694e:	4629      	mov	r1, r5
 8006950:	4638      	mov	r0, r7
 8006952:	f7ff ff6b 	bl	800682c <__ssputs_r>
 8006956:	3001      	adds	r0, #1
 8006958:	f000 80a7 	beq.w	8006aaa <_svfiprintf_r+0x1c6>
 800695c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800695e:	445a      	add	r2, fp
 8006960:	9209      	str	r2, [sp, #36]	@ 0x24
 8006962:	f89a 3000 	ldrb.w	r3, [sl]
 8006966:	2b00      	cmp	r3, #0
 8006968:	f000 809f 	beq.w	8006aaa <_svfiprintf_r+0x1c6>
 800696c:	2300      	movs	r3, #0
 800696e:	f04f 32ff 	mov.w	r2, #4294967295
 8006972:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006976:	f10a 0a01 	add.w	sl, sl, #1
 800697a:	9304      	str	r3, [sp, #16]
 800697c:	9307      	str	r3, [sp, #28]
 800697e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006982:	931a      	str	r3, [sp, #104]	@ 0x68
 8006984:	4654      	mov	r4, sl
 8006986:	2205      	movs	r2, #5
 8006988:	f814 1b01 	ldrb.w	r1, [r4], #1
 800698c:	484e      	ldr	r0, [pc, #312]	@ (8006ac8 <_svfiprintf_r+0x1e4>)
 800698e:	f7f9 fc3f 	bl	8000210 <memchr>
 8006992:	9a04      	ldr	r2, [sp, #16]
 8006994:	b9d8      	cbnz	r0, 80069ce <_svfiprintf_r+0xea>
 8006996:	06d0      	lsls	r0, r2, #27
 8006998:	bf44      	itt	mi
 800699a:	2320      	movmi	r3, #32
 800699c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80069a0:	0711      	lsls	r1, r2, #28
 80069a2:	bf44      	itt	mi
 80069a4:	232b      	movmi	r3, #43	@ 0x2b
 80069a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80069aa:	f89a 3000 	ldrb.w	r3, [sl]
 80069ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80069b0:	d015      	beq.n	80069de <_svfiprintf_r+0xfa>
 80069b2:	9a07      	ldr	r2, [sp, #28]
 80069b4:	4654      	mov	r4, sl
 80069b6:	2000      	movs	r0, #0
 80069b8:	f04f 0c0a 	mov.w	ip, #10
 80069bc:	4621      	mov	r1, r4
 80069be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80069c2:	3b30      	subs	r3, #48	@ 0x30
 80069c4:	2b09      	cmp	r3, #9
 80069c6:	d94b      	bls.n	8006a60 <_svfiprintf_r+0x17c>
 80069c8:	b1b0      	cbz	r0, 80069f8 <_svfiprintf_r+0x114>
 80069ca:	9207      	str	r2, [sp, #28]
 80069cc:	e014      	b.n	80069f8 <_svfiprintf_r+0x114>
 80069ce:	eba0 0308 	sub.w	r3, r0, r8
 80069d2:	fa09 f303 	lsl.w	r3, r9, r3
 80069d6:	4313      	orrs	r3, r2
 80069d8:	9304      	str	r3, [sp, #16]
 80069da:	46a2      	mov	sl, r4
 80069dc:	e7d2      	b.n	8006984 <_svfiprintf_r+0xa0>
 80069de:	9b03      	ldr	r3, [sp, #12]
 80069e0:	1d19      	adds	r1, r3, #4
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	9103      	str	r1, [sp, #12]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	bfbb      	ittet	lt
 80069ea:	425b      	neglt	r3, r3
 80069ec:	f042 0202 	orrlt.w	r2, r2, #2
 80069f0:	9307      	strge	r3, [sp, #28]
 80069f2:	9307      	strlt	r3, [sp, #28]
 80069f4:	bfb8      	it	lt
 80069f6:	9204      	strlt	r2, [sp, #16]
 80069f8:	7823      	ldrb	r3, [r4, #0]
 80069fa:	2b2e      	cmp	r3, #46	@ 0x2e
 80069fc:	d10a      	bne.n	8006a14 <_svfiprintf_r+0x130>
 80069fe:	7863      	ldrb	r3, [r4, #1]
 8006a00:	2b2a      	cmp	r3, #42	@ 0x2a
 8006a02:	d132      	bne.n	8006a6a <_svfiprintf_r+0x186>
 8006a04:	9b03      	ldr	r3, [sp, #12]
 8006a06:	1d1a      	adds	r2, r3, #4
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	9203      	str	r2, [sp, #12]
 8006a0c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006a10:	3402      	adds	r4, #2
 8006a12:	9305      	str	r3, [sp, #20]
 8006a14:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006ad8 <_svfiprintf_r+0x1f4>
 8006a18:	7821      	ldrb	r1, [r4, #0]
 8006a1a:	2203      	movs	r2, #3
 8006a1c:	4650      	mov	r0, sl
 8006a1e:	f7f9 fbf7 	bl	8000210 <memchr>
 8006a22:	b138      	cbz	r0, 8006a34 <_svfiprintf_r+0x150>
 8006a24:	9b04      	ldr	r3, [sp, #16]
 8006a26:	eba0 000a 	sub.w	r0, r0, sl
 8006a2a:	2240      	movs	r2, #64	@ 0x40
 8006a2c:	4082      	lsls	r2, r0
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	3401      	adds	r4, #1
 8006a32:	9304      	str	r3, [sp, #16]
 8006a34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a38:	4824      	ldr	r0, [pc, #144]	@ (8006acc <_svfiprintf_r+0x1e8>)
 8006a3a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006a3e:	2206      	movs	r2, #6
 8006a40:	f7f9 fbe6 	bl	8000210 <memchr>
 8006a44:	2800      	cmp	r0, #0
 8006a46:	d036      	beq.n	8006ab6 <_svfiprintf_r+0x1d2>
 8006a48:	4b21      	ldr	r3, [pc, #132]	@ (8006ad0 <_svfiprintf_r+0x1ec>)
 8006a4a:	bb1b      	cbnz	r3, 8006a94 <_svfiprintf_r+0x1b0>
 8006a4c:	9b03      	ldr	r3, [sp, #12]
 8006a4e:	3307      	adds	r3, #7
 8006a50:	f023 0307 	bic.w	r3, r3, #7
 8006a54:	3308      	adds	r3, #8
 8006a56:	9303      	str	r3, [sp, #12]
 8006a58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a5a:	4433      	add	r3, r6
 8006a5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a5e:	e76a      	b.n	8006936 <_svfiprintf_r+0x52>
 8006a60:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a64:	460c      	mov	r4, r1
 8006a66:	2001      	movs	r0, #1
 8006a68:	e7a8      	b.n	80069bc <_svfiprintf_r+0xd8>
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	3401      	adds	r4, #1
 8006a6e:	9305      	str	r3, [sp, #20]
 8006a70:	4619      	mov	r1, r3
 8006a72:	f04f 0c0a 	mov.w	ip, #10
 8006a76:	4620      	mov	r0, r4
 8006a78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a7c:	3a30      	subs	r2, #48	@ 0x30
 8006a7e:	2a09      	cmp	r2, #9
 8006a80:	d903      	bls.n	8006a8a <_svfiprintf_r+0x1a6>
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d0c6      	beq.n	8006a14 <_svfiprintf_r+0x130>
 8006a86:	9105      	str	r1, [sp, #20]
 8006a88:	e7c4      	b.n	8006a14 <_svfiprintf_r+0x130>
 8006a8a:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a8e:	4604      	mov	r4, r0
 8006a90:	2301      	movs	r3, #1
 8006a92:	e7f0      	b.n	8006a76 <_svfiprintf_r+0x192>
 8006a94:	ab03      	add	r3, sp, #12
 8006a96:	9300      	str	r3, [sp, #0]
 8006a98:	462a      	mov	r2, r5
 8006a9a:	4b0e      	ldr	r3, [pc, #56]	@ (8006ad4 <_svfiprintf_r+0x1f0>)
 8006a9c:	a904      	add	r1, sp, #16
 8006a9e:	4638      	mov	r0, r7
 8006aa0:	f7fd fe82 	bl	80047a8 <_printf_float>
 8006aa4:	1c42      	adds	r2, r0, #1
 8006aa6:	4606      	mov	r6, r0
 8006aa8:	d1d6      	bne.n	8006a58 <_svfiprintf_r+0x174>
 8006aaa:	89ab      	ldrh	r3, [r5, #12]
 8006aac:	065b      	lsls	r3, r3, #25
 8006aae:	f53f af2d 	bmi.w	800690c <_svfiprintf_r+0x28>
 8006ab2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006ab4:	e72c      	b.n	8006910 <_svfiprintf_r+0x2c>
 8006ab6:	ab03      	add	r3, sp, #12
 8006ab8:	9300      	str	r3, [sp, #0]
 8006aba:	462a      	mov	r2, r5
 8006abc:	4b05      	ldr	r3, [pc, #20]	@ (8006ad4 <_svfiprintf_r+0x1f0>)
 8006abe:	a904      	add	r1, sp, #16
 8006ac0:	4638      	mov	r0, r7
 8006ac2:	f7fe f909 	bl	8004cd8 <_printf_i>
 8006ac6:	e7ed      	b.n	8006aa4 <_svfiprintf_r+0x1c0>
 8006ac8:	08007ca0 	.word	0x08007ca0
 8006acc:	08007caa 	.word	0x08007caa
 8006ad0:	080047a9 	.word	0x080047a9
 8006ad4:	0800682d 	.word	0x0800682d
 8006ad8:	08007ca6 	.word	0x08007ca6

08006adc <__sflush_r>:
 8006adc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ae4:	0716      	lsls	r6, r2, #28
 8006ae6:	4605      	mov	r5, r0
 8006ae8:	460c      	mov	r4, r1
 8006aea:	d454      	bmi.n	8006b96 <__sflush_r+0xba>
 8006aec:	684b      	ldr	r3, [r1, #4]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	dc02      	bgt.n	8006af8 <__sflush_r+0x1c>
 8006af2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	dd48      	ble.n	8006b8a <__sflush_r+0xae>
 8006af8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006afa:	2e00      	cmp	r6, #0
 8006afc:	d045      	beq.n	8006b8a <__sflush_r+0xae>
 8006afe:	2300      	movs	r3, #0
 8006b00:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006b04:	682f      	ldr	r7, [r5, #0]
 8006b06:	6a21      	ldr	r1, [r4, #32]
 8006b08:	602b      	str	r3, [r5, #0]
 8006b0a:	d030      	beq.n	8006b6e <__sflush_r+0x92>
 8006b0c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006b0e:	89a3      	ldrh	r3, [r4, #12]
 8006b10:	0759      	lsls	r1, r3, #29
 8006b12:	d505      	bpl.n	8006b20 <__sflush_r+0x44>
 8006b14:	6863      	ldr	r3, [r4, #4]
 8006b16:	1ad2      	subs	r2, r2, r3
 8006b18:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006b1a:	b10b      	cbz	r3, 8006b20 <__sflush_r+0x44>
 8006b1c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006b1e:	1ad2      	subs	r2, r2, r3
 8006b20:	2300      	movs	r3, #0
 8006b22:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006b24:	6a21      	ldr	r1, [r4, #32]
 8006b26:	4628      	mov	r0, r5
 8006b28:	47b0      	blx	r6
 8006b2a:	1c43      	adds	r3, r0, #1
 8006b2c:	89a3      	ldrh	r3, [r4, #12]
 8006b2e:	d106      	bne.n	8006b3e <__sflush_r+0x62>
 8006b30:	6829      	ldr	r1, [r5, #0]
 8006b32:	291d      	cmp	r1, #29
 8006b34:	d82b      	bhi.n	8006b8e <__sflush_r+0xb2>
 8006b36:	4a2a      	ldr	r2, [pc, #168]	@ (8006be0 <__sflush_r+0x104>)
 8006b38:	410a      	asrs	r2, r1
 8006b3a:	07d6      	lsls	r6, r2, #31
 8006b3c:	d427      	bmi.n	8006b8e <__sflush_r+0xb2>
 8006b3e:	2200      	movs	r2, #0
 8006b40:	6062      	str	r2, [r4, #4]
 8006b42:	04d9      	lsls	r1, r3, #19
 8006b44:	6922      	ldr	r2, [r4, #16]
 8006b46:	6022      	str	r2, [r4, #0]
 8006b48:	d504      	bpl.n	8006b54 <__sflush_r+0x78>
 8006b4a:	1c42      	adds	r2, r0, #1
 8006b4c:	d101      	bne.n	8006b52 <__sflush_r+0x76>
 8006b4e:	682b      	ldr	r3, [r5, #0]
 8006b50:	b903      	cbnz	r3, 8006b54 <__sflush_r+0x78>
 8006b52:	6560      	str	r0, [r4, #84]	@ 0x54
 8006b54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006b56:	602f      	str	r7, [r5, #0]
 8006b58:	b1b9      	cbz	r1, 8006b8a <__sflush_r+0xae>
 8006b5a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006b5e:	4299      	cmp	r1, r3
 8006b60:	d002      	beq.n	8006b68 <__sflush_r+0x8c>
 8006b62:	4628      	mov	r0, r5
 8006b64:	f7ff f9e0 	bl	8005f28 <_free_r>
 8006b68:	2300      	movs	r3, #0
 8006b6a:	6363      	str	r3, [r4, #52]	@ 0x34
 8006b6c:	e00d      	b.n	8006b8a <__sflush_r+0xae>
 8006b6e:	2301      	movs	r3, #1
 8006b70:	4628      	mov	r0, r5
 8006b72:	47b0      	blx	r6
 8006b74:	4602      	mov	r2, r0
 8006b76:	1c50      	adds	r0, r2, #1
 8006b78:	d1c9      	bne.n	8006b0e <__sflush_r+0x32>
 8006b7a:	682b      	ldr	r3, [r5, #0]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d0c6      	beq.n	8006b0e <__sflush_r+0x32>
 8006b80:	2b1d      	cmp	r3, #29
 8006b82:	d001      	beq.n	8006b88 <__sflush_r+0xac>
 8006b84:	2b16      	cmp	r3, #22
 8006b86:	d11e      	bne.n	8006bc6 <__sflush_r+0xea>
 8006b88:	602f      	str	r7, [r5, #0]
 8006b8a:	2000      	movs	r0, #0
 8006b8c:	e022      	b.n	8006bd4 <__sflush_r+0xf8>
 8006b8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b92:	b21b      	sxth	r3, r3
 8006b94:	e01b      	b.n	8006bce <__sflush_r+0xf2>
 8006b96:	690f      	ldr	r7, [r1, #16]
 8006b98:	2f00      	cmp	r7, #0
 8006b9a:	d0f6      	beq.n	8006b8a <__sflush_r+0xae>
 8006b9c:	0793      	lsls	r3, r2, #30
 8006b9e:	680e      	ldr	r6, [r1, #0]
 8006ba0:	bf08      	it	eq
 8006ba2:	694b      	ldreq	r3, [r1, #20]
 8006ba4:	600f      	str	r7, [r1, #0]
 8006ba6:	bf18      	it	ne
 8006ba8:	2300      	movne	r3, #0
 8006baa:	eba6 0807 	sub.w	r8, r6, r7
 8006bae:	608b      	str	r3, [r1, #8]
 8006bb0:	f1b8 0f00 	cmp.w	r8, #0
 8006bb4:	dde9      	ble.n	8006b8a <__sflush_r+0xae>
 8006bb6:	6a21      	ldr	r1, [r4, #32]
 8006bb8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006bba:	4643      	mov	r3, r8
 8006bbc:	463a      	mov	r2, r7
 8006bbe:	4628      	mov	r0, r5
 8006bc0:	47b0      	blx	r6
 8006bc2:	2800      	cmp	r0, #0
 8006bc4:	dc08      	bgt.n	8006bd8 <__sflush_r+0xfc>
 8006bc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006bce:	81a3      	strh	r3, [r4, #12]
 8006bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8006bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bd8:	4407      	add	r7, r0
 8006bda:	eba8 0800 	sub.w	r8, r8, r0
 8006bde:	e7e7      	b.n	8006bb0 <__sflush_r+0xd4>
 8006be0:	dfbffffe 	.word	0xdfbffffe

08006be4 <_fflush_r>:
 8006be4:	b538      	push	{r3, r4, r5, lr}
 8006be6:	690b      	ldr	r3, [r1, #16]
 8006be8:	4605      	mov	r5, r0
 8006bea:	460c      	mov	r4, r1
 8006bec:	b913      	cbnz	r3, 8006bf4 <_fflush_r+0x10>
 8006bee:	2500      	movs	r5, #0
 8006bf0:	4628      	mov	r0, r5
 8006bf2:	bd38      	pop	{r3, r4, r5, pc}
 8006bf4:	b118      	cbz	r0, 8006bfe <_fflush_r+0x1a>
 8006bf6:	6a03      	ldr	r3, [r0, #32]
 8006bf8:	b90b      	cbnz	r3, 8006bfe <_fflush_r+0x1a>
 8006bfa:	f7fe fa19 	bl	8005030 <__sinit>
 8006bfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d0f3      	beq.n	8006bee <_fflush_r+0xa>
 8006c06:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006c08:	07d0      	lsls	r0, r2, #31
 8006c0a:	d404      	bmi.n	8006c16 <_fflush_r+0x32>
 8006c0c:	0599      	lsls	r1, r3, #22
 8006c0e:	d402      	bmi.n	8006c16 <_fflush_r+0x32>
 8006c10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006c12:	f7fe fb38 	bl	8005286 <__retarget_lock_acquire_recursive>
 8006c16:	4628      	mov	r0, r5
 8006c18:	4621      	mov	r1, r4
 8006c1a:	f7ff ff5f 	bl	8006adc <__sflush_r>
 8006c1e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006c20:	07da      	lsls	r2, r3, #31
 8006c22:	4605      	mov	r5, r0
 8006c24:	d4e4      	bmi.n	8006bf0 <_fflush_r+0xc>
 8006c26:	89a3      	ldrh	r3, [r4, #12]
 8006c28:	059b      	lsls	r3, r3, #22
 8006c2a:	d4e1      	bmi.n	8006bf0 <_fflush_r+0xc>
 8006c2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006c2e:	f7fe fb2b 	bl	8005288 <__retarget_lock_release_recursive>
 8006c32:	e7dd      	b.n	8006bf0 <_fflush_r+0xc>

08006c34 <memmove>:
 8006c34:	4288      	cmp	r0, r1
 8006c36:	b510      	push	{r4, lr}
 8006c38:	eb01 0402 	add.w	r4, r1, r2
 8006c3c:	d902      	bls.n	8006c44 <memmove+0x10>
 8006c3e:	4284      	cmp	r4, r0
 8006c40:	4623      	mov	r3, r4
 8006c42:	d807      	bhi.n	8006c54 <memmove+0x20>
 8006c44:	1e43      	subs	r3, r0, #1
 8006c46:	42a1      	cmp	r1, r4
 8006c48:	d008      	beq.n	8006c5c <memmove+0x28>
 8006c4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006c4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006c52:	e7f8      	b.n	8006c46 <memmove+0x12>
 8006c54:	4402      	add	r2, r0
 8006c56:	4601      	mov	r1, r0
 8006c58:	428a      	cmp	r2, r1
 8006c5a:	d100      	bne.n	8006c5e <memmove+0x2a>
 8006c5c:	bd10      	pop	{r4, pc}
 8006c5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006c62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006c66:	e7f7      	b.n	8006c58 <memmove+0x24>

08006c68 <_sbrk_r>:
 8006c68:	b538      	push	{r3, r4, r5, lr}
 8006c6a:	4d06      	ldr	r5, [pc, #24]	@ (8006c84 <_sbrk_r+0x1c>)
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	4604      	mov	r4, r0
 8006c70:	4608      	mov	r0, r1
 8006c72:	602b      	str	r3, [r5, #0]
 8006c74:	f7fa fe5a 	bl	800192c <_sbrk>
 8006c78:	1c43      	adds	r3, r0, #1
 8006c7a:	d102      	bne.n	8006c82 <_sbrk_r+0x1a>
 8006c7c:	682b      	ldr	r3, [r5, #0]
 8006c7e:	b103      	cbz	r3, 8006c82 <_sbrk_r+0x1a>
 8006c80:	6023      	str	r3, [r4, #0]
 8006c82:	bd38      	pop	{r3, r4, r5, pc}
 8006c84:	200003ec 	.word	0x200003ec

08006c88 <memcpy>:
 8006c88:	440a      	add	r2, r1
 8006c8a:	4291      	cmp	r1, r2
 8006c8c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c90:	d100      	bne.n	8006c94 <memcpy+0xc>
 8006c92:	4770      	bx	lr
 8006c94:	b510      	push	{r4, lr}
 8006c96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c9e:	4291      	cmp	r1, r2
 8006ca0:	d1f9      	bne.n	8006c96 <memcpy+0xe>
 8006ca2:	bd10      	pop	{r4, pc}

08006ca4 <__assert_func>:
 8006ca4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006ca6:	4614      	mov	r4, r2
 8006ca8:	461a      	mov	r2, r3
 8006caa:	4b09      	ldr	r3, [pc, #36]	@ (8006cd0 <__assert_func+0x2c>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4605      	mov	r5, r0
 8006cb0:	68d8      	ldr	r0, [r3, #12]
 8006cb2:	b954      	cbnz	r4, 8006cca <__assert_func+0x26>
 8006cb4:	4b07      	ldr	r3, [pc, #28]	@ (8006cd4 <__assert_func+0x30>)
 8006cb6:	461c      	mov	r4, r3
 8006cb8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006cbc:	9100      	str	r1, [sp, #0]
 8006cbe:	462b      	mov	r3, r5
 8006cc0:	4905      	ldr	r1, [pc, #20]	@ (8006cd8 <__assert_func+0x34>)
 8006cc2:	f000 f86f 	bl	8006da4 <fiprintf>
 8006cc6:	f000 f87f 	bl	8006dc8 <abort>
 8006cca:	4b04      	ldr	r3, [pc, #16]	@ (8006cdc <__assert_func+0x38>)
 8006ccc:	e7f4      	b.n	8006cb8 <__assert_func+0x14>
 8006cce:	bf00      	nop
 8006cd0:	2000001c 	.word	0x2000001c
 8006cd4:	08007cf6 	.word	0x08007cf6
 8006cd8:	08007cc8 	.word	0x08007cc8
 8006cdc:	08007cbb 	.word	0x08007cbb

08006ce0 <_calloc_r>:
 8006ce0:	b570      	push	{r4, r5, r6, lr}
 8006ce2:	fba1 5402 	umull	r5, r4, r1, r2
 8006ce6:	b93c      	cbnz	r4, 8006cf8 <_calloc_r+0x18>
 8006ce8:	4629      	mov	r1, r5
 8006cea:	f7ff f991 	bl	8006010 <_malloc_r>
 8006cee:	4606      	mov	r6, r0
 8006cf0:	b928      	cbnz	r0, 8006cfe <_calloc_r+0x1e>
 8006cf2:	2600      	movs	r6, #0
 8006cf4:	4630      	mov	r0, r6
 8006cf6:	bd70      	pop	{r4, r5, r6, pc}
 8006cf8:	220c      	movs	r2, #12
 8006cfa:	6002      	str	r2, [r0, #0]
 8006cfc:	e7f9      	b.n	8006cf2 <_calloc_r+0x12>
 8006cfe:	462a      	mov	r2, r5
 8006d00:	4621      	mov	r1, r4
 8006d02:	f7fe fa42 	bl	800518a <memset>
 8006d06:	e7f5      	b.n	8006cf4 <_calloc_r+0x14>

08006d08 <__ascii_mbtowc>:
 8006d08:	b082      	sub	sp, #8
 8006d0a:	b901      	cbnz	r1, 8006d0e <__ascii_mbtowc+0x6>
 8006d0c:	a901      	add	r1, sp, #4
 8006d0e:	b142      	cbz	r2, 8006d22 <__ascii_mbtowc+0x1a>
 8006d10:	b14b      	cbz	r3, 8006d26 <__ascii_mbtowc+0x1e>
 8006d12:	7813      	ldrb	r3, [r2, #0]
 8006d14:	600b      	str	r3, [r1, #0]
 8006d16:	7812      	ldrb	r2, [r2, #0]
 8006d18:	1e10      	subs	r0, r2, #0
 8006d1a:	bf18      	it	ne
 8006d1c:	2001      	movne	r0, #1
 8006d1e:	b002      	add	sp, #8
 8006d20:	4770      	bx	lr
 8006d22:	4610      	mov	r0, r2
 8006d24:	e7fb      	b.n	8006d1e <__ascii_mbtowc+0x16>
 8006d26:	f06f 0001 	mvn.w	r0, #1
 8006d2a:	e7f8      	b.n	8006d1e <__ascii_mbtowc+0x16>

08006d2c <_realloc_r>:
 8006d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d30:	4680      	mov	r8, r0
 8006d32:	4615      	mov	r5, r2
 8006d34:	460c      	mov	r4, r1
 8006d36:	b921      	cbnz	r1, 8006d42 <_realloc_r+0x16>
 8006d38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d3c:	4611      	mov	r1, r2
 8006d3e:	f7ff b967 	b.w	8006010 <_malloc_r>
 8006d42:	b92a      	cbnz	r2, 8006d50 <_realloc_r+0x24>
 8006d44:	f7ff f8f0 	bl	8005f28 <_free_r>
 8006d48:	2400      	movs	r4, #0
 8006d4a:	4620      	mov	r0, r4
 8006d4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d50:	f000 f841 	bl	8006dd6 <_malloc_usable_size_r>
 8006d54:	4285      	cmp	r5, r0
 8006d56:	4606      	mov	r6, r0
 8006d58:	d802      	bhi.n	8006d60 <_realloc_r+0x34>
 8006d5a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006d5e:	d8f4      	bhi.n	8006d4a <_realloc_r+0x1e>
 8006d60:	4629      	mov	r1, r5
 8006d62:	4640      	mov	r0, r8
 8006d64:	f7ff f954 	bl	8006010 <_malloc_r>
 8006d68:	4607      	mov	r7, r0
 8006d6a:	2800      	cmp	r0, #0
 8006d6c:	d0ec      	beq.n	8006d48 <_realloc_r+0x1c>
 8006d6e:	42b5      	cmp	r5, r6
 8006d70:	462a      	mov	r2, r5
 8006d72:	4621      	mov	r1, r4
 8006d74:	bf28      	it	cs
 8006d76:	4632      	movcs	r2, r6
 8006d78:	f7ff ff86 	bl	8006c88 <memcpy>
 8006d7c:	4621      	mov	r1, r4
 8006d7e:	4640      	mov	r0, r8
 8006d80:	f7ff f8d2 	bl	8005f28 <_free_r>
 8006d84:	463c      	mov	r4, r7
 8006d86:	e7e0      	b.n	8006d4a <_realloc_r+0x1e>

08006d88 <__ascii_wctomb>:
 8006d88:	4603      	mov	r3, r0
 8006d8a:	4608      	mov	r0, r1
 8006d8c:	b141      	cbz	r1, 8006da0 <__ascii_wctomb+0x18>
 8006d8e:	2aff      	cmp	r2, #255	@ 0xff
 8006d90:	d904      	bls.n	8006d9c <__ascii_wctomb+0x14>
 8006d92:	228a      	movs	r2, #138	@ 0x8a
 8006d94:	601a      	str	r2, [r3, #0]
 8006d96:	f04f 30ff 	mov.w	r0, #4294967295
 8006d9a:	4770      	bx	lr
 8006d9c:	700a      	strb	r2, [r1, #0]
 8006d9e:	2001      	movs	r0, #1
 8006da0:	4770      	bx	lr
	...

08006da4 <fiprintf>:
 8006da4:	b40e      	push	{r1, r2, r3}
 8006da6:	b503      	push	{r0, r1, lr}
 8006da8:	4601      	mov	r1, r0
 8006daa:	ab03      	add	r3, sp, #12
 8006dac:	4805      	ldr	r0, [pc, #20]	@ (8006dc4 <fiprintf+0x20>)
 8006dae:	f853 2b04 	ldr.w	r2, [r3], #4
 8006db2:	6800      	ldr	r0, [r0, #0]
 8006db4:	9301      	str	r3, [sp, #4]
 8006db6:	f000 f83f 	bl	8006e38 <_vfiprintf_r>
 8006dba:	b002      	add	sp, #8
 8006dbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8006dc0:	b003      	add	sp, #12
 8006dc2:	4770      	bx	lr
 8006dc4:	2000001c 	.word	0x2000001c

08006dc8 <abort>:
 8006dc8:	b508      	push	{r3, lr}
 8006dca:	2006      	movs	r0, #6
 8006dcc:	f000 fa08 	bl	80071e0 <raise>
 8006dd0:	2001      	movs	r0, #1
 8006dd2:	f7fa fd32 	bl	800183a <_exit>

08006dd6 <_malloc_usable_size_r>:
 8006dd6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006dda:	1f18      	subs	r0, r3, #4
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	bfbc      	itt	lt
 8006de0:	580b      	ldrlt	r3, [r1, r0]
 8006de2:	18c0      	addlt	r0, r0, r3
 8006de4:	4770      	bx	lr

08006de6 <__sfputc_r>:
 8006de6:	6893      	ldr	r3, [r2, #8]
 8006de8:	3b01      	subs	r3, #1
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	b410      	push	{r4}
 8006dee:	6093      	str	r3, [r2, #8]
 8006df0:	da08      	bge.n	8006e04 <__sfputc_r+0x1e>
 8006df2:	6994      	ldr	r4, [r2, #24]
 8006df4:	42a3      	cmp	r3, r4
 8006df6:	db01      	blt.n	8006dfc <__sfputc_r+0x16>
 8006df8:	290a      	cmp	r1, #10
 8006dfa:	d103      	bne.n	8006e04 <__sfputc_r+0x1e>
 8006dfc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e00:	f000 b932 	b.w	8007068 <__swbuf_r>
 8006e04:	6813      	ldr	r3, [r2, #0]
 8006e06:	1c58      	adds	r0, r3, #1
 8006e08:	6010      	str	r0, [r2, #0]
 8006e0a:	7019      	strb	r1, [r3, #0]
 8006e0c:	4608      	mov	r0, r1
 8006e0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e12:	4770      	bx	lr

08006e14 <__sfputs_r>:
 8006e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e16:	4606      	mov	r6, r0
 8006e18:	460f      	mov	r7, r1
 8006e1a:	4614      	mov	r4, r2
 8006e1c:	18d5      	adds	r5, r2, r3
 8006e1e:	42ac      	cmp	r4, r5
 8006e20:	d101      	bne.n	8006e26 <__sfputs_r+0x12>
 8006e22:	2000      	movs	r0, #0
 8006e24:	e007      	b.n	8006e36 <__sfputs_r+0x22>
 8006e26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e2a:	463a      	mov	r2, r7
 8006e2c:	4630      	mov	r0, r6
 8006e2e:	f7ff ffda 	bl	8006de6 <__sfputc_r>
 8006e32:	1c43      	adds	r3, r0, #1
 8006e34:	d1f3      	bne.n	8006e1e <__sfputs_r+0xa>
 8006e36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006e38 <_vfiprintf_r>:
 8006e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e3c:	460d      	mov	r5, r1
 8006e3e:	b09d      	sub	sp, #116	@ 0x74
 8006e40:	4614      	mov	r4, r2
 8006e42:	4698      	mov	r8, r3
 8006e44:	4606      	mov	r6, r0
 8006e46:	b118      	cbz	r0, 8006e50 <_vfiprintf_r+0x18>
 8006e48:	6a03      	ldr	r3, [r0, #32]
 8006e4a:	b90b      	cbnz	r3, 8006e50 <_vfiprintf_r+0x18>
 8006e4c:	f7fe f8f0 	bl	8005030 <__sinit>
 8006e50:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006e52:	07d9      	lsls	r1, r3, #31
 8006e54:	d405      	bmi.n	8006e62 <_vfiprintf_r+0x2a>
 8006e56:	89ab      	ldrh	r3, [r5, #12]
 8006e58:	059a      	lsls	r2, r3, #22
 8006e5a:	d402      	bmi.n	8006e62 <_vfiprintf_r+0x2a>
 8006e5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006e5e:	f7fe fa12 	bl	8005286 <__retarget_lock_acquire_recursive>
 8006e62:	89ab      	ldrh	r3, [r5, #12]
 8006e64:	071b      	lsls	r3, r3, #28
 8006e66:	d501      	bpl.n	8006e6c <_vfiprintf_r+0x34>
 8006e68:	692b      	ldr	r3, [r5, #16]
 8006e6a:	b99b      	cbnz	r3, 8006e94 <_vfiprintf_r+0x5c>
 8006e6c:	4629      	mov	r1, r5
 8006e6e:	4630      	mov	r0, r6
 8006e70:	f000 f938 	bl	80070e4 <__swsetup_r>
 8006e74:	b170      	cbz	r0, 8006e94 <_vfiprintf_r+0x5c>
 8006e76:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006e78:	07dc      	lsls	r4, r3, #31
 8006e7a:	d504      	bpl.n	8006e86 <_vfiprintf_r+0x4e>
 8006e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8006e80:	b01d      	add	sp, #116	@ 0x74
 8006e82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e86:	89ab      	ldrh	r3, [r5, #12]
 8006e88:	0598      	lsls	r0, r3, #22
 8006e8a:	d4f7      	bmi.n	8006e7c <_vfiprintf_r+0x44>
 8006e8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006e8e:	f7fe f9fb 	bl	8005288 <__retarget_lock_release_recursive>
 8006e92:	e7f3      	b.n	8006e7c <_vfiprintf_r+0x44>
 8006e94:	2300      	movs	r3, #0
 8006e96:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e98:	2320      	movs	r3, #32
 8006e9a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006e9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006ea2:	2330      	movs	r3, #48	@ 0x30
 8006ea4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007054 <_vfiprintf_r+0x21c>
 8006ea8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006eac:	f04f 0901 	mov.w	r9, #1
 8006eb0:	4623      	mov	r3, r4
 8006eb2:	469a      	mov	sl, r3
 8006eb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006eb8:	b10a      	cbz	r2, 8006ebe <_vfiprintf_r+0x86>
 8006eba:	2a25      	cmp	r2, #37	@ 0x25
 8006ebc:	d1f9      	bne.n	8006eb2 <_vfiprintf_r+0x7a>
 8006ebe:	ebba 0b04 	subs.w	fp, sl, r4
 8006ec2:	d00b      	beq.n	8006edc <_vfiprintf_r+0xa4>
 8006ec4:	465b      	mov	r3, fp
 8006ec6:	4622      	mov	r2, r4
 8006ec8:	4629      	mov	r1, r5
 8006eca:	4630      	mov	r0, r6
 8006ecc:	f7ff ffa2 	bl	8006e14 <__sfputs_r>
 8006ed0:	3001      	adds	r0, #1
 8006ed2:	f000 80a7 	beq.w	8007024 <_vfiprintf_r+0x1ec>
 8006ed6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006ed8:	445a      	add	r2, fp
 8006eda:	9209      	str	r2, [sp, #36]	@ 0x24
 8006edc:	f89a 3000 	ldrb.w	r3, [sl]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	f000 809f 	beq.w	8007024 <_vfiprintf_r+0x1ec>
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8006eec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ef0:	f10a 0a01 	add.w	sl, sl, #1
 8006ef4:	9304      	str	r3, [sp, #16]
 8006ef6:	9307      	str	r3, [sp, #28]
 8006ef8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006efc:	931a      	str	r3, [sp, #104]	@ 0x68
 8006efe:	4654      	mov	r4, sl
 8006f00:	2205      	movs	r2, #5
 8006f02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f06:	4853      	ldr	r0, [pc, #332]	@ (8007054 <_vfiprintf_r+0x21c>)
 8006f08:	f7f9 f982 	bl	8000210 <memchr>
 8006f0c:	9a04      	ldr	r2, [sp, #16]
 8006f0e:	b9d8      	cbnz	r0, 8006f48 <_vfiprintf_r+0x110>
 8006f10:	06d1      	lsls	r1, r2, #27
 8006f12:	bf44      	itt	mi
 8006f14:	2320      	movmi	r3, #32
 8006f16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006f1a:	0713      	lsls	r3, r2, #28
 8006f1c:	bf44      	itt	mi
 8006f1e:	232b      	movmi	r3, #43	@ 0x2b
 8006f20:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006f24:	f89a 3000 	ldrb.w	r3, [sl]
 8006f28:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f2a:	d015      	beq.n	8006f58 <_vfiprintf_r+0x120>
 8006f2c:	9a07      	ldr	r2, [sp, #28]
 8006f2e:	4654      	mov	r4, sl
 8006f30:	2000      	movs	r0, #0
 8006f32:	f04f 0c0a 	mov.w	ip, #10
 8006f36:	4621      	mov	r1, r4
 8006f38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f3c:	3b30      	subs	r3, #48	@ 0x30
 8006f3e:	2b09      	cmp	r3, #9
 8006f40:	d94b      	bls.n	8006fda <_vfiprintf_r+0x1a2>
 8006f42:	b1b0      	cbz	r0, 8006f72 <_vfiprintf_r+0x13a>
 8006f44:	9207      	str	r2, [sp, #28]
 8006f46:	e014      	b.n	8006f72 <_vfiprintf_r+0x13a>
 8006f48:	eba0 0308 	sub.w	r3, r0, r8
 8006f4c:	fa09 f303 	lsl.w	r3, r9, r3
 8006f50:	4313      	orrs	r3, r2
 8006f52:	9304      	str	r3, [sp, #16]
 8006f54:	46a2      	mov	sl, r4
 8006f56:	e7d2      	b.n	8006efe <_vfiprintf_r+0xc6>
 8006f58:	9b03      	ldr	r3, [sp, #12]
 8006f5a:	1d19      	adds	r1, r3, #4
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	9103      	str	r1, [sp, #12]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	bfbb      	ittet	lt
 8006f64:	425b      	neglt	r3, r3
 8006f66:	f042 0202 	orrlt.w	r2, r2, #2
 8006f6a:	9307      	strge	r3, [sp, #28]
 8006f6c:	9307      	strlt	r3, [sp, #28]
 8006f6e:	bfb8      	it	lt
 8006f70:	9204      	strlt	r2, [sp, #16]
 8006f72:	7823      	ldrb	r3, [r4, #0]
 8006f74:	2b2e      	cmp	r3, #46	@ 0x2e
 8006f76:	d10a      	bne.n	8006f8e <_vfiprintf_r+0x156>
 8006f78:	7863      	ldrb	r3, [r4, #1]
 8006f7a:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f7c:	d132      	bne.n	8006fe4 <_vfiprintf_r+0x1ac>
 8006f7e:	9b03      	ldr	r3, [sp, #12]
 8006f80:	1d1a      	adds	r2, r3, #4
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	9203      	str	r2, [sp, #12]
 8006f86:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006f8a:	3402      	adds	r4, #2
 8006f8c:	9305      	str	r3, [sp, #20]
 8006f8e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007064 <_vfiprintf_r+0x22c>
 8006f92:	7821      	ldrb	r1, [r4, #0]
 8006f94:	2203      	movs	r2, #3
 8006f96:	4650      	mov	r0, sl
 8006f98:	f7f9 f93a 	bl	8000210 <memchr>
 8006f9c:	b138      	cbz	r0, 8006fae <_vfiprintf_r+0x176>
 8006f9e:	9b04      	ldr	r3, [sp, #16]
 8006fa0:	eba0 000a 	sub.w	r0, r0, sl
 8006fa4:	2240      	movs	r2, #64	@ 0x40
 8006fa6:	4082      	lsls	r2, r0
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	3401      	adds	r4, #1
 8006fac:	9304      	str	r3, [sp, #16]
 8006fae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fb2:	4829      	ldr	r0, [pc, #164]	@ (8007058 <_vfiprintf_r+0x220>)
 8006fb4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006fb8:	2206      	movs	r2, #6
 8006fba:	f7f9 f929 	bl	8000210 <memchr>
 8006fbe:	2800      	cmp	r0, #0
 8006fc0:	d03f      	beq.n	8007042 <_vfiprintf_r+0x20a>
 8006fc2:	4b26      	ldr	r3, [pc, #152]	@ (800705c <_vfiprintf_r+0x224>)
 8006fc4:	bb1b      	cbnz	r3, 800700e <_vfiprintf_r+0x1d6>
 8006fc6:	9b03      	ldr	r3, [sp, #12]
 8006fc8:	3307      	adds	r3, #7
 8006fca:	f023 0307 	bic.w	r3, r3, #7
 8006fce:	3308      	adds	r3, #8
 8006fd0:	9303      	str	r3, [sp, #12]
 8006fd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fd4:	443b      	add	r3, r7
 8006fd6:	9309      	str	r3, [sp, #36]	@ 0x24
 8006fd8:	e76a      	b.n	8006eb0 <_vfiprintf_r+0x78>
 8006fda:	fb0c 3202 	mla	r2, ip, r2, r3
 8006fde:	460c      	mov	r4, r1
 8006fe0:	2001      	movs	r0, #1
 8006fe2:	e7a8      	b.n	8006f36 <_vfiprintf_r+0xfe>
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	3401      	adds	r4, #1
 8006fe8:	9305      	str	r3, [sp, #20]
 8006fea:	4619      	mov	r1, r3
 8006fec:	f04f 0c0a 	mov.w	ip, #10
 8006ff0:	4620      	mov	r0, r4
 8006ff2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ff6:	3a30      	subs	r2, #48	@ 0x30
 8006ff8:	2a09      	cmp	r2, #9
 8006ffa:	d903      	bls.n	8007004 <_vfiprintf_r+0x1cc>
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d0c6      	beq.n	8006f8e <_vfiprintf_r+0x156>
 8007000:	9105      	str	r1, [sp, #20]
 8007002:	e7c4      	b.n	8006f8e <_vfiprintf_r+0x156>
 8007004:	fb0c 2101 	mla	r1, ip, r1, r2
 8007008:	4604      	mov	r4, r0
 800700a:	2301      	movs	r3, #1
 800700c:	e7f0      	b.n	8006ff0 <_vfiprintf_r+0x1b8>
 800700e:	ab03      	add	r3, sp, #12
 8007010:	9300      	str	r3, [sp, #0]
 8007012:	462a      	mov	r2, r5
 8007014:	4b12      	ldr	r3, [pc, #72]	@ (8007060 <_vfiprintf_r+0x228>)
 8007016:	a904      	add	r1, sp, #16
 8007018:	4630      	mov	r0, r6
 800701a:	f7fd fbc5 	bl	80047a8 <_printf_float>
 800701e:	4607      	mov	r7, r0
 8007020:	1c78      	adds	r0, r7, #1
 8007022:	d1d6      	bne.n	8006fd2 <_vfiprintf_r+0x19a>
 8007024:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007026:	07d9      	lsls	r1, r3, #31
 8007028:	d405      	bmi.n	8007036 <_vfiprintf_r+0x1fe>
 800702a:	89ab      	ldrh	r3, [r5, #12]
 800702c:	059a      	lsls	r2, r3, #22
 800702e:	d402      	bmi.n	8007036 <_vfiprintf_r+0x1fe>
 8007030:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007032:	f7fe f929 	bl	8005288 <__retarget_lock_release_recursive>
 8007036:	89ab      	ldrh	r3, [r5, #12]
 8007038:	065b      	lsls	r3, r3, #25
 800703a:	f53f af1f 	bmi.w	8006e7c <_vfiprintf_r+0x44>
 800703e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007040:	e71e      	b.n	8006e80 <_vfiprintf_r+0x48>
 8007042:	ab03      	add	r3, sp, #12
 8007044:	9300      	str	r3, [sp, #0]
 8007046:	462a      	mov	r2, r5
 8007048:	4b05      	ldr	r3, [pc, #20]	@ (8007060 <_vfiprintf_r+0x228>)
 800704a:	a904      	add	r1, sp, #16
 800704c:	4630      	mov	r0, r6
 800704e:	f7fd fe43 	bl	8004cd8 <_printf_i>
 8007052:	e7e4      	b.n	800701e <_vfiprintf_r+0x1e6>
 8007054:	08007ca0 	.word	0x08007ca0
 8007058:	08007caa 	.word	0x08007caa
 800705c:	080047a9 	.word	0x080047a9
 8007060:	08006e15 	.word	0x08006e15
 8007064:	08007ca6 	.word	0x08007ca6

08007068 <__swbuf_r>:
 8007068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800706a:	460e      	mov	r6, r1
 800706c:	4614      	mov	r4, r2
 800706e:	4605      	mov	r5, r0
 8007070:	b118      	cbz	r0, 800707a <__swbuf_r+0x12>
 8007072:	6a03      	ldr	r3, [r0, #32]
 8007074:	b90b      	cbnz	r3, 800707a <__swbuf_r+0x12>
 8007076:	f7fd ffdb 	bl	8005030 <__sinit>
 800707a:	69a3      	ldr	r3, [r4, #24]
 800707c:	60a3      	str	r3, [r4, #8]
 800707e:	89a3      	ldrh	r3, [r4, #12]
 8007080:	071a      	lsls	r2, r3, #28
 8007082:	d501      	bpl.n	8007088 <__swbuf_r+0x20>
 8007084:	6923      	ldr	r3, [r4, #16]
 8007086:	b943      	cbnz	r3, 800709a <__swbuf_r+0x32>
 8007088:	4621      	mov	r1, r4
 800708a:	4628      	mov	r0, r5
 800708c:	f000 f82a 	bl	80070e4 <__swsetup_r>
 8007090:	b118      	cbz	r0, 800709a <__swbuf_r+0x32>
 8007092:	f04f 37ff 	mov.w	r7, #4294967295
 8007096:	4638      	mov	r0, r7
 8007098:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800709a:	6823      	ldr	r3, [r4, #0]
 800709c:	6922      	ldr	r2, [r4, #16]
 800709e:	1a98      	subs	r0, r3, r2
 80070a0:	6963      	ldr	r3, [r4, #20]
 80070a2:	b2f6      	uxtb	r6, r6
 80070a4:	4283      	cmp	r3, r0
 80070a6:	4637      	mov	r7, r6
 80070a8:	dc05      	bgt.n	80070b6 <__swbuf_r+0x4e>
 80070aa:	4621      	mov	r1, r4
 80070ac:	4628      	mov	r0, r5
 80070ae:	f7ff fd99 	bl	8006be4 <_fflush_r>
 80070b2:	2800      	cmp	r0, #0
 80070b4:	d1ed      	bne.n	8007092 <__swbuf_r+0x2a>
 80070b6:	68a3      	ldr	r3, [r4, #8]
 80070b8:	3b01      	subs	r3, #1
 80070ba:	60a3      	str	r3, [r4, #8]
 80070bc:	6823      	ldr	r3, [r4, #0]
 80070be:	1c5a      	adds	r2, r3, #1
 80070c0:	6022      	str	r2, [r4, #0]
 80070c2:	701e      	strb	r6, [r3, #0]
 80070c4:	6962      	ldr	r2, [r4, #20]
 80070c6:	1c43      	adds	r3, r0, #1
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d004      	beq.n	80070d6 <__swbuf_r+0x6e>
 80070cc:	89a3      	ldrh	r3, [r4, #12]
 80070ce:	07db      	lsls	r3, r3, #31
 80070d0:	d5e1      	bpl.n	8007096 <__swbuf_r+0x2e>
 80070d2:	2e0a      	cmp	r6, #10
 80070d4:	d1df      	bne.n	8007096 <__swbuf_r+0x2e>
 80070d6:	4621      	mov	r1, r4
 80070d8:	4628      	mov	r0, r5
 80070da:	f7ff fd83 	bl	8006be4 <_fflush_r>
 80070de:	2800      	cmp	r0, #0
 80070e0:	d0d9      	beq.n	8007096 <__swbuf_r+0x2e>
 80070e2:	e7d6      	b.n	8007092 <__swbuf_r+0x2a>

080070e4 <__swsetup_r>:
 80070e4:	b538      	push	{r3, r4, r5, lr}
 80070e6:	4b29      	ldr	r3, [pc, #164]	@ (800718c <__swsetup_r+0xa8>)
 80070e8:	4605      	mov	r5, r0
 80070ea:	6818      	ldr	r0, [r3, #0]
 80070ec:	460c      	mov	r4, r1
 80070ee:	b118      	cbz	r0, 80070f8 <__swsetup_r+0x14>
 80070f0:	6a03      	ldr	r3, [r0, #32]
 80070f2:	b90b      	cbnz	r3, 80070f8 <__swsetup_r+0x14>
 80070f4:	f7fd ff9c 	bl	8005030 <__sinit>
 80070f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070fc:	0719      	lsls	r1, r3, #28
 80070fe:	d422      	bmi.n	8007146 <__swsetup_r+0x62>
 8007100:	06da      	lsls	r2, r3, #27
 8007102:	d407      	bmi.n	8007114 <__swsetup_r+0x30>
 8007104:	2209      	movs	r2, #9
 8007106:	602a      	str	r2, [r5, #0]
 8007108:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800710c:	81a3      	strh	r3, [r4, #12]
 800710e:	f04f 30ff 	mov.w	r0, #4294967295
 8007112:	e033      	b.n	800717c <__swsetup_r+0x98>
 8007114:	0758      	lsls	r0, r3, #29
 8007116:	d512      	bpl.n	800713e <__swsetup_r+0x5a>
 8007118:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800711a:	b141      	cbz	r1, 800712e <__swsetup_r+0x4a>
 800711c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007120:	4299      	cmp	r1, r3
 8007122:	d002      	beq.n	800712a <__swsetup_r+0x46>
 8007124:	4628      	mov	r0, r5
 8007126:	f7fe feff 	bl	8005f28 <_free_r>
 800712a:	2300      	movs	r3, #0
 800712c:	6363      	str	r3, [r4, #52]	@ 0x34
 800712e:	89a3      	ldrh	r3, [r4, #12]
 8007130:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007134:	81a3      	strh	r3, [r4, #12]
 8007136:	2300      	movs	r3, #0
 8007138:	6063      	str	r3, [r4, #4]
 800713a:	6923      	ldr	r3, [r4, #16]
 800713c:	6023      	str	r3, [r4, #0]
 800713e:	89a3      	ldrh	r3, [r4, #12]
 8007140:	f043 0308 	orr.w	r3, r3, #8
 8007144:	81a3      	strh	r3, [r4, #12]
 8007146:	6923      	ldr	r3, [r4, #16]
 8007148:	b94b      	cbnz	r3, 800715e <__swsetup_r+0x7a>
 800714a:	89a3      	ldrh	r3, [r4, #12]
 800714c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007150:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007154:	d003      	beq.n	800715e <__swsetup_r+0x7a>
 8007156:	4621      	mov	r1, r4
 8007158:	4628      	mov	r0, r5
 800715a:	f000 f883 	bl	8007264 <__smakebuf_r>
 800715e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007162:	f013 0201 	ands.w	r2, r3, #1
 8007166:	d00a      	beq.n	800717e <__swsetup_r+0x9a>
 8007168:	2200      	movs	r2, #0
 800716a:	60a2      	str	r2, [r4, #8]
 800716c:	6962      	ldr	r2, [r4, #20]
 800716e:	4252      	negs	r2, r2
 8007170:	61a2      	str	r2, [r4, #24]
 8007172:	6922      	ldr	r2, [r4, #16]
 8007174:	b942      	cbnz	r2, 8007188 <__swsetup_r+0xa4>
 8007176:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800717a:	d1c5      	bne.n	8007108 <__swsetup_r+0x24>
 800717c:	bd38      	pop	{r3, r4, r5, pc}
 800717e:	0799      	lsls	r1, r3, #30
 8007180:	bf58      	it	pl
 8007182:	6962      	ldrpl	r2, [r4, #20]
 8007184:	60a2      	str	r2, [r4, #8]
 8007186:	e7f4      	b.n	8007172 <__swsetup_r+0x8e>
 8007188:	2000      	movs	r0, #0
 800718a:	e7f7      	b.n	800717c <__swsetup_r+0x98>
 800718c:	2000001c 	.word	0x2000001c

08007190 <_raise_r>:
 8007190:	291f      	cmp	r1, #31
 8007192:	b538      	push	{r3, r4, r5, lr}
 8007194:	4605      	mov	r5, r0
 8007196:	460c      	mov	r4, r1
 8007198:	d904      	bls.n	80071a4 <_raise_r+0x14>
 800719a:	2316      	movs	r3, #22
 800719c:	6003      	str	r3, [r0, #0]
 800719e:	f04f 30ff 	mov.w	r0, #4294967295
 80071a2:	bd38      	pop	{r3, r4, r5, pc}
 80071a4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80071a6:	b112      	cbz	r2, 80071ae <_raise_r+0x1e>
 80071a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80071ac:	b94b      	cbnz	r3, 80071c2 <_raise_r+0x32>
 80071ae:	4628      	mov	r0, r5
 80071b0:	f000 f830 	bl	8007214 <_getpid_r>
 80071b4:	4622      	mov	r2, r4
 80071b6:	4601      	mov	r1, r0
 80071b8:	4628      	mov	r0, r5
 80071ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80071be:	f000 b817 	b.w	80071f0 <_kill_r>
 80071c2:	2b01      	cmp	r3, #1
 80071c4:	d00a      	beq.n	80071dc <_raise_r+0x4c>
 80071c6:	1c59      	adds	r1, r3, #1
 80071c8:	d103      	bne.n	80071d2 <_raise_r+0x42>
 80071ca:	2316      	movs	r3, #22
 80071cc:	6003      	str	r3, [r0, #0]
 80071ce:	2001      	movs	r0, #1
 80071d0:	e7e7      	b.n	80071a2 <_raise_r+0x12>
 80071d2:	2100      	movs	r1, #0
 80071d4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80071d8:	4620      	mov	r0, r4
 80071da:	4798      	blx	r3
 80071dc:	2000      	movs	r0, #0
 80071de:	e7e0      	b.n	80071a2 <_raise_r+0x12>

080071e0 <raise>:
 80071e0:	4b02      	ldr	r3, [pc, #8]	@ (80071ec <raise+0xc>)
 80071e2:	4601      	mov	r1, r0
 80071e4:	6818      	ldr	r0, [r3, #0]
 80071e6:	f7ff bfd3 	b.w	8007190 <_raise_r>
 80071ea:	bf00      	nop
 80071ec:	2000001c 	.word	0x2000001c

080071f0 <_kill_r>:
 80071f0:	b538      	push	{r3, r4, r5, lr}
 80071f2:	4d07      	ldr	r5, [pc, #28]	@ (8007210 <_kill_r+0x20>)
 80071f4:	2300      	movs	r3, #0
 80071f6:	4604      	mov	r4, r0
 80071f8:	4608      	mov	r0, r1
 80071fa:	4611      	mov	r1, r2
 80071fc:	602b      	str	r3, [r5, #0]
 80071fe:	f7fa fb0c 	bl	800181a <_kill>
 8007202:	1c43      	adds	r3, r0, #1
 8007204:	d102      	bne.n	800720c <_kill_r+0x1c>
 8007206:	682b      	ldr	r3, [r5, #0]
 8007208:	b103      	cbz	r3, 800720c <_kill_r+0x1c>
 800720a:	6023      	str	r3, [r4, #0]
 800720c:	bd38      	pop	{r3, r4, r5, pc}
 800720e:	bf00      	nop
 8007210:	200003ec 	.word	0x200003ec

08007214 <_getpid_r>:
 8007214:	f7fa baf9 	b.w	800180a <_getpid>

08007218 <__swhatbuf_r>:
 8007218:	b570      	push	{r4, r5, r6, lr}
 800721a:	460c      	mov	r4, r1
 800721c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007220:	2900      	cmp	r1, #0
 8007222:	b096      	sub	sp, #88	@ 0x58
 8007224:	4615      	mov	r5, r2
 8007226:	461e      	mov	r6, r3
 8007228:	da0d      	bge.n	8007246 <__swhatbuf_r+0x2e>
 800722a:	89a3      	ldrh	r3, [r4, #12]
 800722c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007230:	f04f 0100 	mov.w	r1, #0
 8007234:	bf14      	ite	ne
 8007236:	2340      	movne	r3, #64	@ 0x40
 8007238:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800723c:	2000      	movs	r0, #0
 800723e:	6031      	str	r1, [r6, #0]
 8007240:	602b      	str	r3, [r5, #0]
 8007242:	b016      	add	sp, #88	@ 0x58
 8007244:	bd70      	pop	{r4, r5, r6, pc}
 8007246:	466a      	mov	r2, sp
 8007248:	f000 f848 	bl	80072dc <_fstat_r>
 800724c:	2800      	cmp	r0, #0
 800724e:	dbec      	blt.n	800722a <__swhatbuf_r+0x12>
 8007250:	9901      	ldr	r1, [sp, #4]
 8007252:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007256:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800725a:	4259      	negs	r1, r3
 800725c:	4159      	adcs	r1, r3
 800725e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007262:	e7eb      	b.n	800723c <__swhatbuf_r+0x24>

08007264 <__smakebuf_r>:
 8007264:	898b      	ldrh	r3, [r1, #12]
 8007266:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007268:	079d      	lsls	r5, r3, #30
 800726a:	4606      	mov	r6, r0
 800726c:	460c      	mov	r4, r1
 800726e:	d507      	bpl.n	8007280 <__smakebuf_r+0x1c>
 8007270:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007274:	6023      	str	r3, [r4, #0]
 8007276:	6123      	str	r3, [r4, #16]
 8007278:	2301      	movs	r3, #1
 800727a:	6163      	str	r3, [r4, #20]
 800727c:	b003      	add	sp, #12
 800727e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007280:	ab01      	add	r3, sp, #4
 8007282:	466a      	mov	r2, sp
 8007284:	f7ff ffc8 	bl	8007218 <__swhatbuf_r>
 8007288:	9f00      	ldr	r7, [sp, #0]
 800728a:	4605      	mov	r5, r0
 800728c:	4639      	mov	r1, r7
 800728e:	4630      	mov	r0, r6
 8007290:	f7fe febe 	bl	8006010 <_malloc_r>
 8007294:	b948      	cbnz	r0, 80072aa <__smakebuf_r+0x46>
 8007296:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800729a:	059a      	lsls	r2, r3, #22
 800729c:	d4ee      	bmi.n	800727c <__smakebuf_r+0x18>
 800729e:	f023 0303 	bic.w	r3, r3, #3
 80072a2:	f043 0302 	orr.w	r3, r3, #2
 80072a6:	81a3      	strh	r3, [r4, #12]
 80072a8:	e7e2      	b.n	8007270 <__smakebuf_r+0xc>
 80072aa:	89a3      	ldrh	r3, [r4, #12]
 80072ac:	6020      	str	r0, [r4, #0]
 80072ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072b2:	81a3      	strh	r3, [r4, #12]
 80072b4:	9b01      	ldr	r3, [sp, #4]
 80072b6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80072ba:	b15b      	cbz	r3, 80072d4 <__smakebuf_r+0x70>
 80072bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80072c0:	4630      	mov	r0, r6
 80072c2:	f000 f81d 	bl	8007300 <_isatty_r>
 80072c6:	b128      	cbz	r0, 80072d4 <__smakebuf_r+0x70>
 80072c8:	89a3      	ldrh	r3, [r4, #12]
 80072ca:	f023 0303 	bic.w	r3, r3, #3
 80072ce:	f043 0301 	orr.w	r3, r3, #1
 80072d2:	81a3      	strh	r3, [r4, #12]
 80072d4:	89a3      	ldrh	r3, [r4, #12]
 80072d6:	431d      	orrs	r5, r3
 80072d8:	81a5      	strh	r5, [r4, #12]
 80072da:	e7cf      	b.n	800727c <__smakebuf_r+0x18>

080072dc <_fstat_r>:
 80072dc:	b538      	push	{r3, r4, r5, lr}
 80072de:	4d07      	ldr	r5, [pc, #28]	@ (80072fc <_fstat_r+0x20>)
 80072e0:	2300      	movs	r3, #0
 80072e2:	4604      	mov	r4, r0
 80072e4:	4608      	mov	r0, r1
 80072e6:	4611      	mov	r1, r2
 80072e8:	602b      	str	r3, [r5, #0]
 80072ea:	f7fa faf6 	bl	80018da <_fstat>
 80072ee:	1c43      	adds	r3, r0, #1
 80072f0:	d102      	bne.n	80072f8 <_fstat_r+0x1c>
 80072f2:	682b      	ldr	r3, [r5, #0]
 80072f4:	b103      	cbz	r3, 80072f8 <_fstat_r+0x1c>
 80072f6:	6023      	str	r3, [r4, #0]
 80072f8:	bd38      	pop	{r3, r4, r5, pc}
 80072fa:	bf00      	nop
 80072fc:	200003ec 	.word	0x200003ec

08007300 <_isatty_r>:
 8007300:	b538      	push	{r3, r4, r5, lr}
 8007302:	4d06      	ldr	r5, [pc, #24]	@ (800731c <_isatty_r+0x1c>)
 8007304:	2300      	movs	r3, #0
 8007306:	4604      	mov	r4, r0
 8007308:	4608      	mov	r0, r1
 800730a:	602b      	str	r3, [r5, #0]
 800730c:	f7fa faf5 	bl	80018fa <_isatty>
 8007310:	1c43      	adds	r3, r0, #1
 8007312:	d102      	bne.n	800731a <_isatty_r+0x1a>
 8007314:	682b      	ldr	r3, [r5, #0]
 8007316:	b103      	cbz	r3, 800731a <_isatty_r+0x1a>
 8007318:	6023      	str	r3, [r4, #0]
 800731a:	bd38      	pop	{r3, r4, r5, pc}
 800731c:	200003ec 	.word	0x200003ec

08007320 <sqrt>:
 8007320:	b538      	push	{r3, r4, r5, lr}
 8007322:	ed2d 8b02 	vpush	{d8}
 8007326:	ec55 4b10 	vmov	r4, r5, d0
 800732a:	f000 f9c5 	bl	80076b8 <__ieee754_sqrt>
 800732e:	4622      	mov	r2, r4
 8007330:	462b      	mov	r3, r5
 8007332:	4620      	mov	r0, r4
 8007334:	4629      	mov	r1, r5
 8007336:	eeb0 8a40 	vmov.f32	s16, s0
 800733a:	eef0 8a60 	vmov.f32	s17, s1
 800733e:	f7f9 fc15 	bl	8000b6c <__aeabi_dcmpun>
 8007342:	b990      	cbnz	r0, 800736a <sqrt+0x4a>
 8007344:	2200      	movs	r2, #0
 8007346:	2300      	movs	r3, #0
 8007348:	4620      	mov	r0, r4
 800734a:	4629      	mov	r1, r5
 800734c:	f7f9 fbe6 	bl	8000b1c <__aeabi_dcmplt>
 8007350:	b158      	cbz	r0, 800736a <sqrt+0x4a>
 8007352:	f7fd ff6d 	bl	8005230 <__errno>
 8007356:	2321      	movs	r3, #33	@ 0x21
 8007358:	6003      	str	r3, [r0, #0]
 800735a:	2200      	movs	r2, #0
 800735c:	2300      	movs	r3, #0
 800735e:	4610      	mov	r0, r2
 8007360:	4619      	mov	r1, r3
 8007362:	f7f9 fa93 	bl	800088c <__aeabi_ddiv>
 8007366:	ec41 0b18 	vmov	d8, r0, r1
 800736a:	eeb0 0a48 	vmov.f32	s0, s16
 800736e:	eef0 0a68 	vmov.f32	s1, s17
 8007372:	ecbd 8b02 	vpop	{d8}
 8007376:	bd38      	pop	{r3, r4, r5, pc}

08007378 <atan>:
 8007378:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800737c:	ec55 4b10 	vmov	r4, r5, d0
 8007380:	4bbf      	ldr	r3, [pc, #764]	@ (8007680 <atan+0x308>)
 8007382:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8007386:	429e      	cmp	r6, r3
 8007388:	46ab      	mov	fp, r5
 800738a:	d918      	bls.n	80073be <atan+0x46>
 800738c:	4bbd      	ldr	r3, [pc, #756]	@ (8007684 <atan+0x30c>)
 800738e:	429e      	cmp	r6, r3
 8007390:	d801      	bhi.n	8007396 <atan+0x1e>
 8007392:	d109      	bne.n	80073a8 <atan+0x30>
 8007394:	b144      	cbz	r4, 80073a8 <atan+0x30>
 8007396:	4622      	mov	r2, r4
 8007398:	462b      	mov	r3, r5
 800739a:	4620      	mov	r0, r4
 800739c:	4629      	mov	r1, r5
 800739e:	f7f8 ff95 	bl	80002cc <__adddf3>
 80073a2:	4604      	mov	r4, r0
 80073a4:	460d      	mov	r5, r1
 80073a6:	e006      	b.n	80073b6 <atan+0x3e>
 80073a8:	f1bb 0f00 	cmp.w	fp, #0
 80073ac:	f340 812b 	ble.w	8007606 <atan+0x28e>
 80073b0:	a597      	add	r5, pc, #604	@ (adr r5, 8007610 <atan+0x298>)
 80073b2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80073b6:	ec45 4b10 	vmov	d0, r4, r5
 80073ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073be:	4bb2      	ldr	r3, [pc, #712]	@ (8007688 <atan+0x310>)
 80073c0:	429e      	cmp	r6, r3
 80073c2:	d813      	bhi.n	80073ec <atan+0x74>
 80073c4:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 80073c8:	429e      	cmp	r6, r3
 80073ca:	d80c      	bhi.n	80073e6 <atan+0x6e>
 80073cc:	a392      	add	r3, pc, #584	@ (adr r3, 8007618 <atan+0x2a0>)
 80073ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073d2:	4620      	mov	r0, r4
 80073d4:	4629      	mov	r1, r5
 80073d6:	f7f8 ff79 	bl	80002cc <__adddf3>
 80073da:	4bac      	ldr	r3, [pc, #688]	@ (800768c <atan+0x314>)
 80073dc:	2200      	movs	r2, #0
 80073de:	f7f9 fbbb 	bl	8000b58 <__aeabi_dcmpgt>
 80073e2:	2800      	cmp	r0, #0
 80073e4:	d1e7      	bne.n	80073b6 <atan+0x3e>
 80073e6:	f04f 3aff 	mov.w	sl, #4294967295
 80073ea:	e029      	b.n	8007440 <atan+0xc8>
 80073ec:	f000 f95c 	bl	80076a8 <fabs>
 80073f0:	4ba7      	ldr	r3, [pc, #668]	@ (8007690 <atan+0x318>)
 80073f2:	429e      	cmp	r6, r3
 80073f4:	ec55 4b10 	vmov	r4, r5, d0
 80073f8:	f200 80bc 	bhi.w	8007574 <atan+0x1fc>
 80073fc:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8007400:	429e      	cmp	r6, r3
 8007402:	f200 809e 	bhi.w	8007542 <atan+0x1ca>
 8007406:	4622      	mov	r2, r4
 8007408:	462b      	mov	r3, r5
 800740a:	4620      	mov	r0, r4
 800740c:	4629      	mov	r1, r5
 800740e:	f7f8 ff5d 	bl	80002cc <__adddf3>
 8007412:	4b9e      	ldr	r3, [pc, #632]	@ (800768c <atan+0x314>)
 8007414:	2200      	movs	r2, #0
 8007416:	f7f8 ff57 	bl	80002c8 <__aeabi_dsub>
 800741a:	2200      	movs	r2, #0
 800741c:	4606      	mov	r6, r0
 800741e:	460f      	mov	r7, r1
 8007420:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007424:	4620      	mov	r0, r4
 8007426:	4629      	mov	r1, r5
 8007428:	f7f8 ff50 	bl	80002cc <__adddf3>
 800742c:	4602      	mov	r2, r0
 800742e:	460b      	mov	r3, r1
 8007430:	4630      	mov	r0, r6
 8007432:	4639      	mov	r1, r7
 8007434:	f7f9 fa2a 	bl	800088c <__aeabi_ddiv>
 8007438:	f04f 0a00 	mov.w	sl, #0
 800743c:	4604      	mov	r4, r0
 800743e:	460d      	mov	r5, r1
 8007440:	4622      	mov	r2, r4
 8007442:	462b      	mov	r3, r5
 8007444:	4620      	mov	r0, r4
 8007446:	4629      	mov	r1, r5
 8007448:	f7f9 f8f6 	bl	8000638 <__aeabi_dmul>
 800744c:	4602      	mov	r2, r0
 800744e:	460b      	mov	r3, r1
 8007450:	4680      	mov	r8, r0
 8007452:	4689      	mov	r9, r1
 8007454:	f7f9 f8f0 	bl	8000638 <__aeabi_dmul>
 8007458:	a371      	add	r3, pc, #452	@ (adr r3, 8007620 <atan+0x2a8>)
 800745a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800745e:	4606      	mov	r6, r0
 8007460:	460f      	mov	r7, r1
 8007462:	f7f9 f8e9 	bl	8000638 <__aeabi_dmul>
 8007466:	a370      	add	r3, pc, #448	@ (adr r3, 8007628 <atan+0x2b0>)
 8007468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800746c:	f7f8 ff2e 	bl	80002cc <__adddf3>
 8007470:	4632      	mov	r2, r6
 8007472:	463b      	mov	r3, r7
 8007474:	f7f9 f8e0 	bl	8000638 <__aeabi_dmul>
 8007478:	a36d      	add	r3, pc, #436	@ (adr r3, 8007630 <atan+0x2b8>)
 800747a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800747e:	f7f8 ff25 	bl	80002cc <__adddf3>
 8007482:	4632      	mov	r2, r6
 8007484:	463b      	mov	r3, r7
 8007486:	f7f9 f8d7 	bl	8000638 <__aeabi_dmul>
 800748a:	a36b      	add	r3, pc, #428	@ (adr r3, 8007638 <atan+0x2c0>)
 800748c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007490:	f7f8 ff1c 	bl	80002cc <__adddf3>
 8007494:	4632      	mov	r2, r6
 8007496:	463b      	mov	r3, r7
 8007498:	f7f9 f8ce 	bl	8000638 <__aeabi_dmul>
 800749c:	a368      	add	r3, pc, #416	@ (adr r3, 8007640 <atan+0x2c8>)
 800749e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a2:	f7f8 ff13 	bl	80002cc <__adddf3>
 80074a6:	4632      	mov	r2, r6
 80074a8:	463b      	mov	r3, r7
 80074aa:	f7f9 f8c5 	bl	8000638 <__aeabi_dmul>
 80074ae:	a366      	add	r3, pc, #408	@ (adr r3, 8007648 <atan+0x2d0>)
 80074b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b4:	f7f8 ff0a 	bl	80002cc <__adddf3>
 80074b8:	4642      	mov	r2, r8
 80074ba:	464b      	mov	r3, r9
 80074bc:	f7f9 f8bc 	bl	8000638 <__aeabi_dmul>
 80074c0:	a363      	add	r3, pc, #396	@ (adr r3, 8007650 <atan+0x2d8>)
 80074c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074c6:	4680      	mov	r8, r0
 80074c8:	4689      	mov	r9, r1
 80074ca:	4630      	mov	r0, r6
 80074cc:	4639      	mov	r1, r7
 80074ce:	f7f9 f8b3 	bl	8000638 <__aeabi_dmul>
 80074d2:	a361      	add	r3, pc, #388	@ (adr r3, 8007658 <atan+0x2e0>)
 80074d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d8:	f7f8 fef6 	bl	80002c8 <__aeabi_dsub>
 80074dc:	4632      	mov	r2, r6
 80074de:	463b      	mov	r3, r7
 80074e0:	f7f9 f8aa 	bl	8000638 <__aeabi_dmul>
 80074e4:	a35e      	add	r3, pc, #376	@ (adr r3, 8007660 <atan+0x2e8>)
 80074e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ea:	f7f8 feed 	bl	80002c8 <__aeabi_dsub>
 80074ee:	4632      	mov	r2, r6
 80074f0:	463b      	mov	r3, r7
 80074f2:	f7f9 f8a1 	bl	8000638 <__aeabi_dmul>
 80074f6:	a35c      	add	r3, pc, #368	@ (adr r3, 8007668 <atan+0x2f0>)
 80074f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074fc:	f7f8 fee4 	bl	80002c8 <__aeabi_dsub>
 8007500:	4632      	mov	r2, r6
 8007502:	463b      	mov	r3, r7
 8007504:	f7f9 f898 	bl	8000638 <__aeabi_dmul>
 8007508:	a359      	add	r3, pc, #356	@ (adr r3, 8007670 <atan+0x2f8>)
 800750a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800750e:	f7f8 fedb 	bl	80002c8 <__aeabi_dsub>
 8007512:	4632      	mov	r2, r6
 8007514:	463b      	mov	r3, r7
 8007516:	f7f9 f88f 	bl	8000638 <__aeabi_dmul>
 800751a:	4602      	mov	r2, r0
 800751c:	460b      	mov	r3, r1
 800751e:	4640      	mov	r0, r8
 8007520:	4649      	mov	r1, r9
 8007522:	f7f8 fed3 	bl	80002cc <__adddf3>
 8007526:	4622      	mov	r2, r4
 8007528:	462b      	mov	r3, r5
 800752a:	f7f9 f885 	bl	8000638 <__aeabi_dmul>
 800752e:	f1ba 3fff 	cmp.w	sl, #4294967295
 8007532:	4602      	mov	r2, r0
 8007534:	460b      	mov	r3, r1
 8007536:	d148      	bne.n	80075ca <atan+0x252>
 8007538:	4620      	mov	r0, r4
 800753a:	4629      	mov	r1, r5
 800753c:	f7f8 fec4 	bl	80002c8 <__aeabi_dsub>
 8007540:	e72f      	b.n	80073a2 <atan+0x2a>
 8007542:	4b52      	ldr	r3, [pc, #328]	@ (800768c <atan+0x314>)
 8007544:	2200      	movs	r2, #0
 8007546:	4620      	mov	r0, r4
 8007548:	4629      	mov	r1, r5
 800754a:	f7f8 febd 	bl	80002c8 <__aeabi_dsub>
 800754e:	4b4f      	ldr	r3, [pc, #316]	@ (800768c <atan+0x314>)
 8007550:	4606      	mov	r6, r0
 8007552:	460f      	mov	r7, r1
 8007554:	2200      	movs	r2, #0
 8007556:	4620      	mov	r0, r4
 8007558:	4629      	mov	r1, r5
 800755a:	f7f8 feb7 	bl	80002cc <__adddf3>
 800755e:	4602      	mov	r2, r0
 8007560:	460b      	mov	r3, r1
 8007562:	4630      	mov	r0, r6
 8007564:	4639      	mov	r1, r7
 8007566:	f7f9 f991 	bl	800088c <__aeabi_ddiv>
 800756a:	f04f 0a01 	mov.w	sl, #1
 800756e:	4604      	mov	r4, r0
 8007570:	460d      	mov	r5, r1
 8007572:	e765      	b.n	8007440 <atan+0xc8>
 8007574:	4b47      	ldr	r3, [pc, #284]	@ (8007694 <atan+0x31c>)
 8007576:	429e      	cmp	r6, r3
 8007578:	d21c      	bcs.n	80075b4 <atan+0x23c>
 800757a:	4b47      	ldr	r3, [pc, #284]	@ (8007698 <atan+0x320>)
 800757c:	2200      	movs	r2, #0
 800757e:	4620      	mov	r0, r4
 8007580:	4629      	mov	r1, r5
 8007582:	f7f8 fea1 	bl	80002c8 <__aeabi_dsub>
 8007586:	4b44      	ldr	r3, [pc, #272]	@ (8007698 <atan+0x320>)
 8007588:	4606      	mov	r6, r0
 800758a:	460f      	mov	r7, r1
 800758c:	2200      	movs	r2, #0
 800758e:	4620      	mov	r0, r4
 8007590:	4629      	mov	r1, r5
 8007592:	f7f9 f851 	bl	8000638 <__aeabi_dmul>
 8007596:	4b3d      	ldr	r3, [pc, #244]	@ (800768c <atan+0x314>)
 8007598:	2200      	movs	r2, #0
 800759a:	f7f8 fe97 	bl	80002cc <__adddf3>
 800759e:	4602      	mov	r2, r0
 80075a0:	460b      	mov	r3, r1
 80075a2:	4630      	mov	r0, r6
 80075a4:	4639      	mov	r1, r7
 80075a6:	f7f9 f971 	bl	800088c <__aeabi_ddiv>
 80075aa:	f04f 0a02 	mov.w	sl, #2
 80075ae:	4604      	mov	r4, r0
 80075b0:	460d      	mov	r5, r1
 80075b2:	e745      	b.n	8007440 <atan+0xc8>
 80075b4:	4622      	mov	r2, r4
 80075b6:	462b      	mov	r3, r5
 80075b8:	4938      	ldr	r1, [pc, #224]	@ (800769c <atan+0x324>)
 80075ba:	2000      	movs	r0, #0
 80075bc:	f7f9 f966 	bl	800088c <__aeabi_ddiv>
 80075c0:	f04f 0a03 	mov.w	sl, #3
 80075c4:	4604      	mov	r4, r0
 80075c6:	460d      	mov	r5, r1
 80075c8:	e73a      	b.n	8007440 <atan+0xc8>
 80075ca:	4b35      	ldr	r3, [pc, #212]	@ (80076a0 <atan+0x328>)
 80075cc:	4e35      	ldr	r6, [pc, #212]	@ (80076a4 <atan+0x32c>)
 80075ce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80075d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075d6:	f7f8 fe77 	bl	80002c8 <__aeabi_dsub>
 80075da:	4622      	mov	r2, r4
 80075dc:	462b      	mov	r3, r5
 80075de:	f7f8 fe73 	bl	80002c8 <__aeabi_dsub>
 80075e2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80075e6:	4602      	mov	r2, r0
 80075e8:	460b      	mov	r3, r1
 80075ea:	e9d6 0100 	ldrd	r0, r1, [r6]
 80075ee:	f7f8 fe6b 	bl	80002c8 <__aeabi_dsub>
 80075f2:	f1bb 0f00 	cmp.w	fp, #0
 80075f6:	4604      	mov	r4, r0
 80075f8:	460d      	mov	r5, r1
 80075fa:	f6bf aedc 	bge.w	80073b6 <atan+0x3e>
 80075fe:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007602:	461d      	mov	r5, r3
 8007604:	e6d7      	b.n	80073b6 <atan+0x3e>
 8007606:	a51c      	add	r5, pc, #112	@ (adr r5, 8007678 <atan+0x300>)
 8007608:	e9d5 4500 	ldrd	r4, r5, [r5]
 800760c:	e6d3      	b.n	80073b6 <atan+0x3e>
 800760e:	bf00      	nop
 8007610:	54442d18 	.word	0x54442d18
 8007614:	3ff921fb 	.word	0x3ff921fb
 8007618:	8800759c 	.word	0x8800759c
 800761c:	7e37e43c 	.word	0x7e37e43c
 8007620:	e322da11 	.word	0xe322da11
 8007624:	3f90ad3a 	.word	0x3f90ad3a
 8007628:	24760deb 	.word	0x24760deb
 800762c:	3fa97b4b 	.word	0x3fa97b4b
 8007630:	a0d03d51 	.word	0xa0d03d51
 8007634:	3fb10d66 	.word	0x3fb10d66
 8007638:	c54c206e 	.word	0xc54c206e
 800763c:	3fb745cd 	.word	0x3fb745cd
 8007640:	920083ff 	.word	0x920083ff
 8007644:	3fc24924 	.word	0x3fc24924
 8007648:	5555550d 	.word	0x5555550d
 800764c:	3fd55555 	.word	0x3fd55555
 8007650:	2c6a6c2f 	.word	0x2c6a6c2f
 8007654:	bfa2b444 	.word	0xbfa2b444
 8007658:	52defd9a 	.word	0x52defd9a
 800765c:	3fadde2d 	.word	0x3fadde2d
 8007660:	af749a6d 	.word	0xaf749a6d
 8007664:	3fb3b0f2 	.word	0x3fb3b0f2
 8007668:	fe231671 	.word	0xfe231671
 800766c:	3fbc71c6 	.word	0x3fbc71c6
 8007670:	9998ebc4 	.word	0x9998ebc4
 8007674:	3fc99999 	.word	0x3fc99999
 8007678:	54442d18 	.word	0x54442d18
 800767c:	bff921fb 	.word	0xbff921fb
 8007680:	440fffff 	.word	0x440fffff
 8007684:	7ff00000 	.word	0x7ff00000
 8007688:	3fdbffff 	.word	0x3fdbffff
 800768c:	3ff00000 	.word	0x3ff00000
 8007690:	3ff2ffff 	.word	0x3ff2ffff
 8007694:	40038000 	.word	0x40038000
 8007698:	3ff80000 	.word	0x3ff80000
 800769c:	bff00000 	.word	0xbff00000
 80076a0:	08007df8 	.word	0x08007df8
 80076a4:	08007e18 	.word	0x08007e18

080076a8 <fabs>:
 80076a8:	ec51 0b10 	vmov	r0, r1, d0
 80076ac:	4602      	mov	r2, r0
 80076ae:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80076b2:	ec43 2b10 	vmov	d0, r2, r3
 80076b6:	4770      	bx	lr

080076b8 <__ieee754_sqrt>:
 80076b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076bc:	4a68      	ldr	r2, [pc, #416]	@ (8007860 <__ieee754_sqrt+0x1a8>)
 80076be:	ec55 4b10 	vmov	r4, r5, d0
 80076c2:	43aa      	bics	r2, r5
 80076c4:	462b      	mov	r3, r5
 80076c6:	4621      	mov	r1, r4
 80076c8:	d110      	bne.n	80076ec <__ieee754_sqrt+0x34>
 80076ca:	4622      	mov	r2, r4
 80076cc:	4620      	mov	r0, r4
 80076ce:	4629      	mov	r1, r5
 80076d0:	f7f8 ffb2 	bl	8000638 <__aeabi_dmul>
 80076d4:	4602      	mov	r2, r0
 80076d6:	460b      	mov	r3, r1
 80076d8:	4620      	mov	r0, r4
 80076da:	4629      	mov	r1, r5
 80076dc:	f7f8 fdf6 	bl	80002cc <__adddf3>
 80076e0:	4604      	mov	r4, r0
 80076e2:	460d      	mov	r5, r1
 80076e4:	ec45 4b10 	vmov	d0, r4, r5
 80076e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076ec:	2d00      	cmp	r5, #0
 80076ee:	dc0e      	bgt.n	800770e <__ieee754_sqrt+0x56>
 80076f0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80076f4:	4322      	orrs	r2, r4
 80076f6:	d0f5      	beq.n	80076e4 <__ieee754_sqrt+0x2c>
 80076f8:	b19d      	cbz	r5, 8007722 <__ieee754_sqrt+0x6a>
 80076fa:	4622      	mov	r2, r4
 80076fc:	4620      	mov	r0, r4
 80076fe:	4629      	mov	r1, r5
 8007700:	f7f8 fde2 	bl	80002c8 <__aeabi_dsub>
 8007704:	4602      	mov	r2, r0
 8007706:	460b      	mov	r3, r1
 8007708:	f7f9 f8c0 	bl	800088c <__aeabi_ddiv>
 800770c:	e7e8      	b.n	80076e0 <__ieee754_sqrt+0x28>
 800770e:	152a      	asrs	r2, r5, #20
 8007710:	d115      	bne.n	800773e <__ieee754_sqrt+0x86>
 8007712:	2000      	movs	r0, #0
 8007714:	e009      	b.n	800772a <__ieee754_sqrt+0x72>
 8007716:	0acb      	lsrs	r3, r1, #11
 8007718:	3a15      	subs	r2, #21
 800771a:	0549      	lsls	r1, r1, #21
 800771c:	2b00      	cmp	r3, #0
 800771e:	d0fa      	beq.n	8007716 <__ieee754_sqrt+0x5e>
 8007720:	e7f7      	b.n	8007712 <__ieee754_sqrt+0x5a>
 8007722:	462a      	mov	r2, r5
 8007724:	e7fa      	b.n	800771c <__ieee754_sqrt+0x64>
 8007726:	005b      	lsls	r3, r3, #1
 8007728:	3001      	adds	r0, #1
 800772a:	02dc      	lsls	r4, r3, #11
 800772c:	d5fb      	bpl.n	8007726 <__ieee754_sqrt+0x6e>
 800772e:	1e44      	subs	r4, r0, #1
 8007730:	1b12      	subs	r2, r2, r4
 8007732:	f1c0 0420 	rsb	r4, r0, #32
 8007736:	fa21 f404 	lsr.w	r4, r1, r4
 800773a:	4323      	orrs	r3, r4
 800773c:	4081      	lsls	r1, r0
 800773e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007742:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8007746:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800774a:	07d2      	lsls	r2, r2, #31
 800774c:	bf5c      	itt	pl
 800774e:	005b      	lslpl	r3, r3, #1
 8007750:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8007754:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007758:	bf58      	it	pl
 800775a:	0049      	lslpl	r1, r1, #1
 800775c:	2600      	movs	r6, #0
 800775e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8007762:	106d      	asrs	r5, r5, #1
 8007764:	0049      	lsls	r1, r1, #1
 8007766:	2016      	movs	r0, #22
 8007768:	4632      	mov	r2, r6
 800776a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800776e:	1917      	adds	r7, r2, r4
 8007770:	429f      	cmp	r7, r3
 8007772:	bfde      	ittt	le
 8007774:	193a      	addle	r2, r7, r4
 8007776:	1bdb      	suble	r3, r3, r7
 8007778:	1936      	addle	r6, r6, r4
 800777a:	0fcf      	lsrs	r7, r1, #31
 800777c:	3801      	subs	r0, #1
 800777e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8007782:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007786:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800778a:	d1f0      	bne.n	800776e <__ieee754_sqrt+0xb6>
 800778c:	4604      	mov	r4, r0
 800778e:	2720      	movs	r7, #32
 8007790:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8007794:	429a      	cmp	r2, r3
 8007796:	eb00 0e0c 	add.w	lr, r0, ip
 800779a:	db02      	blt.n	80077a2 <__ieee754_sqrt+0xea>
 800779c:	d113      	bne.n	80077c6 <__ieee754_sqrt+0x10e>
 800779e:	458e      	cmp	lr, r1
 80077a0:	d811      	bhi.n	80077c6 <__ieee754_sqrt+0x10e>
 80077a2:	f1be 0f00 	cmp.w	lr, #0
 80077a6:	eb0e 000c 	add.w	r0, lr, ip
 80077aa:	da42      	bge.n	8007832 <__ieee754_sqrt+0x17a>
 80077ac:	2800      	cmp	r0, #0
 80077ae:	db40      	blt.n	8007832 <__ieee754_sqrt+0x17a>
 80077b0:	f102 0801 	add.w	r8, r2, #1
 80077b4:	1a9b      	subs	r3, r3, r2
 80077b6:	458e      	cmp	lr, r1
 80077b8:	bf88      	it	hi
 80077ba:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80077be:	eba1 010e 	sub.w	r1, r1, lr
 80077c2:	4464      	add	r4, ip
 80077c4:	4642      	mov	r2, r8
 80077c6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80077ca:	3f01      	subs	r7, #1
 80077cc:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80077d0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80077d4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80077d8:	d1dc      	bne.n	8007794 <__ieee754_sqrt+0xdc>
 80077da:	4319      	orrs	r1, r3
 80077dc:	d01b      	beq.n	8007816 <__ieee754_sqrt+0x15e>
 80077de:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8007864 <__ieee754_sqrt+0x1ac>
 80077e2:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8007868 <__ieee754_sqrt+0x1b0>
 80077e6:	e9da 0100 	ldrd	r0, r1, [sl]
 80077ea:	e9db 2300 	ldrd	r2, r3, [fp]
 80077ee:	f7f8 fd6b 	bl	80002c8 <__aeabi_dsub>
 80077f2:	e9da 8900 	ldrd	r8, r9, [sl]
 80077f6:	4602      	mov	r2, r0
 80077f8:	460b      	mov	r3, r1
 80077fa:	4640      	mov	r0, r8
 80077fc:	4649      	mov	r1, r9
 80077fe:	f7f9 f997 	bl	8000b30 <__aeabi_dcmple>
 8007802:	b140      	cbz	r0, 8007816 <__ieee754_sqrt+0x15e>
 8007804:	f1b4 3fff 	cmp.w	r4, #4294967295
 8007808:	e9da 0100 	ldrd	r0, r1, [sl]
 800780c:	e9db 2300 	ldrd	r2, r3, [fp]
 8007810:	d111      	bne.n	8007836 <__ieee754_sqrt+0x17e>
 8007812:	3601      	adds	r6, #1
 8007814:	463c      	mov	r4, r7
 8007816:	1072      	asrs	r2, r6, #1
 8007818:	0863      	lsrs	r3, r4, #1
 800781a:	07f1      	lsls	r1, r6, #31
 800781c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8007820:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8007824:	bf48      	it	mi
 8007826:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800782a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800782e:	4618      	mov	r0, r3
 8007830:	e756      	b.n	80076e0 <__ieee754_sqrt+0x28>
 8007832:	4690      	mov	r8, r2
 8007834:	e7be      	b.n	80077b4 <__ieee754_sqrt+0xfc>
 8007836:	f7f8 fd49 	bl	80002cc <__adddf3>
 800783a:	e9da 8900 	ldrd	r8, r9, [sl]
 800783e:	4602      	mov	r2, r0
 8007840:	460b      	mov	r3, r1
 8007842:	4640      	mov	r0, r8
 8007844:	4649      	mov	r1, r9
 8007846:	f7f9 f969 	bl	8000b1c <__aeabi_dcmplt>
 800784a:	b120      	cbz	r0, 8007856 <__ieee754_sqrt+0x19e>
 800784c:	1ca0      	adds	r0, r4, #2
 800784e:	bf08      	it	eq
 8007850:	3601      	addeq	r6, #1
 8007852:	3402      	adds	r4, #2
 8007854:	e7df      	b.n	8007816 <__ieee754_sqrt+0x15e>
 8007856:	1c63      	adds	r3, r4, #1
 8007858:	f023 0401 	bic.w	r4, r3, #1
 800785c:	e7db      	b.n	8007816 <__ieee754_sqrt+0x15e>
 800785e:	bf00      	nop
 8007860:	7ff00000 	.word	0x7ff00000
 8007864:	200001e0 	.word	0x200001e0
 8007868:	200001d8 	.word	0x200001d8

0800786c <_init>:
 800786c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800786e:	bf00      	nop
 8007870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007872:	bc08      	pop	{r3}
 8007874:	469e      	mov	lr, r3
 8007876:	4770      	bx	lr

08007878 <_fini>:
 8007878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800787a:	bf00      	nop
 800787c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800787e:	bc08      	pop	{r3}
 8007880:	469e      	mov	lr, r3
 8007882:	4770      	bx	lr
